
AAlmutairiLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  08007664  08007664  00008664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  0000a780  2**0
                  CONTENTS
  4 .ARM          00000008  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a8  080088a8  0000a780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a8  080088a8  000098a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088ac  080088ac  000098ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000780  20000000  080088b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a780  2**0
                  CONTENTS
 10 .bss          00025fd4  20000780  20000780  0000a780  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20026754  20026754  0000a780  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d60  00000000  00000000  0000a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bb  00000000  00000000  0001d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  000207d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f46  00000000  00000000  00021ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271e4  00000000  00000000  00022aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ae0  00000000  00000000  00049cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12ca  00000000  00000000  000637b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144a7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cc0  00000000  00000000  00144ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0014a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000780 	.word	0x20000780
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800764c 	.word	0x0800764c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000784 	.word	0x20000784
 80001ec:	0800764c 	.word	0x0800764c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ApplicationInit>:




void ApplicationInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000594:	f006 f960 	bl	8006858 <initialise_monitor_handles>
    LTCD__Init();
 8000598:	f000 f97e 	bl	8000898 <LTCD__Init>
    LTCD_Layer_Init(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f93b 	bl	8000818 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005a2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fa22 	bl	80009f0 <LCD_Clear>

    RNG_init();
 80005ac:	f001 f936 	bl	800181c <RNG_init>
    Interrupt_Button_Init();
 80005b0:	f000 f846 	bl	8000640 <Interrupt_Button_Init>

   MainMenuDemo();
 80005b4:	f001 f88c 	bl	80016d0 <MainMenuDemo>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005b8:	f001 f918 	bl	80017ec <InitializeLCDTouch>

    while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80005bc:	e002      	b.n	80005c4 <ApplicationInit+0x34>
            HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f002 fd62 	bl	8003088 <HAL_Delay>
    while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80005c4:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <ApplicationInit+0x50>)
 80005c6:	f001 f91c 	bl	8001802 <returnTouchStateAndLocation>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f6      	bne.n	80005be <ApplicationInit+0x2e>
        }

    GameplayDemo();
 80005d0:	f001 f890 	bl	80016f4 <GameplayDemo>

    StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005d4:	4b02      	ldr	r3, [pc, #8]	@ (80005e0 <ApplicationInit+0x50>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	719a      	strb	r2, [r3, #6]
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000079c 	.word	0x2000079c

080005e4 <EXTI0_IRQHandler>:
			LCD_Clear(0, LCD_COLOR_GREEN);
		}
	}
}

void EXTI0_IRQHandler(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005e8:	2006      	movs	r0, #6
 80005ea:	f002 fe9a 	bl	8003322 <HAL_NVIC_DisableIRQ>

Tetris_RotateBlock();
 80005ee:	f001 fa8f 	bl	8001b10 <Tetris_RotateBlock>

__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_1);
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <EXTI0_IRQHandler+0x20>)
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <EXTI0_IRQHandler+0x24>)
 80005f6:	615a      	str	r2, [r3, #20]
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f8:	2006      	movs	r0, #6
 80005fa:	f002 fe84 	bl	8003306 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40013c00 	.word	0x40013c00
 8000608:	06000001 	.word	0x06000001

0800060c <button_clk_enable>:
	HAL_GPIO_Init(USER_Button_Port, &buttonConfig);

}

void button_clk_enable()
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <button_clk_enable+0x30>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <button_clk_enable+0x30>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <button_clk_enable+0x30>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <Interrupt_Button_Init>:

}


void Interrupt_Button_Init()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

		buttonConfig.Pin = USER_Button_pin;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
		buttonConfig.Mode = GPIO_MODE_IT_RISING;
 8000658:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800065c:	60bb      	str	r3, [r7, #8]
		buttonConfig.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800065e:	2301      	movs	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
		buttonConfig.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]


		button_clk_enable();
 8000666:	f7ff ffd1 	bl	800060c <button_clk_enable>
		HAL_GPIO_Init(USER_Button_Port, &buttonConfig);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <Interrupt_Button_Init+0x44>)
 8000670:	f002 fe72 	bl	8003358 <HAL_GPIO_Init>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000674:	2006      	movs	r0, #6
 8000676:	f002 fe46 	bl	8003306 <HAL_NVIC_EnableIRQ>
}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000

08000688 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	@ 0x30
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b5a      	ldr	r3, [pc, #360]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4a59      	ldr	r2, [pc, #356]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800069c:	6453      	str	r3, [r2, #68]	@ 0x44
 800069e:	4b57      	ldr	r3, [pc, #348]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b53      	ldr	r3, [pc, #332]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a52      	ldr	r2, [pc, #328]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b50      	ldr	r3, [pc, #320]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b4c      	ldr	r3, [pc, #304]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a4b      	ldr	r2, [pc, #300]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b49      	ldr	r3, [pc, #292]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b45      	ldr	r3, [pc, #276]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a44      	ldr	r2, [pc, #272]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a3d      	ldr	r2, [pc, #244]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a36      	ldr	r2, [pc, #216]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <LCD_GPIO_Init+0x174>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <LCD_GPIO_Init+0x174>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a2f      	ldr	r2, [pc, #188]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <LCD_GPIO_Init+0x174>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000752:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000756:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000764:	230e      	movs	r3, #14
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4824      	ldr	r0, [pc, #144]	@ (8000800 <LCD_GPIO_Init+0x178>)
 8000770:	f002 fdf2 	bl	8003358 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000774:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000778:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4820      	ldr	r0, [pc, #128]	@ (8000804 <LCD_GPIO_Init+0x17c>)
 8000782:	f002 fde9 	bl	8003358 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000786:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	481d      	ldr	r0, [pc, #116]	@ (8000808 <LCD_GPIO_Init+0x180>)
 8000794:	f002 fde0 	bl	8003358 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000798:	2348      	movs	r3, #72	@ 0x48
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	481a      	ldr	r0, [pc, #104]	@ (800080c <LCD_GPIO_Init+0x184>)
 80007a4:	f002 fdd8 	bl	8003358 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <LCD_GPIO_Init+0x188>)
 80007b6:	f002 fdcf 	bl	8003358 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007ba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007be:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <LCD_GPIO_Init+0x18c>)
 80007c8:	f002 fdc6 	bl	8003358 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007cc:	2303      	movs	r3, #3
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007d0:	2309      	movs	r3, #9
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	480a      	ldr	r0, [pc, #40]	@ (8000804 <LCD_GPIO_Init+0x17c>)
 80007dc:	f002 fdbc 	bl	8003358 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <LCD_GPIO_Init+0x18c>)
 80007ee:	f002 fdb3 	bl	8003358 <HAL_GPIO_Init>
}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	@ 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021400 	.word	0x40021400
 8000814:	40021800 	.word	0x40021800

08000818 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	@ 0x40
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000826:	23f0      	movs	r3, #240	@ 0xf0
 8000828:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800082e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000832:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000838:	23ff      	movs	r3, #255	@ 0xff
 800083a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <LTCD_Layer_Init+0x78>)
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000854:	23f0      	movs	r3, #240	@ 0xf0
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000858:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LTCD_Layer_Init+0x7c>)
 800087a:	f004 f933 	bl	8004ae4 <HAL_LTDC_ConfigLayer>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000884:	f000 ffac 	bl	80017e0 <LCD_Error_Handler>
	}
}
 8000888:	bf00      	nop
 800088a:	3740      	adds	r7, #64	@ 0x40
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000880 	.word	0x20000880
 8000894:	200007a4 	.word	0x200007a4

08000898 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <LTCD__Init+0xb0>)
 800089e:	4a2b      	ldr	r2, [pc, #172]	@ (800094c <LTCD__Init+0xb4>)
 80008a0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <LTCD__Init+0xb0>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <LTCD__Init+0xb0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <LTCD__Init+0xb0>)
 80008b0:	221d      	movs	r2, #29
 80008b2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <LTCD__Init+0xb0>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <LTCD__Init+0xb0>)
 80008bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <LTCD__Init+0xb0>)
 80008c4:	f240 1243 	movw	r2, #323	@ 0x143
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <LTCD__Init+0xb0>)
 80008cc:	f240 1217 	movw	r2, #279	@ 0x117
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <LTCD__Init+0xb0>)
 80008d4:	f240 1247 	movw	r2, #327	@ 0x147
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <LTCD__Init+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <LTCD__Init+0xb0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <LTCD__Init+0xb0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <LTCD__Init+0xb8>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <LTCD__Init+0xb8>)
 80008fa:	22c0      	movs	r2, #192	@ 0xc0
 80008fc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <LTCD__Init+0xb8>)
 8000900:	2204      	movs	r2, #4
 8000902:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <LTCD__Init+0xb8>)
 8000906:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <LTCD__Init+0xb8>)
 800090e:	f004 ff43 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <LTCD__Init+0xb0>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <LTCD__Init+0xb0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <LTCD__Init+0xb0>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <LTCD__Init+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800092a:	f7ff fead 	bl	8000688 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <LTCD__Init+0xb0>)
 8000930:	f004 f808 	bl	8004944 <HAL_LTDC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800093a:	f000 ff51 	bl	80017e0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800093e:	f001 f9e7 	bl	8001d10 <ili9341_Init>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200007a4 	.word	0x200007a4
 800094c:	40016800 	.word	0x40016800
 8000950:	2000084c 	.word	0x2000084c

08000954 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	460b      	mov	r3, r1
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	807b      	strh	r3, [r7, #2]
	if (x < 0 || x > 239 || y < 0 || y > 319)
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2bef      	cmp	r3, #239	@ 0xef
 800096a:	d810      	bhi.n	800098e <LCD_Draw_Pixel+0x3a>
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000972:	d20c      	bcs.n	800098e <LCD_Draw_Pixel+0x3a>
	{
		return;
	}
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000974:	88ba      	ldrh	r2, [r7, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	461a      	mov	r2, r3
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	4413      	add	r3, r2
 8000984:	4905      	ldr	r1, [pc, #20]	@ (800099c <LCD_Draw_Pixel+0x48>)
 8000986:	887a      	ldrh	r2, [r7, #2]
 8000988:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800098c:	e000      	b.n	8000990 <LCD_Draw_Pixel+0x3c>
		return;
 800098e:	bf00      	nop
}
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000880 	.word	0x20000880

080009a0 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	e00b      	b.n	80009dc <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80009c4:	89fa      	ldrh	r2, [r7, #14]
 80009c6:	88bb      	ldrh	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	b299      	uxth	r1, r3
 80009cc:	883a      	ldrh	r2, [r7, #0]
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffbf 	bl	8000954 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	3301      	adds	r3, #1
 80009da:	81fb      	strh	r3, [r7, #14]
 80009dc:	89fa      	ldrh	r2, [r7, #14]
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3ef      	bcc.n	80009c4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd90      	pop	{r4, r7, pc}
	...

080009f0 <LCD_Clear>:



void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	4613      	mov	r3, r2
 80009fe:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10e      	bne.n	8000a24 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	e007      	b.n	8000a1c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a0c:	4908      	ldr	r1, [pc, #32]	@ (8000a30 <LCD_Clear+0x40>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	88ba      	ldrh	r2, [r7, #4]
 8000a12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a22:	d3f3      	bcc.n	8000a0c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	20000880 	.word	0x20000880

08000a34 <LCD_SetTextColor>:



//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <LCD_SetTextColor+0x1c>)
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	8013      	strh	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	20000000 	.word	0x20000000

08000a54 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <LCD_SetFont+0x1c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000087c 	.word	0x2000087c

08000a74 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	603a      	str	r2, [r7, #0]
 8000a7e:	80fb      	strh	r3, [r7, #6]
 8000a80:	460b      	mov	r3, r1
 8000a82:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e04c      	b.n	8000b2c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	e03f      	b.n	8000b18 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <LCD_Draw_Char+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	4a27      	ldr	r2, [pc, #156]	@ (8000b48 <LCD_Draw_Char+0xd4>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	fa42 f303 	asr.w	r3, r2, r3
 8000ac0:	400b      	ands	r3, r1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <LCD_Draw_Char+0x5c>
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <LCD_Draw_Char+0xd0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	889b      	ldrh	r3, [r3, #4]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d920      	bls.n	8000b12 <LCD_Draw_Char+0x9e>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	fa42 f303 	asr.w	r3, r2, r3
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d104      	bne.n	8000af4 <LCD_Draw_Char+0x80>
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <LCD_Draw_Char+0xd0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	889b      	ldrh	r3, [r3, #4]
 8000af0:	2b0c      	cmp	r3, #12
 8000af2:	d80e      	bhi.n	8000b12 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	4413      	add	r3, r2
 8000afc:	b298      	uxth	r0, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <LCD_Draw_Char+0xd8>)
 8000b0a:	8812      	ldrh	r2, [r2, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff ff21 	bl	8000954 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <LCD_Draw_Char+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d3b8      	bcc.n	8000a98 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <LCD_Draw_Char+0xd0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	88db      	ldrh	r3, [r3, #6]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d3ab      	bcc.n	8000a92 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000087c 	.word	0x2000087c
 8000b48:	aaaaaaab 	.word	0xaaaaaaab
 8000b4c:	20000000 	.word	0x20000000

08000b50 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	3b20      	subs	r3, #32
 8000b66:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <LCD_DisplayChar+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	4907      	ldr	r1, [pc, #28]	@ (8000b90 <LCD_DisplayChar+0x40>)
 8000b72:	6809      	ldr	r1, [r1, #0]
 8000b74:	88c9      	ldrh	r1, [r1, #6]
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	441a      	add	r2, r3
 8000b7e:	88b9      	ldrh	r1, [r7, #4]
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff76 	bl	8000a74 <LCD_Draw_Char>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000087c 	.word	0x2000087c

08000b94 <LCD_Draw_Row_Lines>:


void LCD_Draw_Row_Lines(uint16_t x, uint16_t y, uint16_t size, uint16_t color)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	80fb      	strh	r3, [r7, #6]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80bb      	strh	r3, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	803b      	strh	r3, [r7, #0]
  for (uint16_t row = 0; row < size; row++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	81fb      	strh	r3, [r7, #14]
 8000bb6:	e00b      	b.n	8000bd0 <LCD_Draw_Row_Lines+0x3c>
  {
	  LCD_Draw_Pixel(row + x, y, color);
 8000bb8:	89fa      	ldrh	r2, [r7, #14]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	883a      	ldrh	r2, [r7, #0]
 8000bc2:	88b9      	ldrh	r1, [r7, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fec5 	bl	8000954 <LCD_Draw_Pixel>
  for (uint16_t row = 0; row < size; row++)
 8000bca:	89fb      	ldrh	r3, [r7, #14]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	81fb      	strh	r3, [r7, #14]
 8000bd0:	89fa      	ldrh	r2, [r7, #14]
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3ef      	bcc.n	8000bb8 <LCD_Draw_Row_Lines+0x24>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
	...

08000be4 <LCD_Draw_All_Shapes>:


void LCD_Draw_All_Shapes(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation, TetrominoType type)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
	switch (type)
 8000c02:	7e3b      	ldrb	r3, [r7, #24]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	f200 8431 	bhi.w	800146c <LCD_Draw_All_Shapes+0x888>
 8000c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c10 <LCD_Draw_All_Shapes+0x2c>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c31 	.word	0x08000c31
 8000c14:	08000d43 	.word	0x08000d43
 8000c18:	08000e65 	.word	0x08000e65
 8000c1c:	08000f93 	.word	0x08000f93
 8000c20:	080010c5 	.word	0x080010c5
 8000c24:	080011f7 	.word	0x080011f7
 8000c28:	08001321 	.word	0x08001321
 8000c2c:	08001449 	.word	0x08001449
	{
	case TETROMINO_I:
		if (rotation == 0)
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11e      	bne.n	8000c74 <LCD_Draw_All_Shapes+0x90>
		{
			LCD_DrawTetromino(Xpos, Ypos, color);
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	88b9      	ldrh	r1, [r7, #4]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fc19 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	3318      	adds	r3, #24
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	887a      	ldrh	r2, [r7, #2]
 8000c4a:	88b9      	ldrh	r1, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fc11 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 48, Ypos, color);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	3330      	adds	r3, #48	@ 0x30
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	887a      	ldrh	r2, [r7, #2]
 8000c5a:	88b9      	ldrh	r1, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fc09 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 72, Ypos, color);
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	3348      	adds	r3, #72	@ 0x48
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	887a      	ldrh	r2, [r7, #2]
 8000c6a:	88b9      	ldrh	r1, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fc01 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos, color);
			LCD_DrawTetromino(Xpos, Ypos + 32, color);
			LCD_DrawTetromino(Xpos, Ypos + 64, color);
			LCD_DrawTetromino(Xpos, Ypos + 96, color);
		}
		break;
 8000c72:	e3ee      	b.n	8001452 <LCD_Draw_All_Shapes+0x86e>
		else if (rotation == 1)
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d11e      	bne.n	8000cb8 <LCD_Draw_All_Shapes+0xd4>
			LCD_DrawTetromino(Xpos, Ypos, color);
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	88b9      	ldrh	r1, [r7, #4]
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fbf7 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	3320      	adds	r3, #32
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fbef 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	3340      	adds	r3, #64	@ 0x40
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	887a      	ldrh	r2, [r7, #2]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fbe7 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 96, color);
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	3360      	adds	r3, #96	@ 0x60
 8000caa:	b299      	uxth	r1, r3
 8000cac:	887a      	ldrh	r2, [r7, #2]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fbdf 	bl	8001474 <LCD_DrawTetromino>
		break;
 8000cb6:	e3cc      	b.n	8001452 <LCD_Draw_All_Shapes+0x86e>
		else if (rotation == 2)
 8000cb8:	883b      	ldrh	r3, [r7, #0]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d11e      	bne.n	8000cfc <LCD_Draw_All_Shapes+0x118>
			LCD_DrawTetromino(Xpos, Ypos, color);
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	88b9      	ldrh	r1, [r7, #4]
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fbd5 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	887a      	ldrh	r2, [r7, #2]
 8000cd2:	88b9      	ldrh	r1, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fbcd 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 48, Ypos, color);
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	3330      	adds	r3, #48	@ 0x30
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	88b9      	ldrh	r1, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fbc5 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos + 72, Ypos, color);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	3348      	adds	r3, #72	@ 0x48
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	88b9      	ldrh	r1, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fbbd 	bl	8001474 <LCD_DrawTetromino>
		break;
 8000cfa:	e3aa      	b.n	8001452 <LCD_Draw_All_Shapes+0x86e>
		else if ( rotation == 3)
 8000cfc:	883b      	ldrh	r3, [r7, #0]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	f040 83a7 	bne.w	8001452 <LCD_Draw_All_Shapes+0x86e>
			LCD_DrawTetromino(Xpos, Ypos, color);
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	88b9      	ldrh	r1, [r7, #4]
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fbb2 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	3320      	adds	r3, #32
 8000d14:	b299      	uxth	r1, r3
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fbaa 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	3340      	adds	r3, #64	@ 0x40
 8000d24:	b299      	uxth	r1, r3
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fba2 	bl	8001474 <LCD_DrawTetromino>
			LCD_DrawTetromino(Xpos, Ypos + 96, color);
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	3360      	adds	r3, #96	@ 0x60
 8000d34:	b299      	uxth	r1, r3
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fb9a 	bl	8001474 <LCD_DrawTetromino>
		break;
 8000d40:	e387      	b.n	8001452 <LCD_Draw_All_Shapes+0x86e>
	case  TETROMINO_O:
				if (rotation == 0)
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d120      	bne.n	8000d8a <LCD_Draw_All_Shapes+0x1a6>
				{
					LCD_DrawTetromino(Xpos, Ypos, color);
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	88b9      	ldrh	r1, [r7, #4]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fb90 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos , Ypos + 32, color);
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	3320      	adds	r3, #32
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fb88 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	3318      	adds	r3, #24
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	88b9      	ldrh	r1, [r7, #4]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fb80 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	3318      	adds	r3, #24
 8000d78:	b298      	uxth	r0, r3
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	3320      	adds	r3, #32
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	887a      	ldrh	r2, [r7, #2]
 8000d82:	4619      	mov	r1, r3
 8000d84:	f000 fb76 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos, Ypos, color);
					LCD_DrawTetromino(Xpos, Ypos + 32, color);
					LCD_DrawTetromino(Xpos + 24, Ypos, color);
					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
				}
				break;
 8000d88:	e365      	b.n	8001456 <LCD_Draw_All_Shapes+0x872>
				else if (rotation == 1)
 8000d8a:	883b      	ldrh	r3, [r7, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d120      	bne.n	8000dd2 <LCD_Draw_All_Shapes+0x1ee>
					LCD_DrawTetromino(Xpos, Ypos, color);
 8000d90:	887a      	ldrh	r2, [r7, #2]
 8000d92:	88b9      	ldrh	r1, [r7, #4]
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fb6c 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	3320      	adds	r3, #32
 8000da0:	b299      	uxth	r1, r3
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fb64 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	3318      	adds	r3, #24
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	88b9      	ldrh	r1, [r7, #4]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fb5c 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	3320      	adds	r3, #32
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f000 fb52 	bl	8001474 <LCD_DrawTetromino>
				break;
 8000dd0:	e341      	b.n	8001456 <LCD_Draw_All_Shapes+0x872>
				else if (rotation == 2)
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d120      	bne.n	8000e1a <LCD_Draw_All_Shapes+0x236>
					LCD_DrawTetromino(Xpos, Ypos, color);
 8000dd8:	887a      	ldrh	r2, [r7, #2]
 8000dda:	88b9      	ldrh	r1, [r7, #4]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fb48 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	3320      	adds	r3, #32
 8000de8:	b299      	uxth	r1, r3
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fb40 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	3318      	adds	r3, #24
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	88b9      	ldrh	r1, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fb38 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	3318      	adds	r3, #24
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	3320      	adds	r3, #32
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	887a      	ldrh	r2, [r7, #2]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f000 fb2e 	bl	8001474 <LCD_DrawTetromino>
				break;
 8000e18:	e31d      	b.n	8001456 <LCD_Draw_All_Shapes+0x872>
				else if ( rotation == 3)
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	f040 831a 	bne.w	8001456 <LCD_Draw_All_Shapes+0x872>
					LCD_DrawTetromino(Xpos, Ypos, color);
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	88b9      	ldrh	r1, [r7, #4]
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fb23 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	3320      	adds	r3, #32
 8000e32:	b299      	uxth	r1, r3
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fb1b 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	3318      	adds	r3, #24
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	887a      	ldrh	r2, [r7, #2]
 8000e46:	88b9      	ldrh	r1, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fb13 	bl	8001474 <LCD_DrawTetromino>
					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	3318      	adds	r3, #24
 8000e52:	b298      	uxth	r0, r3
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	3320      	adds	r3, #32
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f000 fb09 	bl	8001474 <LCD_DrawTetromino>
				break;
 8000e62:	e2f8      	b.n	8001456 <LCD_Draw_All_Shapes+0x872>
	 case TETROMINO_T:
		 	 	 	 	 	if (rotation == 0)
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d122      	bne.n	8000eb0 <LCD_Draw_All_Shapes+0x2cc>
		 				{
		 					LCD_DrawTetromino(Xpos, Ypos, color);
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	88b9      	ldrh	r1, [r7, #4]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 faff 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos , Ypos + 32, color);
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	3320      	adds	r3, #32
 8000e7a:	b299      	uxth	r1, r3
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 faf7 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos - 24, Ypos + 32, color);
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	3b18      	subs	r3, #24
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	3320      	adds	r3, #32
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f000 faed 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	88bb      	ldrh	r3, [r7, #4]
 8000ea2:	3320      	adds	r3, #32
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f000 fae3 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
		 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
		 				}
		 				break;
 8000eae:	e2d4      	b.n	800145a <LCD_Draw_All_Shapes+0x876>
		 				else if (rotation == 1)
 8000eb0:	883b      	ldrh	r3, [r7, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d120      	bne.n	8000ef8 <LCD_Draw_All_Shapes+0x314>
		 					LCD_DrawTetromino(Xpos, Ypos, color);
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	88b9      	ldrh	r1, [r7, #4]
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fad9 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	3320      	adds	r3, #32
 8000ec6:	b299      	uxth	r1, r3
 8000ec8:	887a      	ldrh	r2, [r7, #2]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fad1 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	3340      	adds	r3, #64	@ 0x40
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fac9 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	3318      	adds	r3, #24
 8000ee6:	b298      	uxth	r0, r3
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	3320      	adds	r3, #32
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f000 fabf 	bl	8001474 <LCD_DrawTetromino>
		 				break;
 8000ef6:	e2b0      	b.n	800145a <LCD_Draw_All_Shapes+0x876>
		 				else if (rotation == 2)
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d120      	bne.n	8000f40 <LCD_Draw_All_Shapes+0x35c>
		 					LCD_DrawTetromino(Xpos, Ypos, color);
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	88b9      	ldrh	r1, [r7, #4]
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fab5 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	88b9      	ldrh	r1, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 faad 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 48, Ypos, color);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	3330      	adds	r3, #48	@ 0x30
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	887a      	ldrh	r2, [r7, #2]
 8000f22:	88b9      	ldrh	r1, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 faa5 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	3320      	adds	r3, #32
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f000 fa9b 	bl	8001474 <LCD_DrawTetromino>
		 				break;
 8000f3e:	e28c      	b.n	800145a <LCD_Draw_All_Shapes+0x876>
		 				else if ( rotation == 3)
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	f040 8289 	bne.w	800145a <LCD_Draw_All_Shapes+0x876>
		 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	88b9      	ldrh	r1, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fa8e 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	b298      	uxth	r0, r3
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	3320      	adds	r3, #32
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	887a      	ldrh	r2, [r7, #2]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f000 fa84 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	3318      	adds	r3, #24
 8000f70:	b298      	uxth	r0, r3
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	3340      	adds	r3, #64	@ 0x40
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f000 fa7a 	bl	8001474 <LCD_DrawTetromino>
		 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	3320      	adds	r3, #32
 8000f84:	b299      	uxth	r1, r3
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fa72 	bl	8001474 <LCD_DrawTetromino>
		 				break;
 8000f90:	e263      	b.n	800145a <LCD_Draw_All_Shapes+0x876>
	 case TETROMINO_S:
		 						if (rotation == 0)
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d122      	bne.n	8000fde <LCD_Draw_All_Shapes+0x3fa>
				 				{
				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	88b9      	ldrh	r1, [r7, #4]
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fa68 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	88b9      	ldrh	r1, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa60 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	b298      	uxth	r0, r3
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f000 fa56 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 48, Ypos + 32, color);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	3330      	adds	r3, #48	@ 0x30
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	3320      	adds	r3, #32
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f000 fa4c 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
				 				}
				 				break;
 8000fdc:	e23f      	b.n	800145e <LCD_Draw_All_Shapes+0x87a>
				 				else if (rotation == 1)
 8000fde:	883b      	ldrh	r3, [r7, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d122      	bne.n	800102a <LCD_Draw_All_Shapes+0x446>
				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	88b9      	ldrh	r1, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fa40 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24 , Ypos + 32, color);
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	3318      	adds	r3, #24
 8000ff8:	b298      	uxth	r0, r3
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	3320      	adds	r3, #32
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	4619      	mov	r1, r3
 8001004:	f000 fa36 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	3320      	adds	r3, #32
 800100c:	b299      	uxth	r1, r3
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa2e 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	3340      	adds	r3, #64	@ 0x40
 800101c:	b299      	uxth	r1, r3
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fa26 	bl	8001474 <LCD_DrawTetromino>
				 				break;
 8001028:	e219      	b.n	800145e <LCD_Draw_All_Shapes+0x87a>
				 				else if (rotation == 2)
 800102a:	883b      	ldrh	r3, [r7, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d122      	bne.n	8001076 <LCD_Draw_All_Shapes+0x492>
				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	88b9      	ldrh	r1, [r7, #4]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fa1c 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	3318      	adds	r3, #24
 8001040:	b29b      	uxth	r3, r3
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	88b9      	ldrh	r1, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fa14 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3318      	adds	r3, #24
 8001050:	b298      	uxth	r0, r3
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	3320      	adds	r3, #32
 8001056:	b29b      	uxth	r3, r3
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	4619      	mov	r1, r3
 800105c:	f000 fa0a 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 48, Ypos + 32, color);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	3330      	adds	r3, #48	@ 0x30
 8001064:	b298      	uxth	r0, r3
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	3320      	adds	r3, #32
 800106a:	b29b      	uxth	r3, r3
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	4619      	mov	r1, r3
 8001070:	f000 fa00 	bl	8001474 <LCD_DrawTetromino>
				 				break;
 8001074:	e1f3      	b.n	800145e <LCD_Draw_All_Shapes+0x87a>
				 				else if ( rotation == 3)
 8001076:	883b      	ldrh	r3, [r7, #0]
 8001078:	2b03      	cmp	r3, #3
 800107a:	f040 81f0 	bne.w	800145e <LCD_Draw_All_Shapes+0x87a>
				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	3318      	adds	r3, #24
 8001082:	b29b      	uxth	r3, r3
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	88b9      	ldrh	r1, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f9f3 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3318      	adds	r3, #24
 8001092:	b298      	uxth	r0, r3
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	3320      	adds	r3, #32
 8001098:	b29b      	uxth	r3, r3
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	4619      	mov	r1, r3
 800109e:	f000 f9e9 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	3320      	adds	r3, #32
 80010a6:	b299      	uxth	r1, r3
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f9e1 	bl	8001474 <LCD_DrawTetromino>
				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	3340      	adds	r3, #64	@ 0x40
 80010b6:	b299      	uxth	r1, r3
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f9d9 	bl	8001474 <LCD_DrawTetromino>
				 				break;
 80010c2:	e1cc      	b.n	800145e <LCD_Draw_All_Shapes+0x87a>
	 case TETROMINO_Z:
		 	 	 	 	 	 	if (rotation == 0)
 80010c4:	883b      	ldrh	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d122      	bne.n	8001110 <LCD_Draw_All_Shapes+0x52c>
		 				 		{
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	3318      	adds	r3, #24
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	887a      	ldrh	r2, [r7, #2]
 80010d2:	88b9      	ldrh	r1, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f9cd 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	3318      	adds	r3, #24
 80010de:	b298      	uxth	r0, r3
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	3320      	adds	r3, #32
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f000 f9c3 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 48, Ypos, color);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	3330      	adds	r3, #48	@ 0x30
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	88b9      	ldrh	r1, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f9bb 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	3320      	adds	r3, #32
 8001102:	b299      	uxth	r1, r3
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f9b3 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
		 				 				}
		 				 				break;
 800110e:	e1a8      	b.n	8001462 <LCD_Draw_All_Shapes+0x87e>
		 				 				else if (rotation == 1)
 8001110:	883b      	ldrh	r3, [r7, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d122      	bne.n	800115c <LCD_Draw_All_Shapes+0x578>
		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	88b9      	ldrh	r1, [r7, #4]
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f9a9 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	3320      	adds	r3, #32
 8001126:	b299      	uxth	r1, r3
 8001128:	887a      	ldrh	r2, [r7, #2]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f9a1 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	3318      	adds	r3, #24
 8001136:	b298      	uxth	r0, r3
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	3320      	adds	r3, #32
 800113c:	b29b      	uxth	r3, r3
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	4619      	mov	r1, r3
 8001142:	f000 f997 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	3318      	adds	r3, #24
 800114a:	b298      	uxth	r0, r3
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	3340      	adds	r3, #64	@ 0x40
 8001150:	b29b      	uxth	r3, r3
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	4619      	mov	r1, r3
 8001156:	f000 f98d 	bl	8001474 <LCD_DrawTetromino>
		 				 				break;
 800115a:	e182      	b.n	8001462 <LCD_Draw_All_Shapes+0x87e>
		 				 				else if (rotation == 2)
 800115c:	883b      	ldrh	r3, [r7, #0]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d122      	bne.n	80011a8 <LCD_Draw_All_Shapes+0x5c4>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	3318      	adds	r3, #24
 8001166:	b29b      	uxth	r3, r3
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	88b9      	ldrh	r1, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f981 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	3318      	adds	r3, #24
 8001176:	b298      	uxth	r0, r3
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	3320      	adds	r3, #32
 800117c:	b29b      	uxth	r3, r3
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	4619      	mov	r1, r3
 8001182:	f000 f977 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 48, Ypos, color);
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	3330      	adds	r3, #48	@ 0x30
 800118a:	b29b      	uxth	r3, r3
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	88b9      	ldrh	r1, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f96f 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	3320      	adds	r3, #32
 800119a:	b299      	uxth	r1, r3
 800119c:	887a      	ldrh	r2, [r7, #2]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f967 	bl	8001474 <LCD_DrawTetromino>
		 				 				break;
 80011a6:	e15c      	b.n	8001462 <LCD_Draw_All_Shapes+0x87e>
		 				 				else if ( rotation == 3)
 80011a8:	883b      	ldrh	r3, [r7, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	f040 8159 	bne.w	8001462 <LCD_Draw_All_Shapes+0x87e>
		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	88b9      	ldrh	r1, [r7, #4]
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f95c 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	3320      	adds	r3, #32
 80011c0:	b299      	uxth	r1, r3
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f954 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	3318      	adds	r3, #24
 80011d0:	b298      	uxth	r0, r3
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	3320      	adds	r3, #32
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	887a      	ldrh	r2, [r7, #2]
 80011da:	4619      	mov	r1, r3
 80011dc:	f000 f94a 	bl	8001474 <LCD_DrawTetromino>
		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3318      	adds	r3, #24
 80011e4:	b298      	uxth	r0, r3
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	3340      	adds	r3, #64	@ 0x40
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	4619      	mov	r1, r3
 80011f0:	f000 f940 	bl	8001474 <LCD_DrawTetromino>
		 				 				break;
 80011f4:	e135      	b.n	8001462 <LCD_Draw_All_Shapes+0x87e>
	 case TETROMINO_J:
		 	 	 	 	 	 	 	 if (rotation == 0)
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d122      	bne.n	8001242 <LCD_Draw_All_Shapes+0x65e>
		 		 				 		{
		 		 				 			LCD_DrawTetromino(Xpos, Ypos, color);
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	88b9      	ldrh	r1, [r7, #4]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f936 	bl	8001474 <LCD_DrawTetromino>
		 		 				 			LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	3320      	adds	r3, #32
 800120c:	b299      	uxth	r1, r3
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f92e 	bl	8001474 <LCD_DrawTetromino>
		 		 				 			LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	3318      	adds	r3, #24
 800121c:	b298      	uxth	r0, r3
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	3320      	adds	r3, #32
 8001222:	b29b      	uxth	r3, r3
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	4619      	mov	r1, r3
 8001228:	f000 f924 	bl	8001474 <LCD_DrawTetromino>
		 		 				 			LCD_DrawTetromino(Xpos + 48, Ypos + 32, color);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	3330      	adds	r3, #48	@ 0x30
 8001230:	b298      	uxth	r0, r3
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	3320      	adds	r3, #32
 8001236:	b29b      	uxth	r3, r3
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	4619      	mov	r1, r3
 800123c:	f000 f91a 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
		 		 				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
		 		 				 				}
		 		 				 				break;
 8001240:	e111      	b.n	8001466 <LCD_Draw_All_Shapes+0x882>
		 		 				 				else if (rotation == 1)
 8001242:	883b      	ldrh	r3, [r7, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d11e      	bne.n	8001286 <LCD_Draw_All_Shapes+0x6a2>
		 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	88b9      	ldrh	r1, [r7, #4]
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f910 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	3320      	adds	r3, #32
 8001258:	b299      	uxth	r1, r3
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f908 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	3340      	adds	r3, #64	@ 0x40
 8001268:	b299      	uxth	r1, r3
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f900 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	3318      	adds	r3, #24
 8001278:	b29b      	uxth	r3, r3
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	88b9      	ldrh	r1, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f8f8 	bl	8001474 <LCD_DrawTetromino>
		 		 				 				break;
 8001284:	e0ef      	b.n	8001466 <LCD_Draw_All_Shapes+0x882>
		 		 				 				else if (rotation == 2)
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d120      	bne.n	80012ce <LCD_Draw_All_Shapes+0x6ea>
		 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	88b9      	ldrh	r1, [r7, #4]
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f8ee 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	3318      	adds	r3, #24
 800129c:	b29b      	uxth	r3, r3
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f8e6 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 48, Ypos, color);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	3330      	adds	r3, #48	@ 0x30
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	88b9      	ldrh	r1, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f8de 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 48, Ypos + 32, color);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	3330      	adds	r3, #48	@ 0x30
 80012bc:	b298      	uxth	r0, r3
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	3320      	adds	r3, #32
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f000 f8d4 	bl	8001474 <LCD_DrawTetromino>
		 		 				 				break;
 80012cc:	e0cb      	b.n	8001466 <LCD_Draw_All_Shapes+0x882>
		 		 				 				else if ( rotation == 3)
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	f040 80c8 	bne.w	8001466 <LCD_Draw_All_Shapes+0x882>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	3318      	adds	r3, #24
 80012da:	b29b      	uxth	r3, r3
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	88b9      	ldrh	r1, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f8c7 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	3318      	adds	r3, #24
 80012ea:	b298      	uxth	r0, r3
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	3320      	adds	r3, #32
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f000 f8bd 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	3318      	adds	r3, #24
 80012fe:	b298      	uxth	r0, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	3340      	adds	r3, #64	@ 0x40
 8001304:	b29b      	uxth	r3, r3
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	4619      	mov	r1, r3
 800130a:	f000 f8b3 	bl	8001474 <LCD_DrawTetromino>
		 		 				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	3340      	adds	r3, #64	@ 0x40
 8001312:	b299      	uxth	r1, r3
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f8ab 	bl	8001474 <LCD_DrawTetromino>
		 		 				 				break;
 800131e:	e0a2      	b.n	8001466 <LCD_Draw_All_Shapes+0x882>
	 case TETROMINO_L:
		 	 	 	 	 	 	 	 	 if (rotation == 0)
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d124      	bne.n	8001370 <LCD_Draw_All_Shapes+0x78c>
				 		 				 		{
				 		 				 			LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	3320      	adds	r3, #32
 800132a:	b299      	uxth	r1, r3
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f89f 	bl	8001474 <LCD_DrawTetromino>
				 		 				 			LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	3318      	adds	r3, #24
 800133a:	b298      	uxth	r0, r3
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	3320      	adds	r3, #32
 8001340:	b29b      	uxth	r3, r3
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	4619      	mov	r1, r3
 8001346:	f000 f895 	bl	8001474 <LCD_DrawTetromino>
				 		 				 			LCD_DrawTetromino(Xpos + 48, Ypos + 32, color);
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	3330      	adds	r3, #48	@ 0x30
 800134e:	b298      	uxth	r0, r3
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	3320      	adds	r3, #32
 8001354:	b29b      	uxth	r3, r3
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	4619      	mov	r1, r3
 800135a:	f000 f88b 	bl	8001474 <LCD_DrawTetromino>
				 		 				 			LCD_DrawTetromino(Xpos + 48, Ypos, color);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	3330      	adds	r3, #48	@ 0x30
 8001362:	b29b      	uxth	r3, r3
 8001364:	887a      	ldrh	r2, [r7, #2]
 8001366:	88b9      	ldrh	r1, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f883 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
				 		 				 				}
				 		 				 				break;
 800136e:	e07c      	b.n	800146a <LCD_Draw_All_Shapes+0x886>
				 		 				 				else if (rotation == 1)
 8001370:	883b      	ldrh	r3, [r7, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d120      	bne.n	80013b8 <LCD_Draw_All_Shapes+0x7d4>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	88b9      	ldrh	r1, [r7, #4]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f879 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 8001382:	88bb      	ldrh	r3, [r7, #4]
 8001384:	3320      	adds	r3, #32
 8001386:	b299      	uxth	r1, r3
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f871 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos + 64, color);
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	3340      	adds	r3, #64	@ 0x40
 8001396:	b299      	uxth	r1, r3
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f869 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	3318      	adds	r3, #24
 80013a6:	b298      	uxth	r0, r3
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	3340      	adds	r3, #64	@ 0x40
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f000 f85f 	bl	8001474 <LCD_DrawTetromino>
				 		 				 				break;
 80013b6:	e058      	b.n	800146a <LCD_Draw_All_Shapes+0x886>
				 		 				 				else if (rotation == 2)
 80013b8:	883b      	ldrh	r3, [r7, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d11e      	bne.n	80013fc <LCD_Draw_All_Shapes+0x818>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	88b9      	ldrh	r1, [r7, #4]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f855 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3318      	adds	r3, #24
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	88b9      	ldrh	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f84d 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 48, Ypos, color);
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	3330      	adds	r3, #48	@ 0x30
 80013de:	b29b      	uxth	r3, r3
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	88b9      	ldrh	r1, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f845 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos + 32, color);
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	3320      	adds	r3, #32
 80013ee:	b299      	uxth	r1, r3
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f83d 	bl	8001474 <LCD_DrawTetromino>
				 		 				 				break;
 80013fa:	e036      	b.n	800146a <LCD_Draw_All_Shapes+0x886>
				 		 				 				else if ( rotation == 3)
 80013fc:	883b      	ldrh	r3, [r7, #0]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d133      	bne.n	800146a <LCD_Draw_All_Shapes+0x886>
				 		 				 					LCD_DrawTetromino(Xpos, Ypos, color);
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	88b9      	ldrh	r1, [r7, #4]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f833 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos, color);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3318      	adds	r3, #24
 8001412:	b29b      	uxth	r3, r3
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	88b9      	ldrh	r1, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f82b 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 32, color);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3318      	adds	r3, #24
 8001422:	b298      	uxth	r0, r3
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	3320      	adds	r3, #32
 8001428:	b29b      	uxth	r3, r3
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	4619      	mov	r1, r3
 800142e:	f000 f821 	bl	8001474 <LCD_DrawTetromino>
				 		 				 					LCD_DrawTetromino(Xpos + 24, Ypos + 64, color);
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	3318      	adds	r3, #24
 8001436:	b298      	uxth	r0, r3
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	3340      	adds	r3, #64	@ 0x40
 800143c:	b29b      	uxth	r3, r3
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	4619      	mov	r1, r3
 8001442:	f000 f817 	bl	8001474 <LCD_DrawTetromino>
				 		 				 				break;
 8001446:	e010      	b.n	800146a <LCD_Draw_All_Shapes+0x886>
	 case TETROMINO_NONE:
		 	 	 	 	 	 	 	 LCD_Clear(0,LCD_COLOR_BLACK);
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fad0 	bl	80009f0 <LCD_Clear>

		 	 	 	 	 	 	 	 break;
 8001450:	e00c      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
		break;
 8001452:	bf00      	nop
 8001454:	e00a      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
				break;
 8001456:	bf00      	nop
 8001458:	e008      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
		 				break;
 800145a:	bf00      	nop
 800145c:	e006      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
				 				break;
 800145e:	bf00      	nop
 8001460:	e004      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
		 				 				break;
 8001462:	bf00      	nop
 8001464:	e002      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
		 		 				 				break;
 8001466:	bf00      	nop
 8001468:	e000      	b.n	800146c <LCD_Draw_All_Shapes+0x888>
				 		 				 				break;
 800146a:	bf00      	nop

	}
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <LCD_DrawTetromino>:



void LCD_DrawTetromino(uint16_t pixelX, uint16_t pixelY, uint16_t color) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	460b      	mov	r3, r1
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	807b      	strh	r3, [r7, #2]

	for(int y = pixelY; y <= pixelY + 32; y++)
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e009      	b.n	80014a0 <LCD_DrawTetromino+0x2c>
	{
		LCD_Draw_Row_Lines(pixelX, y, 24, color);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	b299      	uxth	r1, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	88f8      	ldrh	r0, [r7, #6]
 8001494:	2218      	movs	r2, #24
 8001496:	f7ff fb7d 	bl	8000b94 <LCD_Draw_Row_Lines>
	for(int y = pixelY; y <= pixelY + 32; y++)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	3320      	adds	r3, #32
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	ddf0      	ble.n	800148c <LCD_DrawTetromino+0x18>
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LCD_TetrisDrawGrid>:



void LCD_TetrisDrawGrid()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    for (int x = 0; x <= 240; x += 24) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e00b      	b.n	80014d8 <LCD_TetrisDrawGrid+0x24>
        LCD_Draw_Vertical_Line(x, 0, 320, LCD_COLOR_WHITE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	b298      	uxth	r0, r3
 80014c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014c8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014cc:	2100      	movs	r1, #0
 80014ce:	f7ff fa67 	bl	80009a0 <LCD_Draw_Vertical_Line>
    for (int x = 0; x <= 240; x += 24) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3318      	adds	r3, #24
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2bf0      	cmp	r3, #240	@ 0xf0
 80014dc:	ddf0      	ble.n	80014c0 <LCD_TetrisDrawGrid+0xc>
    }

    for (int y = 0; y <= 320; y += 32) {
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	e00a      	b.n	80014fa <LCD_TetrisDrawGrid+0x46>
        LCD_Draw_Row_Lines(0, y, 240, LCD_COLOR_WHITE);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ec:	22f0      	movs	r2, #240	@ 0xf0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fb50 	bl	8000b94 <LCD_Draw_Row_Lines>
    for (int y = 0; y <= 320; y += 32) {
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3320      	adds	r3, #32
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001500:	ddf0      	ble.n	80014e4 <LCD_TetrisDrawGrid+0x30>
    }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <Tetris_Draw_Grid>:

void Tetris_Draw_Grid(uint32_t grid[10][10])
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_GREY);
 8001514:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fa69 	bl	80009f0 <LCD_Clear>
	for (int y = 0; y < 10; y++)
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e028      	b.n	8001576 <Tetris_Draw_Grid+0x6a>
	{
		for (int x = 0; x < 10; x++)
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	e01f      	b.n	800156a <Tetris_Draw_Grid+0x5e>
		{
			if (grid[y][x])
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00f      	beq.n	8001564 <Tetris_Draw_Grid+0x58>
			{
				LCD_DrawTetromino(x*CELL_WIDTH, y * CELL_HEIGHT, LCD_COLOR_GREEN);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	b29b      	uxth	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0052      	lsls	r2, r2, #1
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	b298      	uxth	r0, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	b29b      	uxth	r3, r3
 8001556:	015b      	lsls	r3, r3, #5
 8001558:	b29b      	uxth	r3, r3
 800155a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff ff88 	bl	8001474 <LCD_DrawTetromino>
		for (int x = 0; x < 10; x++)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b09      	cmp	r3, #9
 800156e:	dddc      	ble.n	800152a <Tetris_Draw_Grid+0x1e>
	for (int y = 0; y < 10; y++)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b09      	cmp	r3, #9
 800157a:	ddd3      	ble.n	8001524 <Tetris_Draw_Grid+0x18>


				}
			}
		}
	LCD_TetrisDrawGrid();
 800157c:	f7ff ff9a 	bl	80014b4 <LCD_TetrisDrawGrid>
	}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <LCD_DrawMainMenu>:



void LCD_DrawMainMenu(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af02      	add	r7, sp, #8
	LCD_Clear(0, LCD_COLOR_WHITE);
 800158e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fa2c 	bl	80009f0 <LCD_Clear>
	LCD_Draw_All_Shapes(120, 0, LCD_COLOR_CYAN,0, TETROMINO_I);
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	@ 0x78
 80015a6:	f7ff fb1d 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(72, 96, LCD_COLOR_BLUE,0, TETROMINO_O);
 80015aa:	2301      	movs	r3, #1
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	221f      	movs	r2, #31
 80015b2:	2160      	movs	r1, #96	@ 0x60
 80015b4:	2048      	movs	r0, #72	@ 0x48
 80015b6:	f7ff fb15 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(96, 192, LCD_COLOR_BLUE2, 0, TETROMINO_T);
 80015ba:	2302      	movs	r3, #2
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	f240 521f 	movw	r2, #1311	@ 0x51f
 80015c4:	21c0      	movs	r1, #192	@ 0xc0
 80015c6:	2060      	movs	r0, #96	@ 0x60
 80015c8:	f7ff fb0c 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(24, 0, LCD_COLOR_GREEN,0, TETROMINO_S);
 80015cc:	2303      	movs	r3, #3
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2018      	movs	r0, #24
 80015da:	f7ff fb03 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(168, 96, LCD_COLOR_YELLOW, 0,TETROMINO_Z);
 80015de:	2304      	movs	r3, #4
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2300      	movs	r3, #0
 80015e4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015e8:	2160      	movs	r1, #96	@ 0x60
 80015ea:	20a8      	movs	r0, #168	@ 0xa8
 80015ec:	f7ff fafa 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(24, 256, LCD_COLOR_RED, 0,TETROMINO_J);
 80015f0:	2305      	movs	r3, #5
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fe:	2018      	movs	r0, #24
 8001600:	f7ff faf0 	bl	8000be4 <LCD_Draw_All_Shapes>
	LCD_Draw_All_Shapes(144, 225, LCD_COLOR_MAGENTA, 0,TETROMINO_L);
 8001604:	2306      	movs	r3, #6
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800160e:	21e1      	movs	r1, #225	@ 0xe1
 8001610:	2090      	movs	r0, #144	@ 0x90
 8001612:	f7ff fae7 	bl	8000be4 <LCD_Draw_All_Shapes>

	LCD_DisplayChar(78, 140, 'T');
 8001616:	2254      	movs	r2, #84	@ 0x54
 8001618:	218c      	movs	r1, #140	@ 0x8c
 800161a:	204e      	movs	r0, #78	@ 0x4e
 800161c:	f7ff fa98 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(93, 140, 'e');
 8001620:	2265      	movs	r2, #101	@ 0x65
 8001622:	218c      	movs	r1, #140	@ 0x8c
 8001624:	205d      	movs	r0, #93	@ 0x5d
 8001626:	f7ff fa93 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(108, 140, 't');
 800162a:	2274      	movs	r2, #116	@ 0x74
 800162c:	218c      	movs	r1, #140	@ 0x8c
 800162e:	206c      	movs	r0, #108	@ 0x6c
 8001630:	f7ff fa8e 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(123, 140, 'r');
 8001634:	2272      	movs	r2, #114	@ 0x72
 8001636:	218c      	movs	r1, #140	@ 0x8c
 8001638:	207b      	movs	r0, #123	@ 0x7b
 800163a:	f7ff fa89 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(138, 140, 'i');
 800163e:	2269      	movs	r2, #105	@ 0x69
 8001640:	218c      	movs	r1, #140	@ 0x8c
 8001642:	208a      	movs	r0, #138	@ 0x8a
 8001644:	f7ff fa84 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(153, 140, 's');
 8001648:	2273      	movs	r2, #115	@ 0x73
 800164a:	218c      	movs	r1, #140	@ 0x8c
 800164c:	2099      	movs	r0, #153	@ 0x99
 800164e:	f7ff fa7f 	bl	8000b50 <LCD_DisplayChar>


	LCD_DisplayChar(38, 160, 'T');
 8001652:	2254      	movs	r2, #84	@ 0x54
 8001654:	21a0      	movs	r1, #160	@ 0xa0
 8001656:	2026      	movs	r0, #38	@ 0x26
 8001658:	f7ff fa7a 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(53, 160, 'o');
 800165c:	226f      	movs	r2, #111	@ 0x6f
 800165e:	21a0      	movs	r1, #160	@ 0xa0
 8001660:	2035      	movs	r0, #53	@ 0x35
 8001662:	f7ff fa75 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(68, 160, 'u');
 8001666:	2275      	movs	r2, #117	@ 0x75
 8001668:	21a0      	movs	r1, #160	@ 0xa0
 800166a:	2044      	movs	r0, #68	@ 0x44
 800166c:	f7ff fa70 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(83, 160, 'c');
 8001670:	2263      	movs	r2, #99	@ 0x63
 8001672:	21a0      	movs	r1, #160	@ 0xa0
 8001674:	2053      	movs	r0, #83	@ 0x53
 8001676:	f7ff fa6b 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(98, 160, 'h');
 800167a:	2268      	movs	r2, #104	@ 0x68
 800167c:	21a0      	movs	r1, #160	@ 0xa0
 800167e:	2062      	movs	r0, #98	@ 0x62
 8001680:	f7ff fa66 	bl	8000b50 <LCD_DisplayChar>

	LCD_DisplayChar(113, 160, 't');
 8001684:	2274      	movs	r2, #116	@ 0x74
 8001686:	21a0      	movs	r1, #160	@ 0xa0
 8001688:	2071      	movs	r0, #113	@ 0x71
 800168a:	f7ff fa61 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(128, 160, 'o');
 800168e:	226f      	movs	r2, #111	@ 0x6f
 8001690:	21a0      	movs	r1, #160	@ 0xa0
 8001692:	2080      	movs	r0, #128	@ 0x80
 8001694:	f7ff fa5c 	bl	8000b50 <LCD_DisplayChar>


	LCD_DisplayChar(153, 160, 'S');
 8001698:	2253      	movs	r2, #83	@ 0x53
 800169a:	21a0      	movs	r1, #160	@ 0xa0
 800169c:	2099      	movs	r0, #153	@ 0x99
 800169e:	f7ff fa57 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(168, 160, 'T');
 80016a2:	2254      	movs	r2, #84	@ 0x54
 80016a4:	21a0      	movs	r1, #160	@ 0xa0
 80016a6:	20a8      	movs	r0, #168	@ 0xa8
 80016a8:	f7ff fa52 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(183, 160, 'A');
 80016ac:	2241      	movs	r2, #65	@ 0x41
 80016ae:	21a0      	movs	r1, #160	@ 0xa0
 80016b0:	20b7      	movs	r0, #183	@ 0xb7
 80016b2:	f7ff fa4d 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(198, 160, 'R');
 80016b6:	2252      	movs	r2, #82	@ 0x52
 80016b8:	21a0      	movs	r1, #160	@ 0xa0
 80016ba:	20c6      	movs	r0, #198	@ 0xc6
 80016bc:	f7ff fa48 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(213, 160, 'T');
 80016c0:	2254      	movs	r2, #84	@ 0x54
 80016c2:	21a0      	movs	r1, #160	@ 0xa0
 80016c4:	20d5      	movs	r0, #213	@ 0xd5
 80016c6:	f7ff fa43 	bl	8000b50 <LCD_DisplayChar>
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <MainMenuDemo>:

void MainMenuDemo(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	LCD_TetrisDrawGrid();
 80016d4:	f7ff feee 	bl	80014b4 <LCD_TetrisDrawGrid>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff f9ab 	bl	8000a34 <LCD_SetTextColor>

	LCD_SetFont(&Font16x24);
 80016de:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MainMenuDemo+0x20>)
 80016e0:	f7ff f9b8 	bl	8000a54 <LCD_SetFont>


	LCD_DrawMainMenu();
 80016e4:	f7ff ff50 	bl	8001588 <LCD_DrawMainMenu>





	LCD_TetrisDrawGrid();
 80016e8:	f7ff fee4 	bl	80014b4 <LCD_TetrisDrawGrid>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000704 	.word	0x20000704

080016f4 <GameplayDemo>:



void GameplayDemo(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

    Tetris_PlayGame();
 80016f8:	f000 fab4 	bl	8001c64 <Tetris_PlayGame>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <GameOverDemo>:




void GameOverDemo(char TimecountedPlaying[10])
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	LCD_Clear(0, LCD_COLOR_CYAN);
 8001708:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff f96f 	bl	80009f0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff f98e 	bl	8000a34 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001718:	4830      	ldr	r0, [pc, #192]	@ (80017dc <GameOverDemo+0xdc>)
 800171a:	f7ff f99b 	bl	8000a54 <LCD_SetFont>


	LCD_DisplayChar(100, 140, 'G');
 800171e:	2247      	movs	r2, #71	@ 0x47
 8001720:	218c      	movs	r1, #140	@ 0x8c
 8001722:	2064      	movs	r0, #100	@ 0x64
 8001724:	f7ff fa14 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(117, 140, 'a');
 8001728:	2261      	movs	r2, #97	@ 0x61
 800172a:	218c      	movs	r1, #140	@ 0x8c
 800172c:	2075      	movs	r0, #117	@ 0x75
 800172e:	f7ff fa0f 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(132, 140, 'm');
 8001732:	226d      	movs	r2, #109	@ 0x6d
 8001734:	218c      	movs	r1, #140	@ 0x8c
 8001736:	2084      	movs	r0, #132	@ 0x84
 8001738:	f7ff fa0a 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(146, 140, 'e');
 800173c:	2265      	movs	r2, #101	@ 0x65
 800173e:	218c      	movs	r1, #140	@ 0x8c
 8001740:	2092      	movs	r0, #146	@ 0x92
 8001742:	f7ff fa05 	bl	8000b50 <LCD_DisplayChar>


	LCD_DisplayChar(100, 160, 'O');
 8001746:	224f      	movs	r2, #79	@ 0x4f
 8001748:	21a0      	movs	r1, #160	@ 0xa0
 800174a:	2064      	movs	r0, #100	@ 0x64
 800174c:	f7ff fa00 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(115, 160, 'v');
 8001750:	2276      	movs	r2, #118	@ 0x76
 8001752:	21a0      	movs	r1, #160	@ 0xa0
 8001754:	2073      	movs	r0, #115	@ 0x73
 8001756:	f7ff f9fb 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(126, 160, 'e');
 800175a:	2265      	movs	r2, #101	@ 0x65
 800175c:	21a0      	movs	r1, #160	@ 0xa0
 800175e:	207e      	movs	r0, #126	@ 0x7e
 8001760:	f7ff f9f6 	bl	8000b50 <LCD_DisplayChar>
	LCD_DisplayChar(137, 160, 'r');
 8001764:	2272      	movs	r2, #114	@ 0x72
 8001766:	21a0      	movs	r1, #160	@ 0xa0
 8001768:	2089      	movs	r0, #137	@ 0x89
 800176a:	f7ff f9f1 	bl	8000b50 <LCD_DisplayChar>

	for (uint8_t t = 0; t < 10; t++)
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e019      	b.n	80017a8 <GameOverDemo+0xa8>
	{
	        if (TimecountedPlaying[t] != '\0') {
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d017      	beq.n	80017b0 <GameOverDemo+0xb0>
	            LCD_DisplayChar(140 + (t * 10), 180, TimecountedPlaying[t]);
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	b29b      	uxth	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4413      	add	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	338c      	adds	r3, #140	@ 0x8c
 8001790:	b298      	uxth	r0, r3
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	21b4      	movs	r1, #180	@ 0xb4
 800179e:	f7ff f9d7 	bl	8000b50 <LCD_DisplayChar>
	for (uint8_t t = 0; t < 10; t++)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3301      	adds	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d9e2      	bls.n	8001774 <GameOverDemo+0x74>
 80017ae:	e000      	b.n	80017b2 <GameOverDemo+0xb2>
	        } else {
	            break;
 80017b0:	bf00      	nop
	        }
	    }

	    LCD_DisplayChar(150 + (10 * strlen(TimecountedPlaying)), 180, 's');
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fd1c 	bl	80001f0 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3396      	adds	r3, #150	@ 0x96
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2273      	movs	r2, #115	@ 0x73
 80017cc:	21b4      	movs	r1, #180	@ 0xb4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f9be 	bl	8000b50 <LCD_DisplayChar>
	}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000704 	.word	0x20000704

080017e0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <LCD_Error_Handler+0x8>

080017ec <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80017f0:	f001 f81d 	bl	800282e <STMPE811_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d001      	beq.n	80017fe <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <InitializeLCDTouch+0xe>
  }
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}

08001802 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f001 f8c7 	bl	800299e <STMPE811_ReadTouch>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <RNG_init>:

static RNG_HandleTypeDef hrng;

// initialize RNG
void RNG_init()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <RNG_init+0x38>)
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <RNG_init+0x38>)
 800182c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001830:	6353      	str	r3, [r2, #52]	@ 0x34
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <RNG_init+0x38>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <RNG_init+0x3c>)
 8001840:	4a06      	ldr	r2, [pc, #24]	@ (800185c <RNG_init+0x40>)
 8001842:	601a      	str	r2, [r3, #0]

	HAL_RNG_Init(&hrng);
 8001844:	4804      	ldr	r0, [pc, #16]	@ (8001858 <RNG_init+0x3c>)
 8001846:	f004 f967 	bl	8005b18 <HAL_RNG_Init>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	20026080 	.word	0x20026080
 800185c:	50060800 	.word	0x50060800

08001860 <RNG_GetRAND_Num>:

// Generate Random Number
uint32_t RNG_GetRAND_Num()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	uint32_t RANDNum = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
	HAL_RNG_GenerateRandomNumber(&hrng, &RANDNum);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	480a      	ldr	r0, [pc, #40]	@ (8001898 <RNG_GetRAND_Num+0x38>)
 8001870:	f004 f97c 	bl	8005b6c <HAL_RNG_GenerateRandomNumber>

	return RANDNum % 7;
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <RNG_GetRAND_Num+0x3c>)
 8001878:	fba3 1302 	umull	r1, r3, r3, r2
 800187c:	1ad1      	subs	r1, r2, r3
 800187e:	0849      	lsrs	r1, r1, #1
 8001880:	440b      	add	r3, r1
 8001882:	0899      	lsrs	r1, r3, #2
 8001884:	460b      	mov	r3, r1
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a5b      	subs	r3, r3, r1
 800188a:	1ad1      	subs	r1, r2, r3
 800188c:	460b      	mov	r3, r1
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20026080 	.word	0x20026080
 800189c:	24924925 	.word	0x24924925

080018a0 <Tetris_GameLoop>:
	        }
	    }
};

 void Tetris_GameLoop()
 {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
 	 while (1) {
 	    	Tetris_Draw_Grid(Tetris_nextGrid);
 80018a4:	481c      	ldr	r0, [pc, #112]	@ (8001918 <Tetris_GameLoop+0x78>)
 80018a6:	f7ff fe31 	bl	800150c <Tetris_Draw_Grid>
 	        if (Tetris_CheckCollision())
 80018aa:	f000 f8e5 	bl	8001a78 <Tetris_CheckCollision>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01e      	beq.n	80018f2 <Tetris_GameLoop+0x52>
 	        {

 	            Tetris_PlaceTetromino(Tetris_gamecurrentScreen);
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <Tetris_GameLoop+0x7c>)
 80018b6:	f000 f897 	bl	80019e8 <Tetris_PlaceTetromino>


 	            memcpy(Tetris_nextGrid, Tetris_gamecurrentScreen, sizeof(Tetris_gamecurrentScreen));
 80018ba:	4a17      	ldr	r2, [pc, #92]	@ (8001918 <Tetris_GameLoop+0x78>)
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <Tetris_GameLoop+0x7c>)
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80018c6:	461a      	mov	r2, r3
 80018c8:	f005 f9c7 	bl	8006c5a <memcpy>



 	            Ypos = 0;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <Tetris_GameLoop+0x80>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]

 	            Rotation_at_currentScreen = 0;
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <Tetris_GameLoop+0x84>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
 	            Tetris_GenerateTetromino();
 80018d8:	f000 f860 	bl	800199c <Tetris_GenerateTetromino>


 	            if (Tetris_CheckCollision()) {
 80018dc:	f000 f8cc 	bl	8001a78 <Tetris_CheckCollision>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d010      	beq.n	8001908 <Tetris_GameLoop+0x68>

 	                Tetris_PlaceTetromino(Tetris_gamecurrentScreen);
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <Tetris_GameLoop+0x7c>)
 80018e8:	f000 f87e 	bl	80019e8 <Tetris_PlaceTetromino>
 	                LCD_TetrisDrawGrid();
 80018ec:	f7ff fde2 	bl	80014b4 <LCD_TetrisDrawGrid>
 	                break;
 80018f0:	e00f      	b.n	8001912 <Tetris_GameLoop+0x72>

 	            }
 	        } else {

 	            memcpy(Tetris_nextGrid, Tetris_gamecurrentScreen, sizeof(Tetris_gamecurrentScreen));
 80018f2:	4a09      	ldr	r2, [pc, #36]	@ (8001918 <Tetris_GameLoop+0x78>)
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <Tetris_GameLoop+0x7c>)
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80018fe:	461a      	mov	r2, r3
 8001900:	f005 f9ab 	bl	8006c5a <memcpy>
 	            Tetris_MoveBlockDown();
 8001904:	f000 f986 	bl	8001c14 <Tetris_MoveBlockDown>
 	        }


 	        HAL_Delay(1000);
 8001908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800190c:	f001 fbbc 	bl	8003088 <HAL_Delay>
 	    	Tetris_Draw_Grid(Tetris_nextGrid);
 8001910:	e7c8      	b.n	80018a4 <Tetris_GameLoop+0x4>
 	    }
 }
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20026220 	.word	0x20026220
 800191c:	20026090 	.word	0x20026090
 8001920:	200263b0 	.word	0x200263b0
 8001924:	200263b1 	.word	0x200263b1

08001928 <TimePlaying>:

 void TimePlaying(uint32_t timeForGameOver, uint32_t time_Start) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
     if (timeForGameOver < time_Start) {
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d207      	bcs.n	800194a <TimePlaying+0x22>
         Timecounted = 40000000 - time_Start + timeForGameOver;
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1ad2      	subs	r2, r2, r3
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <TimePlaying+0x4c>)
 8001942:	4413      	add	r3, r2
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <TimePlaying+0x50>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e004      	b.n	8001954 <TimePlaying+0x2c>
     } else {
         Timecounted = timeForGameOver - time_Start;
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <TimePlaying+0x50>)
 8001952:	6013      	str	r3, [r2, #0]
     }

     sprintf(timePlayedtoDisplay, "%lu", Timecounted / 1000);
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <TimePlaying+0x50>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a08      	ldr	r2, [pc, #32]	@ (800197c <TimePlaying+0x54>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	4907      	ldr	r1, [pc, #28]	@ (8001980 <TimePlaying+0x58>)
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <TimePlaying+0x5c>)
 8001966:	f005 f899 	bl	8006a9c <siprintf>
 }
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	02625a00 	.word	0x02625a00
 8001978:	20026408 	.word	0x20026408
 800197c:	10624dd3 	.word	0x10624dd3
 8001980:	08007664 	.word	0x08007664
 8001984:	200263f4 	.word	0x200263f4

08001988 <Tetris_Init>:



void Tetris_Init(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    Tetris_GenerateTetromino();
 800198c:	f000 f806 	bl	800199c <Tetris_GenerateTetromino>
    HAL_Delay(750);
 8001990:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001994:	f001 fb78 	bl	8003088 <HAL_Delay>

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <Tetris_GenerateTetromino>:


void Tetris_GenerateTetromino(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    randomNum = RNG_GetRAND_Num();
 80019a0:	f7ff ff5e 	bl	8001860 <RNG_GetRAND_Num>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <Tetris_GenerateTetromino+0x3c>)
 80019aa:	701a      	strb	r2, [r3, #0]
    HAL_Delay(20);
 80019ac:	2014      	movs	r0, #20
 80019ae:	f001 fb6b 	bl	8003088 <HAL_Delay>
    memcpy(Tetris_currentTetromino, tetrominoShapes[randomNum][Rotation_at_currentScreen], sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <Tetris_GenerateTetromino+0x3c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <Tetris_GenerateTetromino+0x40>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	008b      	lsls	r3, r1, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <Tetris_GenerateTetromino+0x44>)
 80019c6:	4413      	add	r3, r2
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <Tetris_GenerateTetromino+0x48>)
 80019ce:	f005 f944 	bl	8006c5a <memcpy>

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2002644c 	.word	0x2002644c
 80019dc:	200263b1 	.word	0x200263b1
 80019e0:	20000004 	.word	0x20000004
 80019e4:	200263b4 	.word	0x200263b4

080019e8 <Tetris_PlaceTetromino>:





void Tetris_PlaceTetromino(uint32_t grid[HEIGHT_SIZE][WIDTH_SIZE]) {
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < TETROMINO_SIZE; y++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e030      	b.n	8001a58 <Tetris_PlaceTetromino+0x70>
        for (uint8_t x = 0; x < TETROMINO_SIZE; x++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	73bb      	strb	r3, [r7, #14]
 80019fa:	e027      	b.n	8001a4c <Tetris_PlaceTetromino+0x64>
            if (Tetris_currentTetromino[y][x] == 1) {
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	491a      	ldr	r1, [pc, #104]	@ (8001a6c <Tetris_PlaceTetromino+0x84>)
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d11b      	bne.n	8001a46 <Tetris_PlaceTetromino+0x5e>
                uint8_t gridX = Xpos + x;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <Tetris_PlaceTetromino+0x88>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	4413      	add	r3, r2
 8001a16:	737b      	strb	r3, [r7, #13]
                uint8_t gridY = Ypos + y ;
 8001a18:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <Tetris_PlaceTetromino+0x8c>)
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	4413      	add	r3, r2
 8001a20:	733b      	strb	r3, [r7, #12]
                if (gridX < WIDTH_SIZE && gridY < HEIGHT_SIZE) {
 8001a22:	7b7b      	ldrb	r3, [r7, #13]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d80e      	bhi.n	8001a46 <Tetris_PlaceTetromino+0x5e>
 8001a28:	7b3b      	ldrb	r3, [r7, #12]
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	d80b      	bhi.n	8001a46 <Tetris_PlaceTetromino+0x5e>
                    grid[gridY][gridX] = 1;
 8001a2e:	7b3a      	ldrb	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	7b7a      	ldrb	r2, [r7, #13]
 8001a40:	2101      	movs	r1, #1
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t x = 0; x < TETROMINO_SIZE; x++) {
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	73bb      	strb	r3, [r7, #14]
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d9d4      	bls.n	80019fc <Tetris_PlaceTetromino+0x14>
    for (uint8_t y = 0; y < TETROMINO_SIZE; y++) {
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d9cb      	bls.n	80019f6 <Tetris_PlaceTetromino+0xe>
                }
            }
        }
    }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	200263b4 	.word	0x200263b4
 8001a70:	20000002 	.word	0x20000002
 8001a74:	200263b0 	.word	0x200263b0

08001a78 <Tetris_CheckCollision>:

bool Tetris_CheckCollision(void) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
    for (uint8_t y = 0; y < TETROMINO_SIZE; y++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e032      	b.n	8001aea <Tetris_CheckCollision+0x72>
        for (uint8_t x = 0; x < TETROMINO_SIZE; x++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	71bb      	strb	r3, [r7, #6]
 8001a88:	e029      	b.n	8001ade <Tetris_CheckCollision+0x66>
            if (Tetris_currentTetromino[y][x] == 1) {
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	491c      	ldr	r1, [pc, #112]	@ (8001b00 <Tetris_CheckCollision+0x88>)
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11d      	bne.n	8001ad8 <Tetris_CheckCollision+0x60>
                uint8_t gridX = Xpos + x;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <Tetris_CheckCollision+0x8c>)
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	717b      	strb	r3, [r7, #5]
                uint8_t gridY = Ypos + y;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <Tetris_CheckCollision+0x90>)
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4413      	add	r3, r2
 8001aae:	713b      	strb	r3, [r7, #4]

                if (gridX >= WIDTH_SIZE || gridY >= HEIGHT_SIZE || Tetris_gamecurrentScreen[gridY][gridX] != 0) {
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b09      	cmp	r3, #9
 8001ab4:	d80e      	bhi.n	8001ad4 <Tetris_CheckCollision+0x5c>
 8001ab6:	793b      	ldrb	r3, [r7, #4]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d80b      	bhi.n	8001ad4 <Tetris_CheckCollision+0x5c>
 8001abc:	793a      	ldrb	r2, [r7, #4]
 8001abe:	7979      	ldrb	r1, [r7, #5]
 8001ac0:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <Tetris_CheckCollision+0x94>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <Tetris_CheckCollision+0x60>
                    return true;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e00c      	b.n	8001af2 <Tetris_CheckCollision+0x7a>
        for (uint8_t x = 0; x < TETROMINO_SIZE; x++) {
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	3301      	adds	r3, #1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d9d2      	bls.n	8001a8a <Tetris_CheckCollision+0x12>
    for (uint8_t y = 0; y < TETROMINO_SIZE; y++) {
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d9c9      	bls.n	8001a84 <Tetris_CheckCollision+0xc>
                }
            }
        }
    }
    return false;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200263b4 	.word	0x200263b4
 8001b04:	20000002 	.word	0x20000002
 8001b08:	200263b0 	.word	0x200263b0
 8001b0c:	20026090 	.word	0x20026090

08001b10 <Tetris_RotateBlock>:

void Tetris_RotateBlock(){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0

	uint8_t Tetris_previousRotation = Rotation_at_currentScreen;
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
	Rotation_at_currentScreen +=1;
 8001b1c:	4b36      	ldr	r3, [pc, #216]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b26:	701a      	strb	r2, [r3, #0]
	if (Rotation_at_currentScreen >= 4) {
 8001b28:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d902      	bls.n	8001b36 <Tetris_RotateBlock+0x26>
	        Rotation_at_currentScreen = 0;
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	}
    memcpy(Tetris_currentTetromino, Tetris_clearTetromino, sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
 8001b36:	4a31      	ldr	r2, [pc, #196]	@ (8001bfc <Tetris_RotateBlock+0xec>)
 8001b38:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <Tetris_RotateBlock+0xf0>)
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(Tetris_currentTetromino, tetrominoShapes[randomNum][Rotation_at_currentScreen], sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
 8001b52:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <Tetris_RotateBlock+0xf4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	008b      	lsls	r3, r1, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	019b      	lsls	r3, r3, #6
 8001b64:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <Tetris_RotateBlock+0xf8>)
 8001b66:	4413      	add	r3, r2
 8001b68:	2240      	movs	r2, #64	@ 0x40
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4823      	ldr	r0, [pc, #140]	@ (8001bfc <Tetris_RotateBlock+0xec>)
 8001b6e:	f005 f874 	bl	8006c5a <memcpy>
	bool collision = Tetris_CheckCollision();
 8001b72:	f7ff ff81 	bl	8001a78 <Tetris_CheckCollision>
 8001b76:	4603      	mov	r3, r0
 8001b78:	71bb      	strb	r3, [r7, #6]
	if (!collision){
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <Tetris_RotateBlock+0x9c>
		memcpy(Tetris_nextGrid, Tetris_gamecurrentScreen, sizeof(Tetris_gamecurrentScreen));
 8001b86:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <Tetris_RotateBlock+0xfc>)
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <Tetris_RotateBlock+0x100>)
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b92:	461a      	mov	r2, r3
 8001b94:	f005 f861 	bl	8006c5a <memcpy>
		Tetris_PlaceTetromino(Tetris_nextGrid);
 8001b98:	481c      	ldr	r0, [pc, #112]	@ (8001c0c <Tetris_RotateBlock+0xfc>)
 8001b9a:	f7ff ff25 	bl	80019e8 <Tetris_PlaceTetromino>
		Tetris_Draw_Grid(Tetris_gamecurrentScreen);
 8001b9e:	481c      	ldr	r0, [pc, #112]	@ (8001c10 <Tetris_RotateBlock+0x100>)
 8001ba0:	f7ff fcb4 	bl	800150c <Tetris_Draw_Grid>
		Tetris_Draw_Grid(Tetris_nextGrid);
 8001ba4:	4819      	ldr	r0, [pc, #100]	@ (8001c0c <Tetris_RotateBlock+0xfc>)
 8001ba6:	f7ff fcb1 	bl	800150c <Tetris_Draw_Grid>
		Rotation_at_currentScreen = Tetris_previousRotation;
	    memcpy(Tetris_currentTetromino, Tetris_clearTetromino, sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
        memcpy(Tetris_currentTetromino, tetrominoShapes[randomNum][Rotation_at_currentScreen], sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));

	}
}
 8001baa:	e020      	b.n	8001bee <Tetris_RotateBlock+0xde>
		Rotation_at_currentScreen = Tetris_previousRotation;
 8001bac:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	7013      	strb	r3, [r2, #0]
	    memcpy(Tetris_currentTetromino, Tetris_clearTetromino, sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <Tetris_RotateBlock+0xec>)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <Tetris_RotateBlock+0xf0>)
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	461d      	mov	r5, r3
 8001bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        memcpy(Tetris_currentTetromino, tetrominoShapes[randomNum][Rotation_at_currentScreen], sizeof(tetrominoShapes[randomNum][Rotation_at_currentScreen]));
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <Tetris_RotateBlock+0xf4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <Tetris_RotateBlock+0xe8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	008b      	lsls	r3, r1, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <Tetris_RotateBlock+0xf8>)
 8001be2:	4413      	add	r3, r2
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	4619      	mov	r1, r3
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <Tetris_RotateBlock+0xec>)
 8001bea:	f005 f836 	bl	8006c5a <memcpy>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200263b1 	.word	0x200263b1
 8001bfc:	200263b4 	.word	0x200263b4
 8001c00:	2002640c 	.word	0x2002640c
 8001c04:	2002644c 	.word	0x2002644c
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	20026220 	.word	0x20026220
 8001c10:	20026090 	.word	0x20026090

08001c14 <Tetris_MoveBlockDown>:


void Tetris_MoveBlockDown(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
	uint8_t prevYpos = Ypos;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <Tetris_MoveBlockDown+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
		Ypos +=1;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <Tetris_MoveBlockDown+0x44>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <Tetris_MoveBlockDown+0x44>)
 8001c2a:	701a      	strb	r2, [r3, #0]

		if (!Tetris_CheckCollision()){
 8001c2c:	f7ff ff24 	bl	8001a78 <Tetris_CheckCollision>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <Tetris_MoveBlockDown+0x30>
			Tetris_PlaceTetromino(Tetris_nextGrid);
 8001c3c:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <Tetris_MoveBlockDown+0x48>)
 8001c3e:	f7ff fed3 	bl	80019e8 <Tetris_PlaceTetromino>
		} else {
			Ypos = prevYpos;
			Tetris_PlaceTetromino(Tetris_gamecurrentScreen);
		}
}
 8001c42:	e005      	b.n	8001c50 <Tetris_MoveBlockDown+0x3c>
			Ypos = prevYpos;
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <Tetris_MoveBlockDown+0x44>)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	7013      	strb	r3, [r2, #0]
			Tetris_PlaceTetromino(Tetris_gamecurrentScreen);
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <Tetris_MoveBlockDown+0x4c>)
 8001c4c:	f7ff fecc 	bl	80019e8 <Tetris_PlaceTetromino>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200263b0 	.word	0x200263b0
 8001c5c:	20026220 	.word	0x20026220
 8001c60:	20026090 	.word	0x20026090

08001c64 <Tetris_PlayGame>:




void Tetris_PlayGame(void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

	Tetris_Init();
 8001c68:	f7ff fe8e 	bl	8001988 <Tetris_Init>

	timeFromStart = HAL_GetTick();
 8001c6c:	f001 fa00 	bl	8003070 <HAL_GetTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <Tetris_PlayGame+0x40>)
 8001c74:	6013      	str	r3, [r2, #0]
    Tetris_PlaceTetromino(Tetris_nextGrid);
 8001c76:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <Tetris_PlayGame+0x44>)
 8001c78:	f7ff feb6 	bl	80019e8 <Tetris_PlaceTetromino>

    Tetris_GameLoop();
 8001c7c:	f7ff fe10 	bl	80018a0 <Tetris_GameLoop>

    timeGameOver = HAL_GetTick();
 8001c80:	f001 f9f6 	bl	8003070 <HAL_GetTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <Tetris_PlayGame+0x48>)
 8001c88:	6013      	str	r3, [r2, #0]

    TimePlaying( timeGameOver, timeFromStart);
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <Tetris_PlayGame+0x48>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <Tetris_PlayGame+0x40>)
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe47 	bl	8001928 <TimePlaying>

    GameOverDemo(timePlayedtoDisplay);
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <Tetris_PlayGame+0x4c>)
 8001c9c:	f7ff fd30 	bl	8001700 <GameOverDemo>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20026400 	.word	0x20026400
 8001ca8:	20026220 	.word	0x20026220
 8001cac:	20026404 	.word	0x20026404
 8001cb0:	200263f4 	.word	0x200263f4

08001cb4 <Timer_GetElapsedSeconds>:
	HAL_TIM_Base_Start_IT(&htim7);
}


uint32_t Timer_GetElapsedSeconds(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return elapsedSeconds;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <Timer_GetElapsedSeconds+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20026450 	.word	0x20026450

08001ccc <TIM7_IRQHandler>:
void Timer_IncrementElapsedSeconds(void)
{
	elapsedSeconds++;
}

void TIM7_IRQHandler(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim7);
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <TIM7_IRQHandler+0x3c>)
 8001cd4:	f004 fa80 	bl	80061d8 <HAL_TIM_IRQHandler>

   // if (currentScreenState == SCREEN_GAME) {
        static uint32_t tick = 0;
        tick++;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <TIM7_IRQHandler+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <TIM7_IRQHandler+0x40>)
 8001ce0:	6013      	str	r3, [r2, #0]
        if (tick >= 3000) {
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <TIM7_IRQHandler+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d908      	bls.n	8001d00 <TIM7_IRQHandler+0x34>
            tick = 0;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <TIM7_IRQHandler+0x40>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
            uint32_t elapsed_Time = Timer_GetElapsedSeconds();
 8001cf4:	f7ff ffde 	bl	8001cb4 <Timer_GetElapsedSeconds>
 8001cf8:	6078      	str	r0, [r7, #4]
            elapsed_Time++;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
       // }
    }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20026454 	.word	0x20026454
 8001d0c:	2002649c 	.word	0x2002649c

08001d10 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d14:	f000 f9fe 	bl	8002114 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001d18:	20ca      	movs	r0, #202	@ 0xca
 8001d1a:	f000 f943 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001d1e:	20c3      	movs	r0, #195	@ 0xc3
 8001d20:	f000 f94d 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001d24:	2008      	movs	r0, #8
 8001d26:	f000 f94a 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001d2a:	2050      	movs	r0, #80	@ 0x50
 8001d2c:	f000 f947 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001d30:	20cf      	movs	r0, #207	@ 0xcf
 8001d32:	f000 f937 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f941 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001d3c:	20c1      	movs	r0, #193	@ 0xc1
 8001d3e:	f000 f93e 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001d42:	2030      	movs	r0, #48	@ 0x30
 8001d44:	f000 f93b 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001d48:	20ed      	movs	r0, #237	@ 0xed
 8001d4a:	f000 f92b 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001d4e:	2064      	movs	r0, #100	@ 0x64
 8001d50:	f000 f935 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 f932 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001d5a:	2012      	movs	r0, #18
 8001d5c:	f000 f92f 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001d60:	2081      	movs	r0, #129	@ 0x81
 8001d62:	f000 f92c 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001d66:	20e8      	movs	r0, #232	@ 0xe8
 8001d68:	f000 f91c 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001d6c:	2085      	movs	r0, #133	@ 0x85
 8001d6e:	f000 f926 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f923 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001d78:	2078      	movs	r0, #120	@ 0x78
 8001d7a:	f000 f920 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001d7e:	20cb      	movs	r0, #203	@ 0xcb
 8001d80:	f000 f910 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001d84:	2039      	movs	r0, #57	@ 0x39
 8001d86:	f000 f91a 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001d8a:	202c      	movs	r0, #44	@ 0x2c
 8001d8c:	f000 f917 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f000 f914 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001d96:	2034      	movs	r0, #52	@ 0x34
 8001d98:	f000 f911 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f000 f90e 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001da2:	20f7      	movs	r0, #247	@ 0xf7
 8001da4:	f000 f8fe 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001da8:	2020      	movs	r0, #32
 8001daa:	f000 f908 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001dae:	20ea      	movs	r0, #234	@ 0xea
 8001db0:	f000 f8f8 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f902 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f8ff 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001dc0:	20b1      	movs	r0, #177	@ 0xb1
 8001dc2:	f000 f8ef 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 f8f9 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001dcc:	201b      	movs	r0, #27
 8001dce:	f000 f8f6 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001dd2:	20b6      	movs	r0, #182	@ 0xb6
 8001dd4:	f000 f8e6 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f000 f8f0 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001dde:	20a2      	movs	r0, #162	@ 0xa2
 8001de0:	f000 f8ed 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001de4:	20c0      	movs	r0, #192	@ 0xc0
 8001de6:	f000 f8dd 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001dea:	2010      	movs	r0, #16
 8001dec:	f000 f8e7 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001df0:	20c1      	movs	r0, #193	@ 0xc1
 8001df2:	f000 f8d7 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001df6:	2010      	movs	r0, #16
 8001df8:	f000 f8e1 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001dfc:	20c5      	movs	r0, #197	@ 0xc5
 8001dfe:	f000 f8d1 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001e02:	2045      	movs	r0, #69	@ 0x45
 8001e04:	f000 f8db 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001e08:	2015      	movs	r0, #21
 8001e0a:	f000 f8d8 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001e0e:	20c7      	movs	r0, #199	@ 0xc7
 8001e10:	f000 f8c8 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001e14:	2090      	movs	r0, #144	@ 0x90
 8001e16:	f000 f8d2 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001e1a:	2036      	movs	r0, #54	@ 0x36
 8001e1c:	f000 f8c2 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001e20:	20c8      	movs	r0, #200	@ 0xc8
 8001e22:	f000 f8cc 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001e26:	20f2      	movs	r0, #242	@ 0xf2
 8001e28:	f000 f8bc 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f8c6 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001e32:	20b0      	movs	r0, #176	@ 0xb0
 8001e34:	f000 f8b6 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001e38:	20c2      	movs	r0, #194	@ 0xc2
 8001e3a:	f000 f8c0 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001e3e:	20b6      	movs	r0, #182	@ 0xb6
 8001e40:	f000 f8b0 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f000 f8ba 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001e4a:	20a7      	movs	r0, #167	@ 0xa7
 8001e4c:	f000 f8b7 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001e50:	2027      	movs	r0, #39	@ 0x27
 8001e52:	f000 f8b4 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001e56:	2004      	movs	r0, #4
 8001e58:	f000 f8b1 	bl	8001fbe <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001e5c:	202a      	movs	r0, #42	@ 0x2a
 8001e5e:	f000 f8a1 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f8ab 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 f8a8 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f8a5 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001e74:	20ef      	movs	r0, #239	@ 0xef
 8001e76:	f000 f8a2 	bl	8001fbe <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001e7a:	202b      	movs	r0, #43	@ 0x2b
 8001e7c:	f000 f892 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f000 f89c 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f899 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 f896 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001e92:	203f      	movs	r0, #63	@ 0x3f
 8001e94:	f000 f893 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001e98:	20f6      	movs	r0, #246	@ 0xf6
 8001e9a:	f000 f883 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 f88d 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 f88a 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f000 f887 	bl	8001fbe <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001eb0:	202c      	movs	r0, #44	@ 0x2c
 8001eb2:	f000 f877 	bl	8001fa4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001eb6:	20c8      	movs	r0, #200	@ 0xc8
 8001eb8:	f000 f9e8 	bl	800228c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001ebc:	2026      	movs	r0, #38	@ 0x26
 8001ebe:	f000 f871 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 f87b 	bl	8001fbe <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001ec8:	20e0      	movs	r0, #224	@ 0xe0
 8001eca:	f000 f86b 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f875 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001ed4:	2029      	movs	r0, #41	@ 0x29
 8001ed6:	f000 f872 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001eda:	2024      	movs	r0, #36	@ 0x24
 8001edc:	f000 f86f 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001ee0:	200c      	movs	r0, #12
 8001ee2:	f000 f86c 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001ee6:	200e      	movs	r0, #14
 8001ee8:	f000 f869 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001eec:	2009      	movs	r0, #9
 8001eee:	f000 f866 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001ef2:	204e      	movs	r0, #78	@ 0x4e
 8001ef4:	f000 f863 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ef8:	2078      	movs	r0, #120	@ 0x78
 8001efa:	f000 f860 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001efe:	203c      	movs	r0, #60	@ 0x3c
 8001f00:	f000 f85d 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001f04:	2009      	movs	r0, #9
 8001f06:	f000 f85a 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001f0a:	2013      	movs	r0, #19
 8001f0c:	f000 f857 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001f10:	2005      	movs	r0, #5
 8001f12:	f000 f854 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001f16:	2017      	movs	r0, #23
 8001f18:	f000 f851 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001f1c:	2011      	movs	r0, #17
 8001f1e:	f000 f84e 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f84b 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001f28:	20e1      	movs	r0, #225	@ 0xe1
 8001f2a:	f000 f83b 	bl	8001fa4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f845 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001f34:	2016      	movs	r0, #22
 8001f36:	f000 f842 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001f3a:	201b      	movs	r0, #27
 8001f3c:	f000 f83f 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f40:	2004      	movs	r0, #4
 8001f42:	f000 f83c 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001f46:	2011      	movs	r0, #17
 8001f48:	f000 f839 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001f4c:	2007      	movs	r0, #7
 8001f4e:	f000 f836 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001f52:	2031      	movs	r0, #49	@ 0x31
 8001f54:	f000 f833 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001f58:	2033      	movs	r0, #51	@ 0x33
 8001f5a:	f000 f830 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001f5e:	2042      	movs	r0, #66	@ 0x42
 8001f60:	f000 f82d 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001f64:	2005      	movs	r0, #5
 8001f66:	f000 f82a 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001f6a:	200c      	movs	r0, #12
 8001f6c:	f000 f827 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001f70:	200a      	movs	r0, #10
 8001f72:	f000 f824 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001f76:	2028      	movs	r0, #40	@ 0x28
 8001f78:	f000 f821 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001f7c:	202f      	movs	r0, #47	@ 0x2f
 8001f7e:	f000 f81e 	bl	8001fbe <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f000 f81b 	bl	8001fbe <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001f88:	2011      	movs	r0, #17
 8001f8a:	f000 f80b 	bl	8001fa4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f8e:	20c8      	movs	r0, #200	@ 0xc8
 8001f90:	f000 f97c 	bl	800228c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001f94:	2029      	movs	r0, #41	@ 0x29
 8001f96:	f000 f805 	bl	8001fa4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001f9a:	202c      	movs	r0, #44	@ 0x2c
 8001f9c:	f000 f802 	bl	8001fa4 <ili9341_Write_Reg>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f949 	bl	8002248 <LCD_IO_WriteReg>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f91a 	bl	8002204 <LCD_IO_WriteData>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001fdc:	4819      	ldr	r0, [pc, #100]	@ (8002044 <SPI_Init+0x6c>)
 8001fde:	f004 f810 	bl	8006002 <HAL_SPI_GetState>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12b      	bne.n	8002040 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <SPI_Init+0x6c>)
 8001fea:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <SPI_Init+0x70>)
 8001fec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <SPI_Init+0x6c>)
 8001ff0:	2218      	movs	r2, #24
 8001ff2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <SPI_Init+0x6c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <SPI_Init+0x6c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002000:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <SPI_Init+0x6c>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <SPI_Init+0x6c>)
 8002008:	2200      	movs	r2, #0
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <SPI_Init+0x6c>)
 800200e:	2207      	movs	r2, #7
 8002010:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <SPI_Init+0x6c>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002018:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <SPI_Init+0x6c>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <SPI_Init+0x6c>)
 8002020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002024:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <SPI_Init+0x6c>)
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SPI_Init+0x6c>)
 800202e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002032:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002034:	4803      	ldr	r0, [pc, #12]	@ (8002044 <SPI_Init+0x6c>)
 8002036:	f000 f833 	bl	80020a0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800203a:	4802      	ldr	r0, [pc, #8]	@ (8002044 <SPI_Init+0x6c>)
 800203c:	f003 fdec 	bl	8005c18 <HAL_SPI_Init>
  }
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200264a0 	.word	0x200264a0
 8002048:	40015000 	.word	0x40015000

0800204c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <SPI_Write+0x34>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1db9      	adds	r1, r7, #6
 8002060:	2201      	movs	r2, #1
 8002062:	4808      	ldr	r0, [pc, #32]	@ (8002084 <SPI_Write+0x38>)
 8002064:	f003 fe89 	bl	8005d7a <HAL_SPI_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002072:	f000 f809 	bl	8002088 <SPI_Error>
  }
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000070c 	.word	0x2000070c
 8002084:	200264a0 	.word	0x200264a0

08002088 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800208c:	4803      	ldr	r0, [pc, #12]	@ (800209c <SPI_Error+0x14>)
 800208e:	f003 fe4c 	bl	8005d2a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002092:	f7ff ffa1 	bl	8001fd8 <SPI_Init>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200264a0 	.word	0x200264a0

080020a0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	@ 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <SPI_MspInit+0x6c>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	4a16      	ldr	r2, [pc, #88]	@ (800210c <SPI_MspInit+0x6c>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <SPI_MspInit+0x6c>)
 80020ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	4b10      	ldr	r3, [pc, #64]	@ (800210c <SPI_MspInit+0x6c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <SPI_MspInit+0x6c>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <SPI_MspInit+0x6c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80020e0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020ee:	2301      	movs	r3, #1
 80020f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80020f2:	2305      	movs	r3, #5
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <SPI_MspInit+0x70>)
 80020fe:	f001 f92b 	bl	8003358 <HAL_GPIO_Init>
}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	@ 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40021400 	.word	0x40021400

08002114 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800211a:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <LCD_IO_Init+0xe0>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d164      	bne.n	80021ec <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <LCD_IO_Init+0xe0>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <LCD_IO_Init+0xe4>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4a31      	ldr	r2, [pc, #196]	@ (80021f8 <LCD_IO_Init+0xe4>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6313      	str	r3, [r2, #48]	@ 0x30
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <LCD_IO_Init+0xe4>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002148:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4827      	ldr	r0, [pc, #156]	@ (80021fc <LCD_IO_Init+0xe8>)
 800215e:	f001 f8fb 	bl	8003358 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <LCD_IO_Init+0xe4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <LCD_IO_Init+0xe4>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <LCD_IO_Init+0xe4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800217e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4619      	mov	r1, r3
 8002196:	4819      	ldr	r0, [pc, #100]	@ (80021fc <LCD_IO_Init+0xe8>)
 8002198:	f001 f8de 	bl	8003358 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <LCD_IO_Init+0xe4>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <LCD_IO_Init+0xe4>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <LCD_IO_Init+0xe4>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80021b8:	2304      	movs	r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	480c      	ldr	r0, [pc, #48]	@ (8002200 <LCD_IO_Init+0xec>)
 80021d0:	f001 f8c2 	bl	8003358 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80021d4:	2200      	movs	r2, #0
 80021d6:	2104      	movs	r1, #4
 80021d8:	4809      	ldr	r0, [pc, #36]	@ (8002200 <LCD_IO_Init+0xec>)
 80021da:	f001 fb75 	bl	80038c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80021de:	2201      	movs	r2, #1
 80021e0:	2104      	movs	r1, #4
 80021e2:	4807      	ldr	r0, [pc, #28]	@ (8002200 <LCD_IO_Init+0xec>)
 80021e4:	f001 fb70 	bl	80038c8 <HAL_GPIO_WritePin>

    SPI_Init();
 80021e8:	f7ff fef6 	bl	8001fd8 <SPI_Init>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200264f8 	.word	0x200264f8
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40020800 	.word	0x40020800

08002204 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800220e:	2201      	movs	r2, #1
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	480a      	ldr	r0, [pc, #40]	@ (8002240 <LCD_IO_WriteData+0x3c>)
 8002216:	f001 fb57 	bl	80038c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800221a:	2200      	movs	r2, #0
 800221c:	2104      	movs	r1, #4
 800221e:	4809      	ldr	r0, [pc, #36]	@ (8002244 <LCD_IO_WriteData+0x40>)
 8002220:	f001 fb52 	bl	80038c8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff10 	bl	800204c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800222c:	2201      	movs	r2, #1
 800222e:	2104      	movs	r1, #4
 8002230:	4804      	ldr	r0, [pc, #16]	@ (8002244 <LCD_IO_WriteData+0x40>)
 8002232:	f001 fb49 	bl	80038c8 <HAL_GPIO_WritePin>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40020800 	.word	0x40020800

08002248 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <LCD_IO_WriteReg+0x3c>)
 800225a:	f001 fb35 	bl	80038c8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800225e:	2200      	movs	r2, #0
 8002260:	2104      	movs	r1, #4
 8002262:	4809      	ldr	r0, [pc, #36]	@ (8002288 <LCD_IO_WriteReg+0x40>)
 8002264:	f001 fb30 	bl	80038c8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	b29b      	uxth	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff feed 	bl	800204c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002272:	2201      	movs	r2, #1
 8002274:	2104      	movs	r1, #4
 8002276:	4804      	ldr	r0, [pc, #16]	@ (8002288 <LCD_IO_WriteReg+0x40>)
 8002278:	f001 fb26 	bl	80038c8 <HAL_GPIO_WritePin>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40020c00 	.word	0x40020c00
 8002288:	40020800 	.word	0x40020800

0800228c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fef7 	bl	8003088 <HAL_Delay>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a6:	f000 fe7d 	bl	8002fa4 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 80022aa:	f000 f809 	bl	80022c0 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80022ae:	f7fe f96f 	bl	8000590 <ApplicationInit>


  //LCD_Visual_Demo();

  HAL_Delay(5000);
 80022b2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80022b6:	f000 fee7 	bl	8003088 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 80022ba:	bf00      	nop
 80022bc:	e7fd      	b.n	80022ba <main+0x18>
	...

080022c0 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b092      	sub	sp, #72	@ 0x48
 80022c4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <SystemClockOverride+0x7c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a1b      	ldr	r2, [pc, #108]	@ (800233c <SystemClockOverride+0x7c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <SystemClockOverride+0x7c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022ea:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022f6:	2308      	movs	r3, #8
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022fa:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002300:	2302      	movs	r3, #2
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002304:	2307      	movs	r3, #7
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fdc0 	bl	8004e90 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002310:	230f      	movs	r3, #15
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002314:	2302      	movs	r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800231c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002320:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002326:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002328:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800232c:	2105      	movs	r1, #5
 800232e:	4618      	mov	r0, r3
 8002330:	f003 f826 	bl	8005380 <HAL_RCC_ClockConfig>
}
 8002334:	bf00      	nop
 8002336:	3748      	adds	r7, #72	@ 0x48
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800

08002340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002344:	b672      	cpsid	i
}
 8002346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <Error_Handler+0x8>

0800234c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_MspInit+0x4c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a0f      	ldr	r2, [pc, #60]	@ (8002398 <HAL_MspInit+0x4c>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_MspInit+0x4c>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_MspInit+0x4c>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800238a:	2007      	movs	r0, #7
 800238c:	f000 ff94 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a29      	ldr	r2, [pc, #164]	@ (8002460 <HAL_I2C_MspInit+0xc4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d14b      	bne.n	8002456 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ce:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a20      	ldr	r2, [pc, #128]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023fc:	2312      	movs	r3, #18
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002408:	2304      	movs	r3, #4
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4815      	ldr	r0, [pc, #84]	@ (8002468 <HAL_I2C_MspInit+0xcc>)
 8002414:	f000 ffa0 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	2312      	movs	r3, #18
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800242a:	2304      	movs	r3, #4
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	480d      	ldr	r0, [pc, #52]	@ (800246c <HAL_I2C_MspInit+0xd0>)
 8002436:	f000 ff8f 	bl	8003358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 8002444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_I2C_MspInit+0xc8>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002456:	bf00      	nop
 8002458:	3728      	adds	r7, #40	@ 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005c00 	.word	0x40005c00
 8002464:	40023800 	.word	0x40023800
 8002468:	40020800 	.word	0x40020800
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b09a      	sub	sp, #104	@ 0x68
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248c:	2230      	movs	r2, #48	@ 0x30
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fb66 	bl	8006b62 <memset>
  if(hltdc->Instance==LTDC)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a81      	ldr	r2, [pc, #516]	@ (80026a0 <HAL_LTDC_MspInit+0x230>)
 800249c:	4293      	cmp	r3, r2
 800249e:	f040 80fa 	bne.w	8002696 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024a2:	2308      	movs	r3, #8
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024a6:	2332      	movs	r3, #50	@ 0x32
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024ae:	2300      	movs	r3, #0
 80024b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f96e 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80024c2:	f7ff ff3d 	bl	8002340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d6:	4b73      	ldr	r3, [pc, #460]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a6e      	ldr	r2, [pc, #440]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	4b68      	ldr	r3, [pc, #416]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a67      	ldr	r2, [pc, #412]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a60      	ldr	r2, [pc, #384]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b5a      	ldr	r3, [pc, #360]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a59      	ldr	r2, [pc, #356]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b57      	ldr	r3, [pc, #348]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b50      	ldr	r3, [pc, #320]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a4b      	ldr	r2, [pc, #300]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <HAL_LTDC_MspInit+0x234>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800258a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800258e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800259c:	230e      	movs	r3, #14
 800259e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a4:	4619      	mov	r1, r3
 80025a6:	4840      	ldr	r0, [pc, #256]	@ (80026a8 <HAL_LTDC_MspInit+0x238>)
 80025a8:	f000 fed6 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025ac:	f641 0358 	movw	r3, #6232	@ 0x1858
 80025b0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025be:	230e      	movs	r3, #14
 80025c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025c6:	4619      	mov	r1, r3
 80025c8:	4838      	ldr	r0, [pc, #224]	@ (80026ac <HAL_LTDC_MspInit+0x23c>)
 80025ca:	f000 fec5 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80025ce:	2303      	movs	r3, #3
 80025d0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025de:	2309      	movs	r3, #9
 80025e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025e6:	4619      	mov	r1, r3
 80025e8:	4831      	ldr	r0, [pc, #196]	@ (80026b0 <HAL_LTDC_MspInit+0x240>)
 80025ea:	f000 feb5 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80025ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002600:	230e      	movs	r3, #14
 8002602:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002608:	4619      	mov	r1, r3
 800260a:	4829      	ldr	r0, [pc, #164]	@ (80026b0 <HAL_LTDC_MspInit+0x240>)
 800260c:	f000 fea4 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002610:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002614:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002622:	230e      	movs	r3, #14
 8002624:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002626:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800262a:	4619      	mov	r1, r3
 800262c:	4821      	ldr	r0, [pc, #132]	@ (80026b4 <HAL_LTDC_MspInit+0x244>)
 800262e:	f000 fe93 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002632:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002636:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002644:	230e      	movs	r3, #14
 8002646:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800264c:	4619      	mov	r1, r3
 800264e:	481a      	ldr	r0, [pc, #104]	@ (80026b8 <HAL_LTDC_MspInit+0x248>)
 8002650:	f000 fe82 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002654:	2348      	movs	r3, #72	@ 0x48
 8002656:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002664:	230e      	movs	r3, #14
 8002666:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800266c:	4619      	mov	r1, r3
 800266e:	4813      	ldr	r0, [pc, #76]	@ (80026bc <HAL_LTDC_MspInit+0x24c>)
 8002670:	f000 fe72 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002678:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002686:	2309      	movs	r3, #9
 8002688:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800268a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800268e:	4619      	mov	r1, r3
 8002690:	4808      	ldr	r0, [pc, #32]	@ (80026b4 <HAL_LTDC_MspInit+0x244>)
 8002692:	f000 fe61 	bl	8003358 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002696:	bf00      	nop
 8002698:	3768      	adds	r7, #104	@ 0x68
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40016800 	.word	0x40016800
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40021800 	.word	0x40021800
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00

080026c0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0b      	ldr	r2, [pc, #44]	@ (80026fc <HAL_RNG_MspInit+0x3c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10d      	bne.n	80026ee <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RNG_MspInit+0x40>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026da:	4a09      	ldr	r2, [pc, #36]	@ (8002700 <HAL_RNG_MspInit+0x40>)
 80026dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e0:	6353      	str	r3, [r2, #52]	@ 0x34
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <HAL_RNG_MspInit+0x40>)
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	50060800 	.word	0x50060800
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_SPI_MspInit+0x84>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d12c      	bne.n	8002780 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_SPI_MspInit+0x88>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_SPI_MspInit+0x88>)
 8002730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_SPI_MspInit+0x88>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_SPI_MspInit+0x88>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	4a10      	ldr	r2, [pc, #64]	@ (800278c <HAL_SPI_MspInit+0x88>)
 800274c:	f043 0320 	orr.w	r3, r3, #32
 8002750:	6313      	str	r3, [r2, #48]	@ 0x30
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_SPI_MspInit+0x88>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800275e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002770:	2305      	movs	r3, #5
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <HAL_SPI_MspInit+0x8c>)
 800277c:	f000 fdec 	bl	8003358 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	@ 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40015000 	.word	0x40015000
 800278c:	40023800 	.word	0x40023800
 8002790:	40021400 	.word	0x40021400

08002794 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <HAL_SPI_MspDeInit+0x30>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10a      	bne.n	80027bc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_SPI_MspDeInit+0x34>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <HAL_SPI_MspDeInit+0x34>)
 80027ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027b0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80027b2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <HAL_SPI_MspDeInit+0x38>)
 80027b8:	f000 ff7a 	bl	80036b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40015000 	.word	0x40015000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40021400 	.word	0x40021400

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <NMI_Handler+0x4>

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <MemManage_Handler+0x4>

080027e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002826:	f000 fc0f 	bl	8003048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}

0800282e <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002834:	f000 f9ce 	bl	8002bd4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002838:	f000 f98e 	bl	8002b58 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800283c:	2202      	movs	r2, #2
 800283e:	2103      	movs	r1, #3
 8002840:	2082      	movs	r0, #130	@ 0x82
 8002842:	f000 fa1b 	bl	8002c7c <I2C3_Write>
    HAL_Delay(5);
 8002846:	2005      	movs	r0, #5
 8002848:	f000 fc1e 	bl	8003088 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800284c:	2200      	movs	r2, #0
 800284e:	2103      	movs	r1, #3
 8002850:	2082      	movs	r0, #130	@ 0x82
 8002852:	f000 fa13 	bl	8002c7c <I2C3_Write>
    HAL_Delay(2);
 8002856:	2002      	movs	r0, #2
 8002858:	f000 fc16 	bl	8003088 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800285c:	1cba      	adds	r2, r7, #2
 800285e:	2302      	movs	r3, #2
 8002860:	2100      	movs	r1, #0
 8002862:	2082      	movs	r0, #130	@ 0x82
 8002864:	f000 fa5a 	bl	8002d1c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b29a      	uxth	r2, r3
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	4313      	orrs	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002880:	4293      	cmp	r3, r2
 8002882:	d001      	beq.n	8002888 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002884:	2303      	movs	r3, #3
 8002886:	e075      	b.n	8002974 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002888:	2202      	movs	r2, #2
 800288a:	2103      	movs	r1, #3
 800288c:	2082      	movs	r0, #130	@ 0x82
 800288e:	f000 f9f5 	bl	8002c7c <I2C3_Write>
    HAL_Delay(5);
 8002892:	2005      	movs	r0, #5
 8002894:	f000 fbf8 	bl	8003088 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002898:	2200      	movs	r2, #0
 800289a:	2103      	movs	r1, #3
 800289c:	2082      	movs	r0, #130	@ 0x82
 800289e:	f000 f9ed 	bl	8002c7c <I2C3_Write>
    HAL_Delay(2);
 80028a2:	2002      	movs	r0, #2
 80028a4:	f000 fbf0 	bl	8003088 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80028a8:	2004      	movs	r0, #4
 80028aa:	f000 f867 	bl	800297c <STMPE811_Read>
 80028ae:	4603      	mov	r3, r0
 80028b0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80028b2:	797b      	ldrb	r3, [r7, #5]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80028ba:	797b      	ldrb	r3, [r7, #5]
 80028bc:	461a      	mov	r2, r3
 80028be:	2104      	movs	r1, #4
 80028c0:	2082      	movs	r0, #130	@ 0x82
 80028c2:	f000 f9db 	bl	8002c7c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80028c6:	2004      	movs	r0, #4
 80028c8:	f000 f858 	bl	800297c <STMPE811_Read>
 80028cc:	4603      	mov	r3, r0
 80028ce:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80028d0:	797b      	ldrb	r3, [r7, #5]
 80028d2:	f023 0302 	bic.w	r3, r3, #2
 80028d6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80028d8:	797b      	ldrb	r3, [r7, #5]
 80028da:	461a      	mov	r2, r3
 80028dc:	2104      	movs	r1, #4
 80028de:	2082      	movs	r0, #130	@ 0x82
 80028e0:	f000 f9cc 	bl	8002c7c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80028e4:	2249      	movs	r2, #73	@ 0x49
 80028e6:	2120      	movs	r1, #32
 80028e8:	2082      	movs	r0, #130	@ 0x82
 80028ea:	f000 f9c7 	bl	8002c7c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80028ee:	2002      	movs	r0, #2
 80028f0:	f000 fbca 	bl	8003088 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80028f4:	2201      	movs	r2, #1
 80028f6:	2121      	movs	r1, #33	@ 0x21
 80028f8:	2082      	movs	r0, #130	@ 0x82
 80028fa:	f000 f9bf 	bl	8002c7c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80028fe:	2017      	movs	r0, #23
 8002900:	f000 f83c 	bl	800297c <STMPE811_Read>
 8002904:	4603      	mov	r3, r0
 8002906:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002908:	797b      	ldrb	r3, [r7, #5]
 800290a:	f043 031e 	orr.w	r3, r3, #30
 800290e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002910:	797b      	ldrb	r3, [r7, #5]
 8002912:	461a      	mov	r2, r3
 8002914:	2117      	movs	r1, #23
 8002916:	2082      	movs	r0, #130	@ 0x82
 8002918:	f000 f9b0 	bl	8002c7c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800291c:	229a      	movs	r2, #154	@ 0x9a
 800291e:	2141      	movs	r1, #65	@ 0x41
 8002920:	2082      	movs	r0, #130	@ 0x82
 8002922:	f000 f9ab 	bl	8002c7c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002926:	2201      	movs	r2, #1
 8002928:	214a      	movs	r1, #74	@ 0x4a
 800292a:	2082      	movs	r0, #130	@ 0x82
 800292c:	f000 f9a6 	bl	8002c7c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002930:	2201      	movs	r2, #1
 8002932:	214b      	movs	r1, #75	@ 0x4b
 8002934:	2082      	movs	r0, #130	@ 0x82
 8002936:	f000 f9a1 	bl	8002c7c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800293a:	2200      	movs	r2, #0
 800293c:	214b      	movs	r1, #75	@ 0x4b
 800293e:	2082      	movs	r0, #130	@ 0x82
 8002940:	f000 f99c 	bl	8002c7c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002944:	2201      	movs	r2, #1
 8002946:	2156      	movs	r1, #86	@ 0x56
 8002948:	2082      	movs	r0, #130	@ 0x82
 800294a:	f000 f997 	bl	8002c7c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800294e:	2201      	movs	r2, #1
 8002950:	2158      	movs	r1, #88	@ 0x58
 8002952:	2082      	movs	r0, #130	@ 0x82
 8002954:	f000 f992 	bl	8002c7c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002958:	2203      	movs	r2, #3
 800295a:	2140      	movs	r1, #64	@ 0x40
 800295c:	2082      	movs	r0, #130	@ 0x82
 800295e:	f000 f98d 	bl	8002c7c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002962:	22ff      	movs	r2, #255	@ 0xff
 8002964:	210b      	movs	r1, #11
 8002966:	2082      	movs	r0, #130	@ 0x82
 8002968:	f000 f988 	bl	8002c7c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800296c:	20c8      	movs	r0, #200	@ 0xc8
 800296e:	f000 fb8b 	bl	8003088 <HAL_Delay>

    return STMPE811_State_Ok;
 8002972:	2302      	movs	r3, #2

}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002986:	f107 020f 	add.w	r2, r7, #15
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4619      	mov	r1, r3
 800298e:	2082      	movs	r0, #130	@ 0x82
 8002990:	f000 f99e 	bl	8002cd0 <I2C3_Read>

    return readData;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	791a      	ldrb	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80029ae:	2040      	movs	r0, #64	@ 0x40
 80029b0:	f7ff ffe4 	bl	800297c <STMPE811_Read>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0e      	blt.n	80029de <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80029c6:	2201      	movs	r2, #1
 80029c8:	214b      	movs	r1, #75	@ 0x4b
 80029ca:	2082      	movs	r0, #130	@ 0x82
 80029cc:	f000 f956 	bl	8002c7c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80029d0:	2200      	movs	r2, #0
 80029d2:	214b      	movs	r1, #75	@ 0x4b
 80029d4:	2082      	movs	r0, #130	@ 0x82
 80029d6:	f000 f951 	bl	8002c7c <I2C3_Write>

        return STMPE811_State_Released;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0a7      	b.n	8002b2e <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	799b      	ldrb	r3, [r3, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d117      	bne.n	8002a16 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9b8 	bl	8002d60 <TM_STMPE811_ReadX>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	885b      	ldrh	r3, [r3, #2]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fa0b 	bl	8002e1c <TM_STMPE811_ReadY>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	805a      	strh	r2, [r3, #2]
 8002a14:	e048      	b.n	8002aa8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	799b      	ldrb	r3, [r3, #6]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d112      	bne.n	8002a44 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f99c 	bl	8002d60 <TM_STMPE811_ReadX>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	885b      	ldrh	r3, [r3, #2]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f9f1 	bl	8002e1c <TM_STMPE811_ReadY>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	805a      	strh	r2, [r3, #2]
 8002a42:	e031      	b.n	8002aa8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	799b      	ldrb	r3, [r3, #6]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d115      	bne.n	8002a78 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f985 	bl	8002d60 <TM_STMPE811_ReadX>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f9da 	bl	8002e1c <TM_STMPE811_ReadY>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	e017      	b.n	8002aa8 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	799b      	ldrb	r3, [r3, #6]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d113      	bne.n	8002aa8 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f96b 	bl	8002d60 <TM_STMPE811_ReadX>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f9be 	bl	8002e1c <TM_STMPE811_ReadY>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	214b      	movs	r1, #75	@ 0x4b
 8002aac:	2082      	movs	r0, #130	@ 0x82
 8002aae:	f000 f8e5 	bl	8002c7c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	214b      	movs	r1, #75	@ 0x4b
 8002ab6:	2082      	movs	r0, #130	@ 0x82
 8002ab8:	f000 f8e0 	bl	8002c7c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	799b      	ldrb	r3, [r3, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <STMPE811_ReadTouch+0x12e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	799b      	ldrb	r3, [r3, #6]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d115      	bne.n	8002af8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d027      	beq.n	8002b24 <STMPE811_ReadTouch+0x186>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	2bee      	cmp	r3, #238	@ 0xee
 8002ada:	d823      	bhi.n	8002b24 <STMPE811_ReadTouch+0x186>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	885b      	ldrh	r3, [r3, #2]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <STMPE811_ReadTouch+0x186>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	885b      	ldrh	r3, [r3, #2]
 8002ae8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002aec:	d81a      	bhi.n	8002b24 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e01a      	b.n	8002b2e <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <STMPE811_ReadTouch+0x188>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002b08:	d80d      	bhi.n	8002b26 <STMPE811_ReadTouch+0x188>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	885b      	ldrh	r3, [r3, #2]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <STMPE811_ReadTouch+0x188>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	885b      	ldrh	r3, [r3, #2]
 8002b16:	2bee      	cmp	r3, #238	@ 0xee
 8002b18:	d805      	bhi.n	8002b26 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e004      	b.n	8002b2e <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002b24:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20026550 	.word	0x20026550

08002b58 <I2C3_Init>:

static void I2C3_Init()
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <I2C3_Init+0x6c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a17      	ldr	r2, [pc, #92]	@ (8002bc4 <I2C3_Init+0x6c>)
 8002b68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <I2C3_Init+0x6c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b7c:	4a13      	ldr	r2, [pc, #76]	@ (8002bcc <I2C3_Init+0x74>)
 8002b7e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b82:	4a13      	ldr	r2, [pc, #76]	@ (8002bd0 <I2C3_Init+0x78>)
 8002b84:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b98:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <I2C3_Init+0x70>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ba0:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <I2C3_Init+0x70>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002ba6:	4808      	ldr	r0, [pc, #32]	@ (8002bc8 <I2C3_Init+0x70>)
 8002ba8:	f000 fea8 	bl	80038fc <HAL_I2C_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <I2C3_Init+0x5e>
    }
    return;
 8002bba:	bf00      	nop
}
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	200264fc 	.word	0x200264fc
 8002bcc:	40005c00 	.word	0x40005c00
 8002bd0:	000186a0 	.word	0x000186a0

08002bd4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <I2C3_MspInit+0x9c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c28:	2312      	movs	r3, #18
 8002c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c34:	2304      	movs	r3, #4
 8002c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <I2C3_MspInit+0xa0>)
 8002c40:	f000 fb8a 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4a:	2312      	movs	r3, #18
 8002c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c56:	2304      	movs	r3, #4
 8002c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <I2C3_MspInit+0xa4>)
 8002c62:	f000 fb79 	bl	8003358 <HAL_GPIO_Init>
    
}
 8002c66:	bf00      	nop
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020000 	.word	0x40020000

08002c7c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af04      	add	r7, sp, #16
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
 8002c86:	460b      	mov	r3, r1
 8002c88:	717b      	strb	r3, [r7, #5]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002c8e:	793b      	ldrb	r3, [r7, #4]
 8002c90:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002c92:	797b      	ldrb	r3, [r7, #5]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	88f9      	ldrh	r1, [r7, #6]
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <I2C3_Write+0x48>)
 8002c9a:	9302      	str	r3, [sp, #8]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	f107 030f 	add.w	r3, r7, #15
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4807      	ldr	r0, [pc, #28]	@ (8002cc8 <I2C3_Write+0x4c>)
 8002caa:	f000 ff6b 	bl	8003b84 <HAL_I2C_Mem_Write>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <I2C3_Write+0x50>)
 8002cb4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002cb6:	f7ff ff3f 	bl	8002b38 <verifyHAL_I2C_IS_OKAY>
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0003d090 	.word	0x0003d090
 8002cc8:	200264fc 	.word	0x200264fc
 8002ccc:	20026550 	.word	0x20026550

08002cd0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af04      	add	r7, sp, #16
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	603a      	str	r2, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <I2C3_Read+0x40>)
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2301      	movs	r3, #1
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <I2C3_Read+0x44>)
 8002cf8:	f001 f83e 	bl	8003d78 <HAL_I2C_Mem_Read>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <I2C3_Read+0x48>)
 8002d02:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d04:	f7ff ff18 	bl	8002b38 <verifyHAL_I2C_IS_OKAY>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	0003d090 	.word	0x0003d090
 8002d14:	200264fc 	.word	0x200264fc
 8002d18:	20026550 	.word	0x20026550

08002d1c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af04      	add	r7, sp, #16
 8002d22:	603a      	str	r2, [r7, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	71bb      	strb	r3, [r7, #6]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	b299      	uxth	r1, r3
 8002d36:	79bb      	ldrb	r3, [r7, #6]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <I2C3_MulitByteRead+0x3c>)
 8002d3c:	9302      	str	r3, [sp, #8]
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2301      	movs	r3, #1
 8002d48:	4804      	ldr	r0, [pc, #16]	@ (8002d5c <I2C3_MulitByteRead+0x40>)
 8002d4a:	f001 f815 	bl	8003d78 <HAL_I2C_Mem_Read>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	0003d090 	.word	0x0003d090
 8002d5c:	200264fc 	.word	0x200264fc

08002d60 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002d6a:	204d      	movs	r0, #77	@ 0x4d
 8002d6c:	f7ff fe06 	bl	800297c <STMPE811_Read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002d74:	204e      	movs	r0, #78	@ 0x4e
 8002d76:	f7ff fe01 	bl	800297c <STMPE811_Read>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002d7e:	7a7b      	ldrb	r3, [r7, #9]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	7a3b      	ldrb	r3, [r7, #8]
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002d8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d90:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002d94:	4293      	cmp	r3, r2
 8002d96:	dc06      	bgt.n	8002da6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002d98:	89fb      	ldrh	r3, [r7, #14]
 8002d9a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002d9e:	330c      	adds	r3, #12
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	81fb      	strh	r3, [r7, #14]
 8002da4:	e005      	b.n	8002db2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002dac:	3308      	adds	r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <TM_STMPE811_ReadX+0xb8>)
 8002db8:	fb82 1203 	smull	r1, r2, r2, r3
 8002dbc:	441a      	add	r2, r3
 8002dbe:	10d2      	asrs	r2, r2, #3
 8002dc0:	17db      	asrs	r3, r3, #31
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dca:	2bef      	cmp	r3, #239	@ 0xef
 8002dcc:	dd02      	ble.n	8002dd4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002dce:	23ef      	movs	r3, #239	@ 0xef
 8002dd0:	81fb      	strh	r3, [r7, #14]
 8002dd2:	e005      	b.n	8002de0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da01      	bge.n	8002de0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002de0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dd05      	ble.n	8002df6 <TM_STMPE811_ReadX+0x96>
 8002dea:	89fa      	ldrh	r2, [r7, #14]
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	e004      	b.n	8002e00 <TM_STMPE811_ReadX+0xa0>
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002e02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	dd01      	ble.n	8002e0e <TM_STMPE811_ReadX+0xae>
        return val;
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	e000      	b.n	8002e10 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	88888889 	.word	0x88888889

08002e1c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002e26:	204f      	movs	r0, #79	@ 0x4f
 8002e28:	f7ff fda8 	bl	800297c <STMPE811_Read>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002e30:	2050      	movs	r0, #80	@ 0x50
 8002e32:	f7ff fda3 	bl	800297c <STMPE811_Read>
 8002e36:	4603      	mov	r3, r0
 8002e38:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002e3a:	7a7b      	ldrb	r3, [r7, #9]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	7a3b      	ldrb	r3, [r7, #8]
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e56:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <TM_STMPE811_ReadY+0xa0>)
 8002e58:	fb82 1203 	smull	r1, r2, r2, r3
 8002e5c:	1052      	asrs	r2, r2, #1
 8002e5e:	17db      	asrs	r3, r3, #31
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dc02      	bgt.n	8002e72 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	81fb      	strh	r3, [r7, #14]
 8002e70:	e007      	b.n	8002e82 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e76:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e7a:	db02      	blt.n	8002e82 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002e7c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002e80:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002e82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	dd05      	ble.n	8002e98 <TM_STMPE811_ReadY+0x7c>
 8002e8c:	89fa      	ldrh	r2, [r7, #14]
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	e004      	b.n	8002ea2 <TM_STMPE811_ReadY+0x86>
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002ea4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	dd01      	ble.n	8002eb0 <TM_STMPE811_ReadY+0x94>
        return val;
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	e000      	b.n	8002eb2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2e8ba2e9 	.word	0x2e8ba2e9

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f003 fe86 	bl	8006c00 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20030000 	.word	0x20030000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	20026554 	.word	0x20026554
 8002f28:	20026758 	.word	0x20026758

08002f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <SystemInit+0x20>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <SystemInit+0x20>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f54:	f7ff ffea 	bl	8002f2c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f003 fe45 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7ff f98e 	bl	80022a2 <main>
  bx  lr    
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f90:	20000780 	.word	0x20000780
  ldr r2, =_sidata
 8002f94:	080088b0 	.word	0x080088b0
  ldr r2, =_sbss
 8002f98:	20000780 	.word	0x20000780
  ldr r4, =_ebss
 8002f9c:	20026754 	.word	0x20026754

08002fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC_IRQHandler>
	...

08002fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe4 <HAL_Init+0x40>)
 8002fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_Init+0x40>)
 8002fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a07      	ldr	r2, [pc, #28]	@ (8002fe4 <HAL_Init+0x40>)
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f000 f973 	bl	80032b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 f808 	bl	8002fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd8:	f7ff f9b8 	bl	800234c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023c00 	.word	0x40023c00

08002fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_InitTick+0x54>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_InitTick+0x58>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f999 	bl	800333e <HAL_SYSTICK_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00e      	b.n	8003034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b0f      	cmp	r3, #15
 800301a:	d80a      	bhi.n	8003032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800301c:	2200      	movs	r2, #0
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f000 f953 	bl	80032ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003028:	4a06      	ldr	r2, [pc, #24]	@ (8003044 <HAL_InitTick+0x5c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000710 	.word	0x20000710
 8003040:	20000718 	.word	0x20000718
 8003044:	20000714 	.word	0x20000714

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000718 	.word	0x20000718
 800306c:	20026558 	.word	0x20026558

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	@ (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20026558 	.word	0x20026558

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff ffee 	bl	8003070 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffde 	bl	8003070 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000718 	.word	0x20000718

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	@ (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db12      	blt.n	80031a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	490a      	ldr	r1, [pc, #40]	@ (80031b4 <__NVIC_DisableIRQ+0x44>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	3320      	adds	r3, #32
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800319c:	f3bf 8f4f 	dsb	sy
}
 80031a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031a2:	f3bf 8f6f 	isb	sy
}
 80031a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	@ (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	@ (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	@ 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003284:	d301      	bcc.n	800328a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <SysTick_Config+0x40>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003292:	210f      	movs	r1, #15
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f7ff ff8e 	bl	80031b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800329c:	4b05      	ldr	r3, [pc, #20]	@ (80032b4 <SysTick_Config+0x40>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a2:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <SysTick_Config+0x40>)
 80032a4:	2207      	movs	r2, #7
 80032a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000e010 	.word	0xe000e010

080032b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff05 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e0:	f7ff ff1a 	bl	8003118 <__NVIC_GetPriorityGrouping>
 80032e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f7ff ff8e 	bl	800320c <NVIC_EncodePriority>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff5d 	bl	80031b8 <__NVIC_SetPriority>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff0d 	bl	8003134 <__NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff1d 	bl	8003170 <__NVIC_DisableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff94 	bl	8003274 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e177      	b.n	8003664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 8166 	bne.w	800365e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80c0 	beq.w	800365e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b66      	ldr	r3, [pc, #408]	@ (800367c <HAL_GPIO_Init+0x324>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_GPIO_Init+0x324>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <HAL_GPIO_Init+0x324>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a61      	ldr	r2, [pc, #388]	@ (8003680 <HAL_GPIO_Init+0x328>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_GPIO_Init+0x32c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d037      	beq.n	8003596 <HAL_GPIO_Init+0x23e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a57      	ldr	r2, [pc, #348]	@ (8003688 <HAL_GPIO_Init+0x330>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_GPIO_Init+0x23a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a56      	ldr	r2, [pc, #344]	@ (800368c <HAL_GPIO_Init+0x334>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <HAL_GPIO_Init+0x236>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a55      	ldr	r2, [pc, #340]	@ (8003690 <HAL_GPIO_Init+0x338>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d025      	beq.n	800358a <HAL_GPIO_Init+0x232>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a54      	ldr	r2, [pc, #336]	@ (8003694 <HAL_GPIO_Init+0x33c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x22e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a53      	ldr	r2, [pc, #332]	@ (8003698 <HAL_GPIO_Init+0x340>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d019      	beq.n	8003582 <HAL_GPIO_Init+0x22a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_GPIO_Init+0x344>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x226>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a51      	ldr	r2, [pc, #324]	@ (80036a0 <HAL_GPIO_Init+0x348>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x222>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a50      	ldr	r2, [pc, #320]	@ (80036a4 <HAL_GPIO_Init+0x34c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x21e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	@ (80036a8 <HAL_GPIO_Init+0x350>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x21a>
 800356e:	2309      	movs	r3, #9
 8003570:	e012      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003572:	230a      	movs	r3, #10
 8003574:	e010      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003576:	2308      	movs	r3, #8
 8003578:	e00e      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800357a:	2307      	movs	r3, #7
 800357c:	e00c      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800357e:	2306      	movs	r3, #6
 8003580:	e00a      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003582:	2305      	movs	r3, #5
 8003584:	e008      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003586:	2304      	movs	r3, #4
 8003588:	e006      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800358a:	2303      	movs	r3, #3
 800358c:	e004      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800358e:	2302      	movs	r3, #2
 8003590:	e002      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003596:	2300      	movs	r3, #0
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f002 0203 	and.w	r2, r2, #3
 800359e:	0092      	lsls	r2, r2, #2
 80035a0:	4093      	lsls	r3, r2
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a8:	4935      	ldr	r1, [pc, #212]	@ (8003680 <HAL_GPIO_Init+0x328>)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035b6:	4b3d      	ldr	r3, [pc, #244]	@ (80036ac <HAL_GPIO_Init+0x354>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035da:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <HAL_GPIO_Init+0x354>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e0:	4b32      	ldr	r3, [pc, #200]	@ (80036ac <HAL_GPIO_Init+0x354>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003604:	4a29      	ldr	r2, [pc, #164]	@ (80036ac <HAL_GPIO_Init+0x354>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800360a:	4b28      	ldr	r3, [pc, #160]	@ (80036ac <HAL_GPIO_Init+0x354>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ac <HAL_GPIO_Init+0x354>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <HAL_GPIO_Init+0x354>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003658:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <HAL_GPIO_Init+0x354>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b0f      	cmp	r3, #15
 8003668:	f67f ae84 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3724      	adds	r7, #36	@ 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40013800 	.word	0x40013800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	40020800 	.word	0x40020800
 8003690:	40020c00 	.word	0x40020c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40021400 	.word	0x40021400
 800369c:	40021800 	.word	0x40021800
 80036a0:	40021c00 	.word	0x40021c00
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40022400 	.word	0x40022400
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e0d9      	b.n	8003880 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	f040 80c9 	bne.w	800387a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003898 <HAL_GPIO_DeInit+0x1e8>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	220f      	movs	r2, #15
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a63      	ldr	r2, [pc, #396]	@ (800389c <HAL_GPIO_DeInit+0x1ec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d037      	beq.n	8003782 <HAL_GPIO_DeInit+0xd2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a62      	ldr	r2, [pc, #392]	@ (80038a0 <HAL_GPIO_DeInit+0x1f0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_GPIO_DeInit+0xce>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a61      	ldr	r2, [pc, #388]	@ (80038a4 <HAL_GPIO_DeInit+0x1f4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02b      	beq.n	800377a <HAL_GPIO_DeInit+0xca>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a60      	ldr	r2, [pc, #384]	@ (80038a8 <HAL_GPIO_DeInit+0x1f8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d025      	beq.n	8003776 <HAL_GPIO_DeInit+0xc6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a5f      	ldr	r2, [pc, #380]	@ (80038ac <HAL_GPIO_DeInit+0x1fc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01f      	beq.n	8003772 <HAL_GPIO_DeInit+0xc2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a5e      	ldr	r2, [pc, #376]	@ (80038b0 <HAL_GPIO_DeInit+0x200>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d019      	beq.n	800376e <HAL_GPIO_DeInit+0xbe>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a5d      	ldr	r2, [pc, #372]	@ (80038b4 <HAL_GPIO_DeInit+0x204>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_GPIO_DeInit+0xba>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a5c      	ldr	r2, [pc, #368]	@ (80038b8 <HAL_GPIO_DeInit+0x208>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_DeInit+0xb6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a5b      	ldr	r2, [pc, #364]	@ (80038bc <HAL_GPIO_DeInit+0x20c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_DeInit+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a5a      	ldr	r2, [pc, #360]	@ (80038c0 <HAL_GPIO_DeInit+0x210>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_DeInit+0xae>
 800375a:	2309      	movs	r3, #9
 800375c:	e012      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 800375e:	230a      	movs	r3, #10
 8003760:	e010      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 8003762:	2308      	movs	r3, #8
 8003764:	e00e      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 8003766:	2307      	movs	r3, #7
 8003768:	e00c      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 800376a:	2306      	movs	r3, #6
 800376c:	e00a      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 800376e:	2305      	movs	r3, #5
 8003770:	e008      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 8003772:	2304      	movs	r3, #4
 8003774:	e006      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 8003776:	2303      	movs	r3, #3
 8003778:	e004      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 800377a:	2302      	movs	r3, #2
 800377c:	e002      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_GPIO_DeInit+0xd4>
 8003782:	2300      	movs	r3, #0
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	f002 0203 	and.w	r2, r2, #3
 800378a:	0092      	lsls	r2, r2, #2
 800378c:	4093      	lsls	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d132      	bne.n	80037fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003794:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43db      	mvns	r3, r3
 800379c:	4949      	ldr	r1, [pc, #292]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80037a2:	4b48      	ldr	r3, [pc, #288]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	4946      	ldr	r1, [pc, #280]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037b0:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4942      	ldr	r1, [pc, #264]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037be:	4b41      	ldr	r3, [pc, #260]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	493f      	ldr	r1, [pc, #252]	@ (80038c4 <HAL_GPIO_DeInit+0x214>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003898 <HAL_GPIO_DeInit+0x1e8>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	482a      	ldr	r0, [pc, #168]	@ (8003898 <HAL_GPIO_DeInit+0x1e8>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	400a      	ands	r2, r1
 80037f4:	3302      	adds	r3, #2
 80037f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2103      	movs	r1, #3
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	08d2      	lsrs	r2, r2, #3
 8003830:	4019      	ands	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2103      	movs	r1, #3
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	2101      	movs	r1, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	401a      	ands	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2103      	movs	r1, #3
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f af22 	bls.w	80036cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40021c00 	.word	0x40021c00
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40022400 	.word	0x40022400
 80038c4:	40013c00 	.word	0x40013c00

080038c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
 80038d4:	4613      	mov	r3, r2
 80038d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e4:	e003      	b.n	80038ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	041a      	lsls	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	619a      	str	r2, [r3, #24]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e12b      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe fd3a 	bl	800239c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800395e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003960:	f001 ff06 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a81      	ldr	r2, [pc, #516]	@ (8003b70 <HAL_I2C_Init+0x274>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d807      	bhi.n	8003980 <HAL_I2C_Init+0x84>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a80      	ldr	r2, [pc, #512]	@ (8003b74 <HAL_I2C_Init+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	bf94      	ite	ls
 8003978:	2301      	movls	r3, #1
 800397a:	2300      	movhi	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e006      	b.n	800398e <HAL_I2C_Init+0x92>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a7d      	ldr	r2, [pc, #500]	@ (8003b78 <HAL_I2C_Init+0x27c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0e7      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a78      	ldr	r2, [pc, #480]	@ (8003b7c <HAL_I2C_Init+0x280>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0c9b      	lsrs	r3, r3, #18
 80039a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b70 <HAL_I2C_Init+0x274>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d802      	bhi.n	80039d0 <HAL_I2C_Init+0xd4>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	e009      	b.n	80039e4 <HAL_I2C_Init+0xe8>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <HAL_I2C_Init+0x284>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	3301      	adds	r3, #1
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	495c      	ldr	r1, [pc, #368]	@ (8003b70 <HAL_I2C_Init+0x274>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d819      	bhi.n	8003a38 <HAL_I2C_Init+0x13c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e59      	subs	r1, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a12:	1c59      	adds	r1, r3, #1
 8003a14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a18:	400b      	ands	r3, r1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_I2C_Init+0x138>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e59      	subs	r1, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	e051      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e04f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <HAL_I2C_Init+0x168>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_I2C_Init+0x18e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x196>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <HAL_I2C_Init+0x1bc>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e58      	subs	r0, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	440b      	add	r3, r1
 8003aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	0099      	lsls	r1, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6809      	ldr	r1, [r1, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6911      	ldr	r1, [r2, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	000186a0 	.word	0x000186a0
 8003b74:	001e847f 	.word	0x001e847f
 8003b78:	003d08ff 	.word	0x003d08ff
 8003b7c:	431bde83 	.word	0x431bde83
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b9e:	f7ff fa67 	bl	8003070 <HAL_GetTick>
 8003ba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	f040 80d9 	bne.w	8003d64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2319      	movs	r3, #25
 8003bb8:	2201      	movs	r2, #1
 8003bba:	496d      	ldr	r1, [pc, #436]	@ (8003d70 <HAL_I2C_Mem_Write+0x1ec>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fc8b 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0cc      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_I2C_Mem_Write+0x56>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0c5      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d007      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2221      	movs	r2, #33	@ 0x21
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d74 <HAL_I2C_Mem_Write+0x1f0>)
 8003c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c42:	88f8      	ldrh	r0, [r7, #6]
 8003c44:	893a      	ldrh	r2, [r7, #8]
 8003c46:	8979      	ldrh	r1, [r7, #10]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fac2 	bl	80041dc <I2C_RequestMemoryWrite>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d052      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e081      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fd50 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06b      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d11b      	bne.n	8003d04 <HAL_I2C_Mem_Write+0x180>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d017      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1aa      	bne.n	8003c62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fd43 	bl	800479c <I2C_WaitOnBTFFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d107      	bne.n	8003d34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e016      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	00100002 	.word	0x00100002
 8003d74:	ffff0000 	.word	0xffff0000

08003d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	@ 0x30
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	817b      	strh	r3, [r7, #10]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	813b      	strh	r3, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d92:	f7ff f96d 	bl	8003070 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	f040 8214 	bne.w	80041ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2319      	movs	r3, #25
 8003dac:	2201      	movs	r2, #1
 8003dae:	497b      	ldr	r1, [pc, #492]	@ (8003f9c <HAL_I2C_Mem_Read+0x224>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fb91 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e207      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Mem_Read+0x56>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e200      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d007      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2222      	movs	r2, #34	@ 0x22
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa0 <HAL_I2C_Mem_Read+0x228>)
 8003e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e36:	88f8      	ldrh	r0, [r7, #6]
 8003e38:	893a      	ldrh	r2, [r7, #8]
 8003e3a:	8979      	ldrh	r1, [r7, #10]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4603      	mov	r3, r0
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa5e 	bl	8004308 <I2C_RequestMemoryRead>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1bc      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e190      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e170      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d11b      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	e150      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f1c:	e144      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f200 80f1 	bhi.w	800410a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d123      	bne.n	8003f78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fc79 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e145      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f76:	e117      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d14e      	bne.n	800401e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	2200      	movs	r2, #0
 8003f88:	4906      	ldr	r1, [pc, #24]	@ (8003fa4 <HAL_I2C_Mem_Read+0x22c>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 faa4 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e11a      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800401c:	e0c4      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	496c      	ldr	r1, [pc, #432]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa55 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cb      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2200      	movs	r2, #0
 8004082:	4955      	ldr	r1, [pc, #340]	@ (80041d8 <HAL_I2C_Mem_Read+0x460>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fa27 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e09d      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004108:	e04e      	b.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fb8c 	bl	800482c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e058      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d124      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004174:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f47f aeb6 	bne.w	8003f1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010004 	.word	0x00010004

080041dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004204:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f960 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	d103      	bne.n	8004236 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e05f      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004248:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	492d      	ldr	r1, [pc, #180]	@ (8004304 <I2C_RequestMemoryWrite+0x128>)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9bb 	bl	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04c      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fa46 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e02b      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e021      	b.n	80042f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b4:	893b      	ldrh	r3, [r7, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa20 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e005      	b.n	80042fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	461a      	mov	r2, r3
 8004316:	4603      	mov	r3, r0
 8004318:	817b      	strh	r3, [r7, #10]
 800431a:	460b      	mov	r3, r1
 800431c:	813b      	strh	r3, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004330:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	2200      	movs	r2, #0
 800434a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f8c2 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004368:	d103      	bne.n	8004372 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0aa      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004384:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	6a3a      	ldr	r2, [r7, #32]
 800438a:	4952      	ldr	r1, [pc, #328]	@ (80044d4 <I2C_RequestMemoryRead+0x1cc>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f91d 	bl	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e097      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f9a8 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e076      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e4:	893b      	ldrh	r3, [r7, #8]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e021      	b.n	8004434 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f982 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004424:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e050      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800442a:	893b      	ldrh	r3, [r7, #8]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004436:	6a39      	ldr	r1, [r7, #32]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f967 	bl	800470c <I2C_WaitOnTXEFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	2b04      	cmp	r3, #4
 800444a:	d107      	bne.n	800445c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800445a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e035      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2200      	movs	r2, #0
 8004478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f82b 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004496:	d103      	bne.n	80044a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e013      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044a4:	897b      	ldrh	r3, [r7, #10]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	4906      	ldr	r1, [pc, #24]	@ (80044d4 <I2C_RequestMemoryRead+0x1cc>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f886 	bl	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	00010002 	.word	0x00010002

080044d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e8:	e048      	b.n	800457c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d044      	beq.n	800457c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fe fdbd 	bl	8003070 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d139      	bne.n	800457c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10d      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	43da      	mvns	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	e00c      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x70>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	43da      	mvns	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d116      	bne.n	800457c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e023      	b.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10d      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	e00c      	b.n	80045bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	43da      	mvns	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d093      	beq.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045da:	e071      	b.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ea:	d123      	bne.n	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e067      	b.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d041      	beq.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463c:	f7fe fd18 	bl	8003070 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d302      	bcc.n	8004652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d136      	bne.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10c      	bne.n	8004676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e00b      	b.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	43da      	mvns	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4013      	ands	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e021      	b.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10c      	bne.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	43da      	mvns	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e00b      	b.n	80046fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f47f af6d 	bne.w	80045dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004718:	e034      	b.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f8e3 	bl	80048e6 <I2C_IsAcknowledgeFailed>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e034      	b.n	8004794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d028      	beq.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	f7fe fc9d 	bl	8003070 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11d      	bne.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b80      	cmp	r3, #128	@ 0x80
 8004754:	d016      	beq.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e007      	b.n	8004794 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b80      	cmp	r3, #128	@ 0x80
 8004790:	d1c3      	bne.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a8:	e034      	b.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f89b 	bl	80048e6 <I2C_IsAcknowledgeFailed>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e034      	b.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d028      	beq.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fe fc55 	bl	8003070 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11d      	bne.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d016      	beq.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e007      	b.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d1c3      	bne.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004838:	e049      	b.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d119      	bne.n	800487c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e030      	b.n	80048de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487c:	f7fe fbf8 	bl	8003070 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11d      	bne.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b40      	cmp	r3, #64	@ 0x40
 800489e:	d016      	beq.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e007      	b.n	80048de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d1ae      	bne.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d11b      	bne.n	8004936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0bf      	b.n	8004ad6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fd80 	bl	8002470 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004986:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6999      	ldr	r1, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800499c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_LTDC_Init+0x19c>)
 80049b8:	400b      	ands	r3, r1
 80049ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68d9      	ldr	r1, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <HAL_LTDC_Init+0x19c>)
 80049e6:	400b      	ands	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68d9      	ldr	r1, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6919      	ldr	r1, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b33      	ldr	r3, [pc, #204]	@ (8004ae0 <HAL_LTDC_Init+0x19c>)
 8004a14:	400b      	ands	r3, r1
 8004a16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6959      	ldr	r1, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b27      	ldr	r3, [pc, #156]	@ (8004ae0 <HAL_LTDC_Init+0x19c>)
 8004a42:	400b      	ands	r3, r1
 8004a44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6959      	ldr	r1, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0206 	orr.w	r2, r2, #6
 8004ab2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	f000f800 	.word	0xf000f800

08004ae4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ae4:	b5b0      	push	{r4, r5, r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_LTDC_ConfigLayer+0x1a>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e02c      	b.n	8004b58 <HAL_LTDC_ConfigLayer+0x74>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2134      	movs	r1, #52	@ 0x34
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f811 	bl	8004b60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}

08004b60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7c:	4413      	add	r3, r2
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	01db      	lsls	r3, r3, #7
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3384      	adds	r3, #132	@ 0x84
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4611      	mov	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	01d2      	lsls	r2, r2, #7
 8004b9c:	440a      	add	r2, r1
 8004b9e:	3284      	adds	r2, #132	@ 0x84
 8004ba0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ba4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bb6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bb8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3384      	adds	r3, #132	@ 0x84
 8004bc8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bde:	4413      	add	r3, r2
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	4413      	add	r3, r2
 8004bf0:	3384      	adds	r3, #132	@ 0x84
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	01d2      	lsls	r2, r2, #7
 8004bfe:	440a      	add	r2, r1
 8004c00:	3284      	adds	r2, #132	@ 0x84
 8004c02:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c16:	4413      	add	r3, r2
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	440b      	add	r3, r1
 8004c26:	3384      	adds	r3, #132	@ 0x84
 8004c28:	4619      	mov	r1, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	@ 0x84
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	4611      	mov	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	01d2      	lsls	r2, r2, #7
 8004c4a:	440a      	add	r2, r1
 8004c4c:	3284      	adds	r2, #132	@ 0x84
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	01db      	lsls	r3, r3, #7
 8004c5e:	4413      	add	r3, r2
 8004c60:	3384      	adds	r3, #132	@ 0x84
 8004c62:	461a      	mov	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	01db      	lsls	r3, r3, #7
 8004c90:	4413      	add	r3, r2
 8004c92:	3384      	adds	r3, #132	@ 0x84
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3384      	adds	r3, #132	@ 0x84
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	01db      	lsls	r3, r3, #7
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3384      	adds	r3, #132	@ 0x84
 8004cc8:	4619      	mov	r1, r3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	01db      	lsls	r3, r3, #7
 8004cda:	4413      	add	r3, r2
 8004cdc:	3384      	adds	r3, #132	@ 0x84
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	01d2      	lsls	r2, r2, #7
 8004cea:	440a      	add	r2, r1
 8004cec:	3284      	adds	r2, #132	@ 0x84
 8004cee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cf2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	01db      	lsls	r3, r3, #7
 8004cfe:	4413      	add	r3, r2
 8004d00:	3384      	adds	r3, #132	@ 0x84
 8004d02:	461a      	mov	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	01db      	lsls	r3, r3, #7
 8004d14:	4413      	add	r3, r2
 8004d16:	3384      	adds	r3, #132	@ 0x84
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	01d2      	lsls	r2, r2, #7
 8004d24:	440a      	add	r2, r1
 8004d26:	3284      	adds	r2, #132	@ 0x84
 8004d28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d2c:	f023 0307 	bic.w	r3, r3, #7
 8004d30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	6809      	ldr	r1, [r1, #0]
 8004d3e:	4608      	mov	r0, r1
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	01c9      	lsls	r1, r1, #7
 8004d44:	4401      	add	r1, r0
 8004d46:	3184      	adds	r1, #132	@ 0x84
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	01db      	lsls	r3, r3, #7
 8004d56:	4413      	add	r3, r2
 8004d58:	3384      	adds	r3, #132	@ 0x84
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	01db      	lsls	r3, r3, #7
 8004d66:	4413      	add	r3, r2
 8004d68:	3384      	adds	r3, #132	@ 0x84
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	01db      	lsls	r3, r3, #7
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3384      	adds	r3, #132	@ 0x84
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004d8e:	2304      	movs	r3, #4
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e01b      	b.n	8004dcc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d102      	bne.n	8004da2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e014      	b.n	8004dcc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d00b      	beq.n	8004dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d007      	beq.n	8004dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d003      	beq.n	8004dc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004dbe:	2b07      	cmp	r3, #7
 8004dc0:	d102      	bne.n	8004dc8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e001      	b.n	8004dcc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	01db      	lsls	r3, r3, #7
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3384      	adds	r3, #132	@ 0x84
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	4611      	mov	r1, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	01d2      	lsls	r2, r2, #7
 8004de6:	440a      	add	r2, r1
 8004de8:	3284      	adds	r2, #132	@ 0x84
 8004dea:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	1acb      	subs	r3, r1, r3
 8004e06:	69f9      	ldr	r1, [r7, #28]
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	6809      	ldr	r1, [r1, #0]
 8004e12:	4608      	mov	r0, r1
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	01c9      	lsls	r1, r1, #7
 8004e18:	4401      	add	r1, r0
 8004e1a:	3184      	adds	r1, #132	@ 0x84
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	01db      	lsls	r3, r3, #7
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3384      	adds	r3, #132	@ 0x84
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4611      	mov	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	01d2      	lsls	r2, r2, #7
 8004e3a:	440a      	add	r2, r1
 8004e3c:	3284      	adds	r2, #132	@ 0x84
 8004e3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e42:	f023 0307 	bic.w	r3, r3, #7
 8004e46:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	01db      	lsls	r3, r3, #7
 8004e52:	4413      	add	r3, r2
 8004e54:	3384      	adds	r3, #132	@ 0x84
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	4413      	add	r3, r2
 8004e6a:	3384      	adds	r3, #132	@ 0x84
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	4611      	mov	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	01d2      	lsls	r2, r2, #7
 8004e78:	440a      	add	r2, r1
 8004e7a:	3284      	adds	r2, #132	@ 0x84
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3724      	adds	r7, #36	@ 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe f892 	bl	8003070 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fe f88e 	bl	8003070 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fe f87e 	bl	8003070 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fe f87a 	bl	8003070 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fe f833 	bl	8003070 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500e:	f7fe f82f 	bl	8003070 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe f812 	bl	8003070 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005050:	f7fe f80e 	bl	8003070 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd fff2 	bl	8003070 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd ffee 	bl	8003070 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd ffdb 	bl	8003070 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd ffd7 	bl	8003070 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	@ 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd ff97 	bl	8003070 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd ff93 	bl	8003070 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd ff58 	bl	8003070 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd ff54 	bl	8003070 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fd ff42 	bl	8003070 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fd ff3e 	bl	8003070 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd ff12 	bl	8003070 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd ff0e 	bl	8003070 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd fee7 	bl	8003070 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd fee3 	bl	8003070 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd fed0 	bl	8003070 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fd fecc 	bl	8003070 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fd fdfe 	bl	8003070 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fd fdfa 	bl	8003070 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	@ (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fd5e 	bl	8002fe8 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	08008838 	.word	0x08008838
 8005544:	20000710 	.word	0x20000710
 8005548:	20000714 	.word	0x20000714

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b094      	sub	sp, #80	@ 0x50
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b79      	ldr	r3, [pc, #484]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80e1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e0db      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b73      	ldr	r3, [pc, #460]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005584:	e0db      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b73      	ldr	r3, [pc, #460]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x208>)
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800558a:	e0d8      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b6f      	ldr	r3, [pc, #444]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005594:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6139      	str	r1, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f0:	4659      	mov	r1, fp
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4651      	mov	r1, sl
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4651      	mov	r1, sl
 8005600:	ebb2 0801 	subs.w	r8, r2, r1
 8005604:	4659      	mov	r1, fp
 8005606:	eb63 0901 	sbc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	462b      	mov	r3, r5
 800562c:	eb49 0303 	adc.w	r3, r9, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563e:	4629      	mov	r1, r5
 8005640:	024b      	lsls	r3, r1, #9
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005648:	4621      	mov	r1, r4
 800564a:	024a      	lsls	r2, r1, #9
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800565c:	f7fa fe20 	bl	80002a0 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005668:	e058      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b38      	ldr	r3, [pc, #224]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	4618      	mov	r0, r3
 8005674:	4611      	mov	r1, r2
 8005676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4641      	mov	r1, r8
 800569e:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056bc:	ebb2 040a 	subs.w	r4, r2, sl
 80056c0:	eb63 050b 	sbc.w	r5, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	464b      	mov	r3, r9
 80056e0:	eb45 0303 	adc.w	r3, r5, r3
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	f7fa fdc6 	bl	80002a0 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800572c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800572e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005740:	4618      	mov	r0, r3
 8005742:	3750      	adds	r7, #80	@ 0x50
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000710 	.word	0x20000710

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	08008848 	.word	0x08008848

08005798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d075      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057cc:	4b91      	ldr	r3, [pc, #580]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d2:	f7fd fc4d 	bl	8003070 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057da:	f7fd fc49 	bl	8003070 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e189      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	019a      	lsls	r2, r3, #6
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	071b      	lsls	r3, r3, #28
 8005810:	4981      	ldr	r1, [pc, #516]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01f      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005824:	4b7c      	ldr	r3, [pc, #496]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582a:	0f1b      	lsrs	r3, r3, #28
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	019a      	lsls	r2, r3, #6
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	431a      	orrs	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	071b      	lsls	r3, r3, #28
 8005844:	4974      	ldr	r1, [pc, #464]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800584c:	4b72      	ldr	r3, [pc, #456]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005852:	f023 021f 	bic.w	r2, r3, #31
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	3b01      	subs	r3, #1
 800585c:	496e      	ldr	r1, [pc, #440]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	019a      	lsls	r2, r3, #6
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	071b      	lsls	r3, r3, #28
 8005884:	4964      	ldr	r1, [pc, #400]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800588c:	4b61      	ldr	r3, [pc, #388]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005892:	f7fd fbed 	bl	8003070 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800589a:	f7fd fbe9 	bl	8003070 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e129      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d079      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058d0:	4b52      	ldr	r3, [pc, #328]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058d6:	f7fd fbcb 	bl	8003070 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058de:	f7fd fbc7 	bl	8003070 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e107      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f0:	4b49      	ldr	r3, [pc, #292]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058fc:	d0ef      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800590a:	4b43      	ldr	r3, [pc, #268]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005910:	0f1b      	lsrs	r3, r3, #28
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	061b      	lsls	r3, r3, #24
 8005924:	431a      	orrs	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	071b      	lsls	r3, r3, #28
 800592a:	493b      	ldr	r1, [pc, #236]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005932:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005938:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	3b01      	subs	r3, #1
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	4934      	ldr	r1, [pc, #208]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01e      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005958:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	019a      	lsls	r2, r3, #6
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	071b      	lsls	r3, r3, #28
 8005978:	4927      	ldr	r1, [pc, #156]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005980:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005986:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	4922      	ldr	r1, [pc, #136]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005996:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005998:	2201      	movs	r2, #1
 800599a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800599c:	f7fd fb68 	bl	8003070 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059a4:	f7fd fb64 	bl	8003070 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0a4      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059b6:	4b18      	ldr	r3, [pc, #96]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c2:	d1ef      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 808b 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	4a0f      	ldr	r2, [pc, #60]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059fa:	f7fd fb39 	bl	8003070 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a00:	e010      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fd fb35 	bl	8003070 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d909      	bls.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e075      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a14:	42470068 	.word	0x42470068
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	42470070 	.word	0x42470070
 8005a20:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a24:	4b38      	ldr	r3, [pc, #224]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0e8      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a30:	4b36      	ldr	r3, [pc, #216]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02f      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d028      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a58:	4b2d      	ldr	r3, [pc, #180]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a64:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a6a:	4b28      	ldr	r3, [pc, #160]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d114      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a76:	f7fd fafb 	bl	8003070 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fd faf7 	bl	8003070 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e035      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	4b1d      	ldr	r3, [pc, #116]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ee      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005aae:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac2:	4912      	ldr	r1, [pc, #72]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]
 8005ac8:	e005      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005aca:	4b10      	ldr	r3, [pc, #64]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4a0f      	ldr	r2, [pc, #60]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005ad4:	6093      	str	r3, [r2, #8]
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae2:	490a      	ldr	r1, [pc, #40]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005afc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40007000 	.word	0x40007000
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	42470e40 	.word	0x42470e40
 8005b14:	424711e0 	.word	0x424711e0

08005b18 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e01c      	b.n	8005b64 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	795b      	ldrb	r3, [r3, #5]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fdc0 	bl	80026c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0204 	orr.w	r2, r2, #4
 8005b54:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e044      	b.n	8005c10 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	795b      	ldrb	r3, [r3, #5]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d133      	bne.n	8005bfe <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b9c:	f7fd fa68 	bl	8003070 <HAL_GetTick>
 8005ba0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ba2:	e018      	b.n	8005bd6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005ba4:	f7fd fa64 	bl	8003070 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d911      	bls.n	8005bd6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e01c      	b.n	8005c10 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d1df      	bne.n	8005ba4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	715a      	strb	r2, [r3, #5]
 8005bfc:	e004      	b.n	8005c08 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2204      	movs	r2, #4
 8005c02:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	711a      	strb	r2, [r3, #4]

  return status;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07b      	b.n	8005d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d108      	bne.n	8005c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c3a:	d009      	beq.n	8005c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	61da      	str	r2, [r3, #28]
 8005c42:	e005      	b.n	8005c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fc fd4a 	bl	8002704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd4:	ea42 0103 	orr.w	r1, r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 0104 	and.w	r1, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	f003 0210 	and.w	r2, r3, #16
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e01a      	b.n	8005d72 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d52:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fc fd1d 	bl	8002794 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b088      	sub	sp, #32
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d8a:	f7fd f971 	bl	8003070 <HAL_GetTick>
 8005d8e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e12a      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_Transmit+0x36>
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e122      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_SPI_Transmit+0x48>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e11b      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e10:	d10f      	bne.n	8005e32 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d007      	beq.n	8005e50 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e58:	d152      	bne.n	8005f00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_SPI_Transmit+0xee>
 8005e62:	8b7b      	ldrh	r3, [r7, #26]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d145      	bne.n	8005ef4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6c:	881a      	ldrh	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	1c9a      	adds	r2, r3, #2
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e8c:	e032      	b.n	8005ef4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d112      	bne.n	8005ec2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ec0:	e018      	b.n	8005ef4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec2:	f7fd f8d5 	bl	8003070 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d803      	bhi.n	8005eda <HAL_SPI_Transmit+0x160>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x166>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e082      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1c7      	bne.n	8005e8e <HAL_SPI_Transmit+0x114>
 8005efe:	e053      	b.n	8005fa8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_Transmit+0x194>
 8005f08:	8b7b      	ldrh	r3, [r7, #26]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d147      	bne.n	8005f9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f34:	e033      	b.n	8005f9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d113      	bne.n	8005f6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f6a:	e018      	b.n	8005f9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6c:	f7fd f880 	bl	8003070 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d803      	bhi.n	8005f84 <HAL_SPI_Transmit+0x20a>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Transmit+0x210>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e02d      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1c6      	bne.n	8005f36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f8bf 	bl	8006130 <SPI_EndRxTxTransaction>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
  }
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006010:	b2db      	uxtb	r3, r3
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006030:	f7fd f81e 	bl	8003070 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006040:	f7fd f816 	bl	8003070 <HAL_GetTick>
 8006044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006046:	4b39      	ldr	r3, [pc, #228]	@ (800612c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	0d1b      	lsrs	r3, r3, #20
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006056:	e054      	b.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d050      	beq.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006060:	f7fd f806 	bl	8003070 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d902      	bls.n	8006076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13d      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800608e:	d111      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006098:	d004      	beq.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a2:	d107      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060bc:	d10f      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e017      	b.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3b01      	subs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d19b      	bne.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000710 	.word	0x20000710

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2201      	movs	r2, #1
 8006144:	2102      	movs	r1, #2
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff ff6a 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e032      	b.n	80061c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <SPI_EndRxTxTransaction+0xa0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1b      	ldr	r2, [pc, #108]	@ (80061d4 <SPI_EndRxTxTransaction+0xa4>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	0d5b      	lsrs	r3, r3, #21
 800616e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006180:	d112      	bne.n	80061a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	@ 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ff47 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00f      	b.n	80061c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061be:	2b80      	cmp	r3, #128	@ 0x80
 80061c0:	d0f2      	beq.n	80061a8 <SPI_EndRxTxTransaction+0x78>
 80061c2:	e000      	b.n	80061c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80061c4:	bf00      	nop
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000710 	.word	0x20000710
 80061d4:	165e9f81 	.word	0x165e9f81

080061d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d020      	beq.n	800623c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0202 	mvn.w	r2, #2
 800620c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f8dc 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8ce 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f8df 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d020      	beq.n	8006288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01b      	beq.n	8006288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0204 	mvn.w	r2, #4
 8006258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f8b6 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8006274:	e005      	b.n	8006282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8a8 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f8b9 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01b      	beq.n	80062d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0208 	mvn.w	r2, #8
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f890 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f882 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f893 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d020      	beq.n	8006320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01b      	beq.n	8006320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0210 	mvn.w	r2, #16
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2208      	movs	r2, #8
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f86a 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f85c 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f86d 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0201 	mvn.w	r2, #1
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f83a 	bl	80063b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f864 	bl	8006430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f83e 	bl	8006408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0220 	mvn.w	r2, #32
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f836 	bl	800641c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <findslot>:
 8006444:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <findslot+0x2c>)
 8006446:	b510      	push	{r4, lr}
 8006448:	4604      	mov	r4, r0
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	b118      	cbz	r0, 8006456 <findslot+0x12>
 800644e:	6a03      	ldr	r3, [r0, #32]
 8006450:	b90b      	cbnz	r3, 8006456 <findslot+0x12>
 8006452:	f000 faed 	bl	8006a30 <__sinit>
 8006456:	2c13      	cmp	r4, #19
 8006458:	d807      	bhi.n	800646a <findslot+0x26>
 800645a:	4806      	ldr	r0, [pc, #24]	@ (8006474 <findslot+0x30>)
 800645c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006460:	3201      	adds	r2, #1
 8006462:	d002      	beq.n	800646a <findslot+0x26>
 8006464:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006468:	bd10      	pop	{r4, pc}
 800646a:	2000      	movs	r0, #0
 800646c:	e7fc      	b.n	8006468 <findslot+0x24>
 800646e:	bf00      	nop
 8006470:	20000730 	.word	0x20000730
 8006474:	20026568 	.word	0x20026568

08006478 <error>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	4604      	mov	r4, r0
 800647c:	f000 fbc0 	bl	8006c00 <__errno>
 8006480:	2613      	movs	r6, #19
 8006482:	4605      	mov	r5, r0
 8006484:	2700      	movs	r7, #0
 8006486:	4630      	mov	r0, r6
 8006488:	4639      	mov	r1, r7
 800648a:	beab      	bkpt	0x00ab
 800648c:	4606      	mov	r6, r0
 800648e:	602e      	str	r6, [r5, #0]
 8006490:	4620      	mov	r0, r4
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006494 <checkerror>:
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d101      	bne.n	800649c <checkerror+0x8>
 8006498:	f7ff bfee 	b.w	8006478 <error>
 800649c:	4770      	bx	lr

0800649e <_swiread>:
 800649e:	b530      	push	{r4, r5, lr}
 80064a0:	b085      	sub	sp, #20
 80064a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80064a6:	9203      	str	r2, [sp, #12]
 80064a8:	2406      	movs	r4, #6
 80064aa:	ad01      	add	r5, sp, #4
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	beab      	bkpt	0x00ab
 80064b2:	4604      	mov	r4, r0
 80064b4:	4620      	mov	r0, r4
 80064b6:	f7ff ffed 	bl	8006494 <checkerror>
 80064ba:	b005      	add	sp, #20
 80064bc:	bd30      	pop	{r4, r5, pc}

080064be <_read>:
 80064be:	b570      	push	{r4, r5, r6, lr}
 80064c0:	460e      	mov	r6, r1
 80064c2:	4614      	mov	r4, r2
 80064c4:	f7ff ffbe 	bl	8006444 <findslot>
 80064c8:	4605      	mov	r5, r0
 80064ca:	b930      	cbnz	r0, 80064da <_read+0x1c>
 80064cc:	f000 fb98 	bl	8006c00 <__errno>
 80064d0:	2309      	movs	r3, #9
 80064d2:	6003      	str	r3, [r0, #0]
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	4622      	mov	r2, r4
 80064de:	4631      	mov	r1, r6
 80064e0:	f7ff ffdd 	bl	800649e <_swiread>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d0f5      	beq.n	80064d4 <_read+0x16>
 80064e8:	686b      	ldr	r3, [r5, #4]
 80064ea:	1a20      	subs	r0, r4, r0
 80064ec:	4403      	add	r3, r0
 80064ee:	606b      	str	r3, [r5, #4]
 80064f0:	e7f2      	b.n	80064d8 <_read+0x1a>

080064f2 <_swilseek>:
 80064f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	4616      	mov	r6, r2
 80064f8:	f7ff ffa4 	bl	8006444 <findslot>
 80064fc:	4605      	mov	r5, r0
 80064fe:	b940      	cbnz	r0, 8006512 <_swilseek+0x20>
 8006500:	f000 fb7e 	bl	8006c00 <__errno>
 8006504:	2309      	movs	r3, #9
 8006506:	6003      	str	r3, [r0, #0]
 8006508:	f04f 34ff 	mov.w	r4, #4294967295
 800650c:	4620      	mov	r0, r4
 800650e:	b003      	add	sp, #12
 8006510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006512:	2e02      	cmp	r6, #2
 8006514:	d903      	bls.n	800651e <_swilseek+0x2c>
 8006516:	f000 fb73 	bl	8006c00 <__errno>
 800651a:	2316      	movs	r3, #22
 800651c:	e7f3      	b.n	8006506 <_swilseek+0x14>
 800651e:	2e01      	cmp	r6, #1
 8006520:	d112      	bne.n	8006548 <_swilseek+0x56>
 8006522:	6843      	ldr	r3, [r0, #4]
 8006524:	18e4      	adds	r4, r4, r3
 8006526:	d4f6      	bmi.n	8006516 <_swilseek+0x24>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	260a      	movs	r6, #10
 800652c:	e9cd 3400 	strd	r3, r4, [sp]
 8006530:	466f      	mov	r7, sp
 8006532:	4630      	mov	r0, r6
 8006534:	4639      	mov	r1, r7
 8006536:	beab      	bkpt	0x00ab
 8006538:	4606      	mov	r6, r0
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ffaa 	bl	8006494 <checkerror>
 8006540:	2800      	cmp	r0, #0
 8006542:	dbe1      	blt.n	8006508 <_swilseek+0x16>
 8006544:	606c      	str	r4, [r5, #4]
 8006546:	e7e1      	b.n	800650c <_swilseek+0x1a>
 8006548:	2e02      	cmp	r6, #2
 800654a:	6803      	ldr	r3, [r0, #0]
 800654c:	d1ec      	bne.n	8006528 <_swilseek+0x36>
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	260c      	movs	r6, #12
 8006552:	466f      	mov	r7, sp
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	beab      	bkpt	0x00ab
 800655a:	4606      	mov	r6, r0
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff ff99 	bl	8006494 <checkerror>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d0d0      	beq.n	8006508 <_swilseek+0x16>
 8006566:	4404      	add	r4, r0
 8006568:	e7de      	b.n	8006528 <_swilseek+0x36>

0800656a <_lseek>:
 800656a:	f7ff bfc2 	b.w	80064f2 <_swilseek>

0800656e <_swiwrite>:
 800656e:	b530      	push	{r4, r5, lr}
 8006570:	b085      	sub	sp, #20
 8006572:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006576:	9203      	str	r2, [sp, #12]
 8006578:	2405      	movs	r4, #5
 800657a:	ad01      	add	r5, sp, #4
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	beab      	bkpt	0x00ab
 8006582:	4604      	mov	r4, r0
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff ff85 	bl	8006494 <checkerror>
 800658a:	b005      	add	sp, #20
 800658c:	bd30      	pop	{r4, r5, pc}

0800658e <_write>:
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	460e      	mov	r6, r1
 8006592:	4615      	mov	r5, r2
 8006594:	f7ff ff56 	bl	8006444 <findslot>
 8006598:	4604      	mov	r4, r0
 800659a:	b930      	cbnz	r0, 80065aa <_write+0x1c>
 800659c:	f000 fb30 	bl	8006c00 <__errno>
 80065a0:	2309      	movs	r3, #9
 80065a2:	6003      	str	r3, [r0, #0]
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	462a      	mov	r2, r5
 80065ae:	4631      	mov	r1, r6
 80065b0:	f7ff ffdd 	bl	800656e <_swiwrite>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	dbf5      	blt.n	80065a4 <_write+0x16>
 80065b8:	6862      	ldr	r2, [r4, #4]
 80065ba:	1ae8      	subs	r0, r5, r3
 80065bc:	4402      	add	r2, r0
 80065be:	42ab      	cmp	r3, r5
 80065c0:	6062      	str	r2, [r4, #4]
 80065c2:	d1f1      	bne.n	80065a8 <_write+0x1a>
 80065c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff bf55 	b.w	8006478 <error>

080065ce <_swiclose>:
 80065ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d0:	2402      	movs	r4, #2
 80065d2:	9001      	str	r0, [sp, #4]
 80065d4:	ad01      	add	r5, sp, #4
 80065d6:	4620      	mov	r0, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	beab      	bkpt	0x00ab
 80065dc:	4604      	mov	r4, r0
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff ff58 	bl	8006494 <checkerror>
 80065e4:	b003      	add	sp, #12
 80065e6:	bd30      	pop	{r4, r5, pc}

080065e8 <_close>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4605      	mov	r5, r0
 80065ec:	f7ff ff2a 	bl	8006444 <findslot>
 80065f0:	4604      	mov	r4, r0
 80065f2:	b930      	cbnz	r0, 8006602 <_close+0x1a>
 80065f4:	f000 fb04 	bl	8006c00 <__errno>
 80065f8:	2309      	movs	r3, #9
 80065fa:	6003      	str	r3, [r0, #0]
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	3d01      	subs	r5, #1
 8006604:	2d01      	cmp	r5, #1
 8006606:	d809      	bhi.n	800661c <_close+0x34>
 8006608:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <_close+0x40>)
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d104      	bne.n	800661c <_close+0x34>
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	2000      	movs	r0, #0
 800661a:	e7f1      	b.n	8006600 <_close+0x18>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	f7ff ffd6 	bl	80065ce <_swiclose>
 8006622:	2800      	cmp	r0, #0
 8006624:	d0f5      	beq.n	8006612 <_close+0x2a>
 8006626:	e7eb      	b.n	8006600 <_close+0x18>
 8006628:	20026568 	.word	0x20026568

0800662c <_swistat>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	460c      	mov	r4, r1
 8006630:	f7ff ff08 	bl	8006444 <findslot>
 8006634:	4605      	mov	r5, r0
 8006636:	b930      	cbnz	r0, 8006646 <_swistat+0x1a>
 8006638:	f000 fae2 	bl	8006c00 <__errno>
 800663c:	2309      	movs	r3, #9
 800663e:	6003      	str	r3, [r0, #0]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006652:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006654:	260c      	movs	r6, #12
 8006656:	4630      	mov	r0, r6
 8006658:	4629      	mov	r1, r5
 800665a:	beab      	bkpt	0x00ab
 800665c:	4605      	mov	r5, r0
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff ff18 	bl	8006494 <checkerror>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d0eb      	beq.n	8006640 <_swistat+0x14>
 8006668:	6120      	str	r0, [r4, #16]
 800666a:	2000      	movs	r0, #0
 800666c:	e7ea      	b.n	8006644 <_swistat+0x18>

0800666e <_stat>:
 800666e:	b538      	push	{r3, r4, r5, lr}
 8006670:	460d      	mov	r5, r1
 8006672:	4604      	mov	r4, r0
 8006674:	2258      	movs	r2, #88	@ 0x58
 8006676:	2100      	movs	r1, #0
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fa72 	bl	8006b62 <memset>
 800667e:	4620      	mov	r0, r4
 8006680:	2100      	movs	r1, #0
 8006682:	f000 f811 	bl	80066a8 <_swiopen>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	4604      	mov	r4, r0
 800668a:	d00b      	beq.n	80066a4 <_stat+0x36>
 800668c:	686b      	ldr	r3, [r5, #4]
 800668e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006692:	606b      	str	r3, [r5, #4]
 8006694:	4629      	mov	r1, r5
 8006696:	f7ff ffc9 	bl	800662c <_swistat>
 800669a:	4605      	mov	r5, r0
 800669c:	4620      	mov	r0, r4
 800669e:	f7ff ffa3 	bl	80065e8 <_close>
 80066a2:	462c      	mov	r4, r5
 80066a4:	4620      	mov	r0, r4
 80066a6:	bd38      	pop	{r3, r4, r5, pc}

080066a8 <_swiopen>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4f29      	ldr	r7, [pc, #164]	@ (8006754 <_swiopen+0xac>)
 80066ae:	b096      	sub	sp, #88	@ 0x58
 80066b0:	4682      	mov	sl, r0
 80066b2:	460e      	mov	r6, r1
 80066b4:	2400      	movs	r4, #0
 80066b6:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80066ba:	3301      	adds	r3, #1
 80066bc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80066c0:	d00c      	beq.n	80066dc <_swiopen+0x34>
 80066c2:	3401      	adds	r4, #1
 80066c4:	2c14      	cmp	r4, #20
 80066c6:	d1f6      	bne.n	80066b6 <_swiopen+0xe>
 80066c8:	f000 fa9a 	bl	8006c00 <__errno>
 80066cc:	2318      	movs	r3, #24
 80066ce:	6003      	str	r3, [r0, #0]
 80066d0:	f04f 34ff 	mov.w	r4, #4294967295
 80066d4:	4620      	mov	r0, r4
 80066d6:	b016      	add	sp, #88	@ 0x58
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80066e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066e4:	46e9      	mov	r9, sp
 80066e6:	d109      	bne.n	80066fc <_swiopen+0x54>
 80066e8:	4649      	mov	r1, r9
 80066ea:	4650      	mov	r0, sl
 80066ec:	f7ff ffbf 	bl	800666e <_stat>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d003      	beq.n	80066fc <_swiopen+0x54>
 80066f4:	f000 fa84 	bl	8006c00 <__errno>
 80066f8:	2311      	movs	r3, #17
 80066fa:	e7e8      	b.n	80066ce <_swiopen+0x26>
 80066fc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006700:	f240 6301 	movw	r3, #1537	@ 0x601
 8006704:	07b2      	lsls	r2, r6, #30
 8006706:	bf48      	it	mi
 8006708:	f045 0502 	orrmi.w	r5, r5, #2
 800670c:	421e      	tst	r6, r3
 800670e:	bf18      	it	ne
 8006710:	f045 0504 	orrne.w	r5, r5, #4
 8006714:	0733      	lsls	r3, r6, #28
 8006716:	bf48      	it	mi
 8006718:	f025 0504 	bicmi.w	r5, r5, #4
 800671c:	4650      	mov	r0, sl
 800671e:	bf48      	it	mi
 8006720:	f045 0508 	orrmi.w	r5, r5, #8
 8006724:	f8cd a000 	str.w	sl, [sp]
 8006728:	f7f9 fd62 	bl	80001f0 <strlen>
 800672c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006730:	2501      	movs	r5, #1
 8006732:	4628      	mov	r0, r5
 8006734:	4649      	mov	r1, r9
 8006736:	beab      	bkpt	0x00ab
 8006738:	4605      	mov	r5, r0
 800673a:	2d00      	cmp	r5, #0
 800673c:	db05      	blt.n	800674a <_swiopen+0xa2>
 800673e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006742:	4447      	add	r7, r8
 8006744:	2300      	movs	r3, #0
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	e7c4      	b.n	80066d4 <_swiopen+0x2c>
 800674a:	4628      	mov	r0, r5
 800674c:	f7ff fe94 	bl	8006478 <error>
 8006750:	4604      	mov	r4, r0
 8006752:	e7bf      	b.n	80066d4 <_swiopen+0x2c>
 8006754:	20026568 	.word	0x20026568

08006758 <_get_semihosting_exts>:
 8006758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800675c:	4606      	mov	r6, r0
 800675e:	460f      	mov	r7, r1
 8006760:	4829      	ldr	r0, [pc, #164]	@ (8006808 <_get_semihosting_exts+0xb0>)
 8006762:	2100      	movs	r1, #0
 8006764:	4615      	mov	r5, r2
 8006766:	f7ff ff9f 	bl	80066a8 <_swiopen>
 800676a:	462a      	mov	r2, r5
 800676c:	4604      	mov	r4, r0
 800676e:	2100      	movs	r1, #0
 8006770:	4630      	mov	r0, r6
 8006772:	f000 f9f6 	bl	8006b62 <memset>
 8006776:	1c63      	adds	r3, r4, #1
 8006778:	d014      	beq.n	80067a4 <_get_semihosting_exts+0x4c>
 800677a:	4620      	mov	r0, r4
 800677c:	f7ff fe62 	bl	8006444 <findslot>
 8006780:	f04f 080c 	mov.w	r8, #12
 8006784:	4681      	mov	r9, r0
 8006786:	4640      	mov	r0, r8
 8006788:	4649      	mov	r1, r9
 800678a:	beab      	bkpt	0x00ab
 800678c:	4680      	mov	r8, r0
 800678e:	4640      	mov	r0, r8
 8006790:	f7ff fe80 	bl	8006494 <checkerror>
 8006794:	2803      	cmp	r0, #3
 8006796:	dd02      	ble.n	800679e <_get_semihosting_exts+0x46>
 8006798:	1ec3      	subs	r3, r0, #3
 800679a:	42ab      	cmp	r3, r5
 800679c:	dc07      	bgt.n	80067ae <_get_semihosting_exts+0x56>
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff ff22 	bl	80065e8 <_close>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	b003      	add	sp, #12
 80067aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067ae:	2204      	movs	r2, #4
 80067b0:	eb0d 0102 	add.w	r1, sp, r2
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff fe82 	bl	80064be <_read>
 80067ba:	2803      	cmp	r0, #3
 80067bc:	ddef      	ble.n	800679e <_get_semihosting_exts+0x46>
 80067be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067c2:	2b53      	cmp	r3, #83	@ 0x53
 80067c4:	d1eb      	bne.n	800679e <_get_semihosting_exts+0x46>
 80067c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067ca:	2b48      	cmp	r3, #72	@ 0x48
 80067cc:	d1e7      	bne.n	800679e <_get_semihosting_exts+0x46>
 80067ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067d2:	2b46      	cmp	r3, #70	@ 0x46
 80067d4:	d1e3      	bne.n	800679e <_get_semihosting_exts+0x46>
 80067d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067da:	2b42      	cmp	r3, #66	@ 0x42
 80067dc:	d1df      	bne.n	800679e <_get_semihosting_exts+0x46>
 80067de:	2201      	movs	r2, #1
 80067e0:	4639      	mov	r1, r7
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff fe85 	bl	80064f2 <_swilseek>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	dbd8      	blt.n	800679e <_get_semihosting_exts+0x46>
 80067ec:	462a      	mov	r2, r5
 80067ee:	4631      	mov	r1, r6
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff fe64 	bl	80064be <_read>
 80067f6:	4605      	mov	r5, r0
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fef5 	bl	80065e8 <_close>
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff fe48 	bl	8006494 <checkerror>
 8006804:	e7d0      	b.n	80067a8 <_get_semihosting_exts+0x50>
 8006806:	bf00      	nop
 8006808:	08008850 	.word	0x08008850

0800680c <initialise_semihosting_exts>:
 800680c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800680e:	4d0a      	ldr	r5, [pc, #40]	@ (8006838 <initialise_semihosting_exts+0x2c>)
 8006810:	4c0a      	ldr	r4, [pc, #40]	@ (800683c <initialise_semihosting_exts+0x30>)
 8006812:	2100      	movs	r1, #0
 8006814:	2201      	movs	r2, #1
 8006816:	a801      	add	r0, sp, #4
 8006818:	6029      	str	r1, [r5, #0]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	f7ff ff9c 	bl	8006758 <_get_semihosting_exts>
 8006820:	2800      	cmp	r0, #0
 8006822:	dd07      	ble.n	8006834 <initialise_semihosting_exts+0x28>
 8006824:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006828:	f003 0201 	and.w	r2, r3, #1
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	602a      	str	r2, [r5, #0]
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	b003      	add	sp, #12
 8006836:	bd30      	pop	{r4, r5, pc}
 8006838:	20000720 	.word	0x20000720
 800683c:	2000071c 	.word	0x2000071c

08006840 <_has_ext_stdout_stderr>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4c04      	ldr	r4, [pc, #16]	@ (8006854 <_has_ext_stdout_stderr+0x14>)
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da01      	bge.n	800684e <_has_ext_stdout_stderr+0xe>
 800684a:	f7ff ffdf 	bl	800680c <initialise_semihosting_exts>
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	2000071c 	.word	0x2000071c

08006858 <initialise_monitor_handles>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	b085      	sub	sp, #20
 800685e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006910 <initialise_monitor_handles+0xb8>
 8006862:	f8cd 9004 	str.w	r9, [sp, #4]
 8006866:	2303      	movs	r3, #3
 8006868:	2400      	movs	r4, #0
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	af01      	add	r7, sp, #4
 800686e:	9402      	str	r4, [sp, #8]
 8006870:	2501      	movs	r5, #1
 8006872:	4628      	mov	r0, r5
 8006874:	4639      	mov	r1, r7
 8006876:	beab      	bkpt	0x00ab
 8006878:	4605      	mov	r5, r0
 800687a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006914 <initialise_monitor_handles+0xbc>
 800687e:	4623      	mov	r3, r4
 8006880:	4c20      	ldr	r4, [pc, #128]	@ (8006904 <initialise_monitor_handles+0xac>)
 8006882:	f8c8 5000 	str.w	r5, [r8]
 8006886:	f04f 32ff 	mov.w	r2, #4294967295
 800688a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800688e:	3301      	adds	r3, #1
 8006890:	2b14      	cmp	r3, #20
 8006892:	d1fa      	bne.n	800688a <initialise_monitor_handles+0x32>
 8006894:	f7ff ffd4 	bl	8006840 <_has_ext_stdout_stderr>
 8006898:	4d1b      	ldr	r5, [pc, #108]	@ (8006908 <initialise_monitor_handles+0xb0>)
 800689a:	b1d0      	cbz	r0, 80068d2 <initialise_monitor_handles+0x7a>
 800689c:	f04f 0a03 	mov.w	sl, #3
 80068a0:	2304      	movs	r3, #4
 80068a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80068a6:	2601      	movs	r6, #1
 80068a8:	f8cd a00c 	str.w	sl, [sp, #12]
 80068ac:	9302      	str	r3, [sp, #8]
 80068ae:	4630      	mov	r0, r6
 80068b0:	4639      	mov	r1, r7
 80068b2:	beab      	bkpt	0x00ab
 80068b4:	4683      	mov	fp, r0
 80068b6:	4b15      	ldr	r3, [pc, #84]	@ (800690c <initialise_monitor_handles+0xb4>)
 80068b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068bc:	f8c3 b000 	str.w	fp, [r3]
 80068c0:	2308      	movs	r3, #8
 80068c2:	f8cd a00c 	str.w	sl, [sp, #12]
 80068c6:	9302      	str	r3, [sp, #8]
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	beab      	bkpt	0x00ab
 80068ce:	4606      	mov	r6, r0
 80068d0:	602e      	str	r6, [r5, #0]
 80068d2:	682b      	ldr	r3, [r5, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	bf02      	ittt	eq
 80068d8:	4b0c      	ldreq	r3, [pc, #48]	@ (800690c <initialise_monitor_handles+0xb4>)
 80068da:	681b      	ldreq	r3, [r3, #0]
 80068dc:	602b      	streq	r3, [r5, #0]
 80068de:	2600      	movs	r6, #0
 80068e0:	f8d8 3000 	ldr.w	r3, [r8]
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	6066      	str	r6, [r4, #4]
 80068e8:	f7ff ffaa 	bl	8006840 <_has_ext_stdout_stderr>
 80068ec:	b130      	cbz	r0, 80068fc <initialise_monitor_handles+0xa4>
 80068ee:	4b07      	ldr	r3, [pc, #28]	@ (800690c <initialise_monitor_handles+0xb4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80068f6:	682b      	ldr	r3, [r5, #0]
 80068f8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80068fc:	b005      	add	sp, #20
 80068fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006902:	bf00      	nop
 8006904:	20026568 	.word	0x20026568
 8006908:	2002655c 	.word	0x2002655c
 800690c:	20026560 	.word	0x20026560
 8006910:	08008866 	.word	0x08008866
 8006914:	20026564 	.word	0x20026564

08006918 <std>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	e9c0 3300 	strd	r3, r3, [r0]
 8006922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006926:	6083      	str	r3, [r0, #8]
 8006928:	8181      	strh	r1, [r0, #12]
 800692a:	6643      	str	r3, [r0, #100]	@ 0x64
 800692c:	81c2      	strh	r2, [r0, #14]
 800692e:	6183      	str	r3, [r0, #24]
 8006930:	4619      	mov	r1, r3
 8006932:	2208      	movs	r2, #8
 8006934:	305c      	adds	r0, #92	@ 0x5c
 8006936:	f000 f914 	bl	8006b62 <memset>
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <std+0x58>)
 800693c:	6263      	str	r3, [r4, #36]	@ 0x24
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <std+0x5c>)
 8006940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006942:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <std+0x60>)
 8006944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006946:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <std+0x64>)
 8006948:	6323      	str	r3, [r4, #48]	@ 0x30
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <std+0x68>)
 800694c:	6224      	str	r4, [r4, #32]
 800694e:	429c      	cmp	r4, r3
 8006950:	d006      	beq.n	8006960 <std+0x48>
 8006952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006956:	4294      	cmp	r4, r2
 8006958:	d002      	beq.n	8006960 <std+0x48>
 800695a:	33d0      	adds	r3, #208	@ 0xd0
 800695c:	429c      	cmp	r4, r3
 800695e:	d105      	bne.n	800696c <std+0x54>
 8006960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f000 b974 	b.w	8006c54 <__retarget_lock_init_recursive>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	bf00      	nop
 8006970:	08006add 	.word	0x08006add
 8006974:	08006aff 	.word	0x08006aff
 8006978:	08006b37 	.word	0x08006b37
 800697c:	08006b5b 	.word	0x08006b5b
 8006980:	20026608 	.word	0x20026608

08006984 <stdio_exit_handler>:
 8006984:	4a02      	ldr	r2, [pc, #8]	@ (8006990 <stdio_exit_handler+0xc>)
 8006986:	4903      	ldr	r1, [pc, #12]	@ (8006994 <stdio_exit_handler+0x10>)
 8006988:	4803      	ldr	r0, [pc, #12]	@ (8006998 <stdio_exit_handler+0x14>)
 800698a:	f000 b869 	b.w	8006a60 <_fwalk_sglue>
 800698e:	bf00      	nop
 8006990:	20000724 	.word	0x20000724
 8006994:	0800753d 	.word	0x0800753d
 8006998:	20000734 	.word	0x20000734

0800699c <cleanup_stdio>:
 800699c:	6841      	ldr	r1, [r0, #4]
 800699e:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <cleanup_stdio+0x34>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	d001      	beq.n	80069ac <cleanup_stdio+0x10>
 80069a8:	f000 fdc8 	bl	800753c <_fflush_r>
 80069ac:	68a1      	ldr	r1, [r4, #8]
 80069ae:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <cleanup_stdio+0x38>)
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <cleanup_stdio+0x1e>
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fdc1 	bl	800753c <_fflush_r>
 80069ba:	68e1      	ldr	r1, [r4, #12]
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <cleanup_stdio+0x3c>)
 80069be:	4299      	cmp	r1, r3
 80069c0:	d004      	beq.n	80069cc <cleanup_stdio+0x30>
 80069c2:	4620      	mov	r0, r4
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f000 bdb8 	b.w	800753c <_fflush_r>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	20026608 	.word	0x20026608
 80069d4:	20026670 	.word	0x20026670
 80069d8:	200266d8 	.word	0x200266d8

080069dc <global_stdio_init.part.0>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <global_stdio_init.part.0+0x30>)
 80069e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006a10 <global_stdio_init.part.0+0x34>)
 80069e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a14 <global_stdio_init.part.0+0x38>)
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	4620      	mov	r0, r4
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	f7ff ff94 	bl	8006918 <std>
 80069f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069f4:	2201      	movs	r2, #1
 80069f6:	2109      	movs	r1, #9
 80069f8:	f7ff ff8e 	bl	8006918 <std>
 80069fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a00:	2202      	movs	r2, #2
 8006a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff bf86 	b.w	8006918 <std>
 8006a0c:	20026740 	.word	0x20026740
 8006a10:	20026608 	.word	0x20026608
 8006a14:	08006985 	.word	0x08006985

08006a18 <__sfp_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	@ (8006a20 <__sfp_lock_acquire+0x8>)
 8006a1a:	f000 b91c 	b.w	8006c56 <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20026749 	.word	0x20026749

08006a24 <__sfp_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	@ (8006a2c <__sfp_lock_release+0x8>)
 8006a26:	f000 b917 	b.w	8006c58 <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20026749 	.word	0x20026749

08006a30 <__sinit>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	f7ff fff0 	bl	8006a18 <__sfp_lock_acquire>
 8006a38:	6a23      	ldr	r3, [r4, #32]
 8006a3a:	b11b      	cbz	r3, 8006a44 <__sinit+0x14>
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f7ff bff0 	b.w	8006a24 <__sfp_lock_release>
 8006a44:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <__sinit+0x28>)
 8006a46:	6223      	str	r3, [r4, #32]
 8006a48:	4b04      	ldr	r3, [pc, #16]	@ (8006a5c <__sinit+0x2c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f5      	bne.n	8006a3c <__sinit+0xc>
 8006a50:	f7ff ffc4 	bl	80069dc <global_stdio_init.part.0>
 8006a54:	e7f2      	b.n	8006a3c <__sinit+0xc>
 8006a56:	bf00      	nop
 8006a58:	0800699d 	.word	0x0800699d
 8006a5c:	20026740 	.word	0x20026740

08006a60 <_fwalk_sglue>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4607      	mov	r7, r0
 8006a66:	4688      	mov	r8, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a70:	f1b9 0901 	subs.w	r9, r9, #1
 8006a74:	d505      	bpl.n	8006a82 <_fwalk_sglue+0x22>
 8006a76:	6824      	ldr	r4, [r4, #0]
 8006a78:	2c00      	cmp	r4, #0
 8006a7a:	d1f7      	bne.n	8006a6c <_fwalk_sglue+0xc>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d907      	bls.n	8006a98 <_fwalk_sglue+0x38>
 8006a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	d003      	beq.n	8006a98 <_fwalk_sglue+0x38>
 8006a90:	4629      	mov	r1, r5
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	4306      	orrs	r6, r0
 8006a98:	3568      	adds	r5, #104	@ 0x68
 8006a9a:	e7e9      	b.n	8006a70 <_fwalk_sglue+0x10>

08006a9c <siprintf>:
 8006a9c:	b40e      	push	{r1, r2, r3}
 8006a9e:	b500      	push	{lr}
 8006aa0:	b09c      	sub	sp, #112	@ 0x70
 8006aa2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006aa4:	9002      	str	r0, [sp, #8]
 8006aa6:	9006      	str	r0, [sp, #24]
 8006aa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006aac:	4809      	ldr	r0, [pc, #36]	@ (8006ad4 <siprintf+0x38>)
 8006aae:	9107      	str	r1, [sp, #28]
 8006ab0:	9104      	str	r1, [sp, #16]
 8006ab2:	4909      	ldr	r1, [pc, #36]	@ (8006ad8 <siprintf+0x3c>)
 8006ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab8:	9105      	str	r1, [sp, #20]
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	a902      	add	r1, sp, #8
 8006ac0:	f000 fa2e 	bl	8006f20 <_svfiprintf_r>
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	b01c      	add	sp, #112	@ 0x70
 8006acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad0:	b003      	add	sp, #12
 8006ad2:	4770      	bx	lr
 8006ad4:	20000730 	.word	0x20000730
 8006ad8:	ffff0208 	.word	0xffff0208

08006adc <__sread>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae4:	f000 f868 	bl	8006bb8 <_read_r>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	bfab      	itete	ge
 8006aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006aee:	89a3      	ldrhlt	r3, [r4, #12]
 8006af0:	181b      	addge	r3, r3, r0
 8006af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006af6:	bfac      	ite	ge
 8006af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006afa:	81a3      	strhlt	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__swrite>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	461f      	mov	r7, r3
 8006b04:	898b      	ldrh	r3, [r1, #12]
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	d505      	bpl.n	8006b1c <__swrite+0x1e>
 8006b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b14:	2302      	movs	r3, #2
 8006b16:	2200      	movs	r2, #0
 8006b18:	f000 f83c 	bl	8006b94 <_lseek_r>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b32:	f000 b853 	b.w	8006bdc <_write_r>

08006b36 <__sseek>:
 8006b36:	b510      	push	{r4, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3e:	f000 f829 	bl	8006b94 <_lseek_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	bf15      	itete	ne
 8006b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b52:	81a3      	strheq	r3, [r4, #12]
 8006b54:	bf18      	it	ne
 8006b56:	81a3      	strhne	r3, [r4, #12]
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <__sclose>:
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 b809 	b.w	8006b74 <_close_r>

08006b62 <memset>:
 8006b62:	4402      	add	r2, r0
 8006b64:	4603      	mov	r3, r0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d100      	bne.n	8006b6c <memset+0xa>
 8006b6a:	4770      	bx	lr
 8006b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b70:	e7f9      	b.n	8006b66 <memset+0x4>
	...

08006b74 <_close_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	@ (8006b90 <_close_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7ff fd32 	bl	80065e8 <_close>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_close_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_close_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20026744 	.word	0x20026744

08006b94 <_lseek_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d07      	ldr	r5, [pc, #28]	@ (8006bb4 <_lseek_r+0x20>)
 8006b98:	4604      	mov	r4, r0
 8006b9a:	4608      	mov	r0, r1
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	602a      	str	r2, [r5, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f7ff fce1 	bl	800656a <_lseek>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_lseek_r+0x1e>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_lseek_r+0x1e>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20026744 	.word	0x20026744

08006bb8 <_read_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	@ (8006bd8 <_read_r+0x20>)
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7ff fc79 	bl	80064be <_read>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_read_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_read_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20026744 	.word	0x20026744

08006bdc <_write_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	@ (8006bfc <_write_r+0x20>)
 8006be0:	4604      	mov	r4, r0
 8006be2:	4608      	mov	r0, r1
 8006be4:	4611      	mov	r1, r2
 8006be6:	2200      	movs	r2, #0
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7ff fccf 	bl	800658e <_write>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_write_r+0x1e>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_write_r+0x1e>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20026744 	.word	0x20026744

08006c00 <__errno>:
 8006c00:	4b01      	ldr	r3, [pc, #4]	@ (8006c08 <__errno+0x8>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000730 	.word	0x20000730

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c44 <__libc_init_array+0x38>)
 8006c10:	4c0d      	ldr	r4, [pc, #52]	@ (8006c48 <__libc_init_array+0x3c>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	2600      	movs	r6, #0
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c4c <__libc_init_array+0x40>)
 8006c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c50 <__libc_init_array+0x44>)
 8006c20:	f000 fd14 	bl	800764c <_init>
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	2600      	movs	r6, #0
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	080088a8 	.word	0x080088a8
 8006c48:	080088a8 	.word	0x080088a8
 8006c4c:	080088a8 	.word	0x080088a8
 8006c50:	080088ac 	.word	0x080088ac

08006c54 <__retarget_lock_init_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_acquire_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <__retarget_lock_release_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <memcpy>:
 8006c5a:	440a      	add	r2, r1
 8006c5c:	4291      	cmp	r1, r2
 8006c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c62:	d100      	bne.n	8006c66 <memcpy+0xc>
 8006c64:	4770      	bx	lr
 8006c66:	b510      	push	{r4, lr}
 8006c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c70:	4291      	cmp	r1, r2
 8006c72:	d1f9      	bne.n	8006c68 <memcpy+0xe>
 8006c74:	bd10      	pop	{r4, pc}
	...

08006c78 <_free_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	d041      	beq.n	8006d04 <_free_r+0x8c>
 8006c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c84:	1f0c      	subs	r4, r1, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfb8      	it	lt
 8006c8a:	18e4      	addlt	r4, r4, r3
 8006c8c:	f000 f8e0 	bl	8006e50 <__malloc_lock>
 8006c90:	4a1d      	ldr	r2, [pc, #116]	@ (8006d08 <_free_r+0x90>)
 8006c92:	6813      	ldr	r3, [r2, #0]
 8006c94:	b933      	cbnz	r3, 8006ca4 <_free_r+0x2c>
 8006c96:	6063      	str	r3, [r4, #4]
 8006c98:	6014      	str	r4, [r2, #0]
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca0:	f000 b8dc 	b.w	8006e5c <__malloc_unlock>
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	d908      	bls.n	8006cba <_free_r+0x42>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	1821      	adds	r1, r4, r0
 8006cac:	428b      	cmp	r3, r1
 8006cae:	bf01      	itttt	eq
 8006cb0:	6819      	ldreq	r1, [r3, #0]
 8006cb2:	685b      	ldreq	r3, [r3, #4]
 8006cb4:	1809      	addeq	r1, r1, r0
 8006cb6:	6021      	streq	r1, [r4, #0]
 8006cb8:	e7ed      	b.n	8006c96 <_free_r+0x1e>
 8006cba:	461a      	mov	r2, r3
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	b10b      	cbz	r3, 8006cc4 <_free_r+0x4c>
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	d9fa      	bls.n	8006cba <_free_r+0x42>
 8006cc4:	6811      	ldr	r1, [r2, #0]
 8006cc6:	1850      	adds	r0, r2, r1
 8006cc8:	42a0      	cmp	r0, r4
 8006cca:	d10b      	bne.n	8006ce4 <_free_r+0x6c>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	4401      	add	r1, r0
 8006cd0:	1850      	adds	r0, r2, r1
 8006cd2:	4283      	cmp	r3, r0
 8006cd4:	6011      	str	r1, [r2, #0]
 8006cd6:	d1e0      	bne.n	8006c9a <_free_r+0x22>
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	6053      	str	r3, [r2, #4]
 8006cde:	4408      	add	r0, r1
 8006ce0:	6010      	str	r0, [r2, #0]
 8006ce2:	e7da      	b.n	8006c9a <_free_r+0x22>
 8006ce4:	d902      	bls.n	8006cec <_free_r+0x74>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	e7d6      	b.n	8006c9a <_free_r+0x22>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	1821      	adds	r1, r4, r0
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	bf04      	itt	eq
 8006cf4:	6819      	ldreq	r1, [r3, #0]
 8006cf6:	685b      	ldreq	r3, [r3, #4]
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	bf04      	itt	eq
 8006cfc:	1809      	addeq	r1, r1, r0
 8006cfe:	6021      	streq	r1, [r4, #0]
 8006d00:	6054      	str	r4, [r2, #4]
 8006d02:	e7ca      	b.n	8006c9a <_free_r+0x22>
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	bf00      	nop
 8006d08:	20026750 	.word	0x20026750

08006d0c <sbrk_aligned>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006d4c <sbrk_aligned+0x40>)
 8006d10:	460c      	mov	r4, r1
 8006d12:	6831      	ldr	r1, [r6, #0]
 8006d14:	4605      	mov	r5, r0
 8006d16:	b911      	cbnz	r1, 8006d1e <sbrk_aligned+0x12>
 8006d18:	f000 fc52 	bl	80075c0 <_sbrk_r>
 8006d1c:	6030      	str	r0, [r6, #0]
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fc4d 	bl	80075c0 <_sbrk_r>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	d103      	bne.n	8006d32 <sbrk_aligned+0x26>
 8006d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d2e:	4620      	mov	r0, r4
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
 8006d32:	1cc4      	adds	r4, r0, #3
 8006d34:	f024 0403 	bic.w	r4, r4, #3
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d0f8      	beq.n	8006d2e <sbrk_aligned+0x22>
 8006d3c:	1a21      	subs	r1, r4, r0
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 fc3e 	bl	80075c0 <_sbrk_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d1f2      	bne.n	8006d2e <sbrk_aligned+0x22>
 8006d48:	e7ef      	b.n	8006d2a <sbrk_aligned+0x1e>
 8006d4a:	bf00      	nop
 8006d4c:	2002674c 	.word	0x2002674c

08006d50 <_malloc_r>:
 8006d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d54:	1ccd      	adds	r5, r1, #3
 8006d56:	f025 0503 	bic.w	r5, r5, #3
 8006d5a:	3508      	adds	r5, #8
 8006d5c:	2d0c      	cmp	r5, #12
 8006d5e:	bf38      	it	cc
 8006d60:	250c      	movcc	r5, #12
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	4606      	mov	r6, r0
 8006d66:	db01      	blt.n	8006d6c <_malloc_r+0x1c>
 8006d68:	42a9      	cmp	r1, r5
 8006d6a:	d904      	bls.n	8006d76 <_malloc_r+0x26>
 8006d6c:	230c      	movs	r3, #12
 8006d6e:	6033      	str	r3, [r6, #0]
 8006d70:	2000      	movs	r0, #0
 8006d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e4c <_malloc_r+0xfc>
 8006d7a:	f000 f869 	bl	8006e50 <__malloc_lock>
 8006d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d82:	461c      	mov	r4, r3
 8006d84:	bb44      	cbnz	r4, 8006dd8 <_malloc_r+0x88>
 8006d86:	4629      	mov	r1, r5
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f7ff ffbf 	bl	8006d0c <sbrk_aligned>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	4604      	mov	r4, r0
 8006d92:	d158      	bne.n	8006e46 <_malloc_r+0xf6>
 8006d94:	f8d8 4000 	ldr.w	r4, [r8]
 8006d98:	4627      	mov	r7, r4
 8006d9a:	2f00      	cmp	r7, #0
 8006d9c:	d143      	bne.n	8006e26 <_malloc_r+0xd6>
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d04b      	beq.n	8006e3a <_malloc_r+0xea>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	4639      	mov	r1, r7
 8006da6:	4630      	mov	r0, r6
 8006da8:	eb04 0903 	add.w	r9, r4, r3
 8006dac:	f000 fc08 	bl	80075c0 <_sbrk_r>
 8006db0:	4581      	cmp	r9, r0
 8006db2:	d142      	bne.n	8006e3a <_malloc_r+0xea>
 8006db4:	6821      	ldr	r1, [r4, #0]
 8006db6:	1a6d      	subs	r5, r5, r1
 8006db8:	4629      	mov	r1, r5
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ffa6 	bl	8006d0c <sbrk_aligned>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d03a      	beq.n	8006e3a <_malloc_r+0xea>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	442b      	add	r3, r5
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	f8d8 3000 	ldr.w	r3, [r8]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	bb62      	cbnz	r2, 8006e2c <_malloc_r+0xdc>
 8006dd2:	f8c8 7000 	str.w	r7, [r8]
 8006dd6:	e00f      	b.n	8006df8 <_malloc_r+0xa8>
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	1b52      	subs	r2, r2, r5
 8006ddc:	d420      	bmi.n	8006e20 <_malloc_r+0xd0>
 8006dde:	2a0b      	cmp	r2, #11
 8006de0:	d917      	bls.n	8006e12 <_malloc_r+0xc2>
 8006de2:	1961      	adds	r1, r4, r5
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	6025      	str	r5, [r4, #0]
 8006de8:	bf18      	it	ne
 8006dea:	6059      	strne	r1, [r3, #4]
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	bf08      	it	eq
 8006df0:	f8c8 1000 	streq.w	r1, [r8]
 8006df4:	5162      	str	r2, [r4, r5]
 8006df6:	604b      	str	r3, [r1, #4]
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f000 f82f 	bl	8006e5c <__malloc_unlock>
 8006dfe:	f104 000b 	add.w	r0, r4, #11
 8006e02:	1d23      	adds	r3, r4, #4
 8006e04:	f020 0007 	bic.w	r0, r0, #7
 8006e08:	1ac2      	subs	r2, r0, r3
 8006e0a:	bf1c      	itt	ne
 8006e0c:	1a1b      	subne	r3, r3, r0
 8006e0e:	50a3      	strne	r3, [r4, r2]
 8006e10:	e7af      	b.n	8006d72 <_malloc_r+0x22>
 8006e12:	6862      	ldr	r2, [r4, #4]
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	bf0c      	ite	eq
 8006e18:	f8c8 2000 	streq.w	r2, [r8]
 8006e1c:	605a      	strne	r2, [r3, #4]
 8006e1e:	e7eb      	b.n	8006df8 <_malloc_r+0xa8>
 8006e20:	4623      	mov	r3, r4
 8006e22:	6864      	ldr	r4, [r4, #4]
 8006e24:	e7ae      	b.n	8006d84 <_malloc_r+0x34>
 8006e26:	463c      	mov	r4, r7
 8006e28:	687f      	ldr	r7, [r7, #4]
 8006e2a:	e7b6      	b.n	8006d9a <_malloc_r+0x4a>
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d1fb      	bne.n	8006e2c <_malloc_r+0xdc>
 8006e34:	2300      	movs	r3, #0
 8006e36:	6053      	str	r3, [r2, #4]
 8006e38:	e7de      	b.n	8006df8 <_malloc_r+0xa8>
 8006e3a:	230c      	movs	r3, #12
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f80c 	bl	8006e5c <__malloc_unlock>
 8006e44:	e794      	b.n	8006d70 <_malloc_r+0x20>
 8006e46:	6005      	str	r5, [r0, #0]
 8006e48:	e7d6      	b.n	8006df8 <_malloc_r+0xa8>
 8006e4a:	bf00      	nop
 8006e4c:	20026750 	.word	0x20026750

08006e50 <__malloc_lock>:
 8006e50:	4801      	ldr	r0, [pc, #4]	@ (8006e58 <__malloc_lock+0x8>)
 8006e52:	f7ff bf00 	b.w	8006c56 <__retarget_lock_acquire_recursive>
 8006e56:	bf00      	nop
 8006e58:	20026748 	.word	0x20026748

08006e5c <__malloc_unlock>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	@ (8006e64 <__malloc_unlock+0x8>)
 8006e5e:	f7ff befb 	b.w	8006c58 <__retarget_lock_release_recursive>
 8006e62:	bf00      	nop
 8006e64:	20026748 	.word	0x20026748

08006e68 <__ssputs_r>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	688e      	ldr	r6, [r1, #8]
 8006e6e:	461f      	mov	r7, r3
 8006e70:	42be      	cmp	r6, r7
 8006e72:	680b      	ldr	r3, [r1, #0]
 8006e74:	4682      	mov	sl, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	4690      	mov	r8, r2
 8006e7a:	d82d      	bhi.n	8006ed8 <__ssputs_r+0x70>
 8006e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e84:	d026      	beq.n	8006ed4 <__ssputs_r+0x6c>
 8006e86:	6965      	ldr	r5, [r4, #20]
 8006e88:	6909      	ldr	r1, [r1, #16]
 8006e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e8e:	eba3 0901 	sub.w	r9, r3, r1
 8006e92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e96:	1c7b      	adds	r3, r7, #1
 8006e98:	444b      	add	r3, r9
 8006e9a:	106d      	asrs	r5, r5, #1
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	bf38      	it	cc
 8006ea0:	461d      	movcc	r5, r3
 8006ea2:	0553      	lsls	r3, r2, #21
 8006ea4:	d527      	bpl.n	8006ef6 <__ssputs_r+0x8e>
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7ff ff52 	bl	8006d50 <_malloc_r>
 8006eac:	4606      	mov	r6, r0
 8006eae:	b360      	cbz	r0, 8006f0a <__ssputs_r+0xa2>
 8006eb0:	6921      	ldr	r1, [r4, #16]
 8006eb2:	464a      	mov	r2, r9
 8006eb4:	f7ff fed1 	bl	8006c5a <memcpy>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	6126      	str	r6, [r4, #16]
 8006ec6:	6165      	str	r5, [r4, #20]
 8006ec8:	444e      	add	r6, r9
 8006eca:	eba5 0509 	sub.w	r5, r5, r9
 8006ece:	6026      	str	r6, [r4, #0]
 8006ed0:	60a5      	str	r5, [r4, #8]
 8006ed2:	463e      	mov	r6, r7
 8006ed4:	42be      	cmp	r6, r7
 8006ed6:	d900      	bls.n	8006eda <__ssputs_r+0x72>
 8006ed8:	463e      	mov	r6, r7
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	4632      	mov	r2, r6
 8006ede:	4641      	mov	r1, r8
 8006ee0:	f000 fb54 	bl	800758c <memmove>
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	1b9b      	subs	r3, r3, r6
 8006ee8:	60a3      	str	r3, [r4, #8]
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	4433      	add	r3, r6
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef6:	462a      	mov	r2, r5
 8006ef8:	f000 fb72 	bl	80075e0 <_realloc_r>
 8006efc:	4606      	mov	r6, r0
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d1e0      	bne.n	8006ec4 <__ssputs_r+0x5c>
 8006f02:	6921      	ldr	r1, [r4, #16]
 8006f04:	4650      	mov	r0, sl
 8006f06:	f7ff feb7 	bl	8006c78 <_free_r>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	f8ca 3000 	str.w	r3, [sl]
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f16:	81a3      	strh	r3, [r4, #12]
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	e7e9      	b.n	8006ef2 <__ssputs_r+0x8a>
	...

08006f20 <_svfiprintf_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	4698      	mov	r8, r3
 8006f26:	898b      	ldrh	r3, [r1, #12]
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	b09d      	sub	sp, #116	@ 0x74
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	4614      	mov	r4, r2
 8006f32:	d510      	bpl.n	8006f56 <_svfiprintf_r+0x36>
 8006f34:	690b      	ldr	r3, [r1, #16]
 8006f36:	b973      	cbnz	r3, 8006f56 <_svfiprintf_r+0x36>
 8006f38:	2140      	movs	r1, #64	@ 0x40
 8006f3a:	f7ff ff09 	bl	8006d50 <_malloc_r>
 8006f3e:	6028      	str	r0, [r5, #0]
 8006f40:	6128      	str	r0, [r5, #16]
 8006f42:	b930      	cbnz	r0, 8006f52 <_svfiprintf_r+0x32>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b01d      	add	sp, #116	@ 0x74
 8006f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f52:	2340      	movs	r3, #64	@ 0x40
 8006f54:	616b      	str	r3, [r5, #20]
 8006f56:	2300      	movs	r3, #0
 8006f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5a:	2320      	movs	r3, #32
 8006f5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f64:	2330      	movs	r3, #48	@ 0x30
 8006f66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007104 <_svfiprintf_r+0x1e4>
 8006f6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f6e:	f04f 0901 	mov.w	r9, #1
 8006f72:	4623      	mov	r3, r4
 8006f74:	469a      	mov	sl, r3
 8006f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f7a:	b10a      	cbz	r2, 8006f80 <_svfiprintf_r+0x60>
 8006f7c:	2a25      	cmp	r2, #37	@ 0x25
 8006f7e:	d1f9      	bne.n	8006f74 <_svfiprintf_r+0x54>
 8006f80:	ebba 0b04 	subs.w	fp, sl, r4
 8006f84:	d00b      	beq.n	8006f9e <_svfiprintf_r+0x7e>
 8006f86:	465b      	mov	r3, fp
 8006f88:	4622      	mov	r2, r4
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7ff ff6b 	bl	8006e68 <__ssputs_r>
 8006f92:	3001      	adds	r0, #1
 8006f94:	f000 80a7 	beq.w	80070e6 <_svfiprintf_r+0x1c6>
 8006f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f9a:	445a      	add	r2, fp
 8006f9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 809f 	beq.w	80070e6 <_svfiprintf_r+0x1c6>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295
 8006fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb2:	f10a 0a01 	add.w	sl, sl, #1
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	9307      	str	r3, [sp, #28]
 8006fba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fc0:	4654      	mov	r4, sl
 8006fc2:	2205      	movs	r2, #5
 8006fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc8:	484e      	ldr	r0, [pc, #312]	@ (8007104 <_svfiprintf_r+0x1e4>)
 8006fca:	f7f9 f919 	bl	8000200 <memchr>
 8006fce:	9a04      	ldr	r2, [sp, #16]
 8006fd0:	b9d8      	cbnz	r0, 800700a <_svfiprintf_r+0xea>
 8006fd2:	06d0      	lsls	r0, r2, #27
 8006fd4:	bf44      	itt	mi
 8006fd6:	2320      	movmi	r3, #32
 8006fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fdc:	0711      	lsls	r1, r2, #28
 8006fde:	bf44      	itt	mi
 8006fe0:	232b      	movmi	r3, #43	@ 0x2b
 8006fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fec:	d015      	beq.n	800701a <_svfiprintf_r+0xfa>
 8006fee:	9a07      	ldr	r2, [sp, #28]
 8006ff0:	4654      	mov	r4, sl
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f04f 0c0a 	mov.w	ip, #10
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ffe:	3b30      	subs	r3, #48	@ 0x30
 8007000:	2b09      	cmp	r3, #9
 8007002:	d94b      	bls.n	800709c <_svfiprintf_r+0x17c>
 8007004:	b1b0      	cbz	r0, 8007034 <_svfiprintf_r+0x114>
 8007006:	9207      	str	r2, [sp, #28]
 8007008:	e014      	b.n	8007034 <_svfiprintf_r+0x114>
 800700a:	eba0 0308 	sub.w	r3, r0, r8
 800700e:	fa09 f303 	lsl.w	r3, r9, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	46a2      	mov	sl, r4
 8007018:	e7d2      	b.n	8006fc0 <_svfiprintf_r+0xa0>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	1d19      	adds	r1, r3, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	9103      	str	r1, [sp, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	bfbb      	ittet	lt
 8007026:	425b      	neglt	r3, r3
 8007028:	f042 0202 	orrlt.w	r2, r2, #2
 800702c:	9307      	strge	r3, [sp, #28]
 800702e:	9307      	strlt	r3, [sp, #28]
 8007030:	bfb8      	it	lt
 8007032:	9204      	strlt	r2, [sp, #16]
 8007034:	7823      	ldrb	r3, [r4, #0]
 8007036:	2b2e      	cmp	r3, #46	@ 0x2e
 8007038:	d10a      	bne.n	8007050 <_svfiprintf_r+0x130>
 800703a:	7863      	ldrb	r3, [r4, #1]
 800703c:	2b2a      	cmp	r3, #42	@ 0x2a
 800703e:	d132      	bne.n	80070a6 <_svfiprintf_r+0x186>
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	9203      	str	r2, [sp, #12]
 8007048:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800704c:	3402      	adds	r4, #2
 800704e:	9305      	str	r3, [sp, #20]
 8007050:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007114 <_svfiprintf_r+0x1f4>
 8007054:	7821      	ldrb	r1, [r4, #0]
 8007056:	2203      	movs	r2, #3
 8007058:	4650      	mov	r0, sl
 800705a:	f7f9 f8d1 	bl	8000200 <memchr>
 800705e:	b138      	cbz	r0, 8007070 <_svfiprintf_r+0x150>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	eba0 000a 	sub.w	r0, r0, sl
 8007066:	2240      	movs	r2, #64	@ 0x40
 8007068:	4082      	lsls	r2, r0
 800706a:	4313      	orrs	r3, r2
 800706c:	3401      	adds	r4, #1
 800706e:	9304      	str	r3, [sp, #16]
 8007070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007074:	4824      	ldr	r0, [pc, #144]	@ (8007108 <_svfiprintf_r+0x1e8>)
 8007076:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800707a:	2206      	movs	r2, #6
 800707c:	f7f9 f8c0 	bl	8000200 <memchr>
 8007080:	2800      	cmp	r0, #0
 8007082:	d036      	beq.n	80070f2 <_svfiprintf_r+0x1d2>
 8007084:	4b21      	ldr	r3, [pc, #132]	@ (800710c <_svfiprintf_r+0x1ec>)
 8007086:	bb1b      	cbnz	r3, 80070d0 <_svfiprintf_r+0x1b0>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	3307      	adds	r3, #7
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007096:	4433      	add	r3, r6
 8007098:	9309      	str	r3, [sp, #36]	@ 0x24
 800709a:	e76a      	b.n	8006f72 <_svfiprintf_r+0x52>
 800709c:	fb0c 3202 	mla	r2, ip, r2, r3
 80070a0:	460c      	mov	r4, r1
 80070a2:	2001      	movs	r0, #1
 80070a4:	e7a8      	b.n	8006ff8 <_svfiprintf_r+0xd8>
 80070a6:	2300      	movs	r3, #0
 80070a8:	3401      	adds	r4, #1
 80070aa:	9305      	str	r3, [sp, #20]
 80070ac:	4619      	mov	r1, r3
 80070ae:	f04f 0c0a 	mov.w	ip, #10
 80070b2:	4620      	mov	r0, r4
 80070b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b8:	3a30      	subs	r2, #48	@ 0x30
 80070ba:	2a09      	cmp	r2, #9
 80070bc:	d903      	bls.n	80070c6 <_svfiprintf_r+0x1a6>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c6      	beq.n	8007050 <_svfiprintf_r+0x130>
 80070c2:	9105      	str	r1, [sp, #20]
 80070c4:	e7c4      	b.n	8007050 <_svfiprintf_r+0x130>
 80070c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ca:	4604      	mov	r4, r0
 80070cc:	2301      	movs	r3, #1
 80070ce:	e7f0      	b.n	80070b2 <_svfiprintf_r+0x192>
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	462a      	mov	r2, r5
 80070d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007110 <_svfiprintf_r+0x1f0>)
 80070d8:	a904      	add	r1, sp, #16
 80070da:	4638      	mov	r0, r7
 80070dc:	f3af 8000 	nop.w
 80070e0:	1c42      	adds	r2, r0, #1
 80070e2:	4606      	mov	r6, r0
 80070e4:	d1d6      	bne.n	8007094 <_svfiprintf_r+0x174>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	065b      	lsls	r3, r3, #25
 80070ea:	f53f af2d 	bmi.w	8006f48 <_svfiprintf_r+0x28>
 80070ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070f0:	e72c      	b.n	8006f4c <_svfiprintf_r+0x2c>
 80070f2:	ab03      	add	r3, sp, #12
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	462a      	mov	r2, r5
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <_svfiprintf_r+0x1f0>)
 80070fa:	a904      	add	r1, sp, #16
 80070fc:	4638      	mov	r0, r7
 80070fe:	f000 f879 	bl	80071f4 <_printf_i>
 8007102:	e7ed      	b.n	80070e0 <_svfiprintf_r+0x1c0>
 8007104:	0800886a 	.word	0x0800886a
 8007108:	08008874 	.word	0x08008874
 800710c:	00000000 	.word	0x00000000
 8007110:	08006e69 	.word	0x08006e69
 8007114:	08008870 	.word	0x08008870

08007118 <_printf_common>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	4616      	mov	r6, r2
 800711e:	4698      	mov	r8, r3
 8007120:	688a      	ldr	r2, [r1, #8]
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007128:	4293      	cmp	r3, r2
 800712a:	bfb8      	it	lt
 800712c:	4613      	movlt	r3, r2
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007134:	4607      	mov	r7, r0
 8007136:	460c      	mov	r4, r1
 8007138:	b10a      	cbz	r2, 800713e <_printf_common+0x26>
 800713a:	3301      	adds	r3, #1
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	0699      	lsls	r1, r3, #26
 8007142:	bf42      	ittt	mi
 8007144:	6833      	ldrmi	r3, [r6, #0]
 8007146:	3302      	addmi	r3, #2
 8007148:	6033      	strmi	r3, [r6, #0]
 800714a:	6825      	ldr	r5, [r4, #0]
 800714c:	f015 0506 	ands.w	r5, r5, #6
 8007150:	d106      	bne.n	8007160 <_printf_common+0x48>
 8007152:	f104 0a19 	add.w	sl, r4, #25
 8007156:	68e3      	ldr	r3, [r4, #12]
 8007158:	6832      	ldr	r2, [r6, #0]
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	42ab      	cmp	r3, r5
 800715e:	dc26      	bgt.n	80071ae <_printf_common+0x96>
 8007160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	3b00      	subs	r3, #0
 8007168:	bf18      	it	ne
 800716a:	2301      	movne	r3, #1
 800716c:	0692      	lsls	r2, r2, #26
 800716e:	d42b      	bmi.n	80071c8 <_printf_common+0xb0>
 8007170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007174:	4641      	mov	r1, r8
 8007176:	4638      	mov	r0, r7
 8007178:	47c8      	blx	r9
 800717a:	3001      	adds	r0, #1
 800717c:	d01e      	beq.n	80071bc <_printf_common+0xa4>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	f003 0306 	and.w	r3, r3, #6
 8007186:	2b04      	cmp	r3, #4
 8007188:	bf02      	ittt	eq
 800718a:	68e5      	ldreq	r5, [r4, #12]
 800718c:	6833      	ldreq	r3, [r6, #0]
 800718e:	1aed      	subeq	r5, r5, r3
 8007190:	68a3      	ldr	r3, [r4, #8]
 8007192:	bf0c      	ite	eq
 8007194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007198:	2500      	movne	r5, #0
 800719a:	4293      	cmp	r3, r2
 800719c:	bfc4      	itt	gt
 800719e:	1a9b      	subgt	r3, r3, r2
 80071a0:	18ed      	addgt	r5, r5, r3
 80071a2:	2600      	movs	r6, #0
 80071a4:	341a      	adds	r4, #26
 80071a6:	42b5      	cmp	r5, r6
 80071a8:	d11a      	bne.n	80071e0 <_printf_common+0xc8>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e008      	b.n	80071c0 <_printf_common+0xa8>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4652      	mov	r2, sl
 80071b2:	4641      	mov	r1, r8
 80071b4:	4638      	mov	r0, r7
 80071b6:	47c8      	blx	r9
 80071b8:	3001      	adds	r0, #1
 80071ba:	d103      	bne.n	80071c4 <_printf_common+0xac>
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c4:	3501      	adds	r5, #1
 80071c6:	e7c6      	b.n	8007156 <_printf_common+0x3e>
 80071c8:	18e1      	adds	r1, r4, r3
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	2030      	movs	r0, #48	@ 0x30
 80071ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071d2:	4422      	add	r2, r4
 80071d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071dc:	3302      	adds	r3, #2
 80071de:	e7c7      	b.n	8007170 <_printf_common+0x58>
 80071e0:	2301      	movs	r3, #1
 80071e2:	4622      	mov	r2, r4
 80071e4:	4641      	mov	r1, r8
 80071e6:	4638      	mov	r0, r7
 80071e8:	47c8      	blx	r9
 80071ea:	3001      	adds	r0, #1
 80071ec:	d0e6      	beq.n	80071bc <_printf_common+0xa4>
 80071ee:	3601      	adds	r6, #1
 80071f0:	e7d9      	b.n	80071a6 <_printf_common+0x8e>
	...

080071f4 <_printf_i>:
 80071f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	7e0f      	ldrb	r7, [r1, #24]
 80071fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071fc:	2f78      	cmp	r7, #120	@ 0x78
 80071fe:	4691      	mov	r9, r2
 8007200:	4680      	mov	r8, r0
 8007202:	460c      	mov	r4, r1
 8007204:	469a      	mov	sl, r3
 8007206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800720a:	d807      	bhi.n	800721c <_printf_i+0x28>
 800720c:	2f62      	cmp	r7, #98	@ 0x62
 800720e:	d80a      	bhi.n	8007226 <_printf_i+0x32>
 8007210:	2f00      	cmp	r7, #0
 8007212:	f000 80d2 	beq.w	80073ba <_printf_i+0x1c6>
 8007216:	2f58      	cmp	r7, #88	@ 0x58
 8007218:	f000 80b9 	beq.w	800738e <_printf_i+0x19a>
 800721c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007224:	e03a      	b.n	800729c <_printf_i+0xa8>
 8007226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800722a:	2b15      	cmp	r3, #21
 800722c:	d8f6      	bhi.n	800721c <_printf_i+0x28>
 800722e:	a101      	add	r1, pc, #4	@ (adr r1, 8007234 <_printf_i+0x40>)
 8007230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007234:	0800728d 	.word	0x0800728d
 8007238:	080072a1 	.word	0x080072a1
 800723c:	0800721d 	.word	0x0800721d
 8007240:	0800721d 	.word	0x0800721d
 8007244:	0800721d 	.word	0x0800721d
 8007248:	0800721d 	.word	0x0800721d
 800724c:	080072a1 	.word	0x080072a1
 8007250:	0800721d 	.word	0x0800721d
 8007254:	0800721d 	.word	0x0800721d
 8007258:	0800721d 	.word	0x0800721d
 800725c:	0800721d 	.word	0x0800721d
 8007260:	080073a1 	.word	0x080073a1
 8007264:	080072cb 	.word	0x080072cb
 8007268:	0800735b 	.word	0x0800735b
 800726c:	0800721d 	.word	0x0800721d
 8007270:	0800721d 	.word	0x0800721d
 8007274:	080073c3 	.word	0x080073c3
 8007278:	0800721d 	.word	0x0800721d
 800727c:	080072cb 	.word	0x080072cb
 8007280:	0800721d 	.word	0x0800721d
 8007284:	0800721d 	.word	0x0800721d
 8007288:	08007363 	.word	0x08007363
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	1d1a      	adds	r2, r3, #4
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6032      	str	r2, [r6, #0]
 8007294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800729c:	2301      	movs	r3, #1
 800729e:	e09d      	b.n	80073dc <_printf_i+0x1e8>
 80072a0:	6833      	ldr	r3, [r6, #0]
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	1d19      	adds	r1, r3, #4
 80072a6:	6031      	str	r1, [r6, #0]
 80072a8:	0606      	lsls	r6, r0, #24
 80072aa:	d501      	bpl.n	80072b0 <_printf_i+0xbc>
 80072ac:	681d      	ldr	r5, [r3, #0]
 80072ae:	e003      	b.n	80072b8 <_printf_i+0xc4>
 80072b0:	0645      	lsls	r5, r0, #25
 80072b2:	d5fb      	bpl.n	80072ac <_printf_i+0xb8>
 80072b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	da03      	bge.n	80072c4 <_printf_i+0xd0>
 80072bc:	232d      	movs	r3, #45	@ 0x2d
 80072be:	426d      	negs	r5, r5
 80072c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072c4:	4859      	ldr	r0, [pc, #356]	@ (800742c <_printf_i+0x238>)
 80072c6:	230a      	movs	r3, #10
 80072c8:	e011      	b.n	80072ee <_printf_i+0xfa>
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	6833      	ldr	r3, [r6, #0]
 80072ce:	0608      	lsls	r0, r1, #24
 80072d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80072d4:	d402      	bmi.n	80072dc <_printf_i+0xe8>
 80072d6:	0649      	lsls	r1, r1, #25
 80072d8:	bf48      	it	mi
 80072da:	b2ad      	uxthmi	r5, r5
 80072dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80072de:	4853      	ldr	r0, [pc, #332]	@ (800742c <_printf_i+0x238>)
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	bf14      	ite	ne
 80072e4:	230a      	movne	r3, #10
 80072e6:	2308      	moveq	r3, #8
 80072e8:	2100      	movs	r1, #0
 80072ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072ee:	6866      	ldr	r6, [r4, #4]
 80072f0:	60a6      	str	r6, [r4, #8]
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	bfa2      	ittt	ge
 80072f6:	6821      	ldrge	r1, [r4, #0]
 80072f8:	f021 0104 	bicge.w	r1, r1, #4
 80072fc:	6021      	strge	r1, [r4, #0]
 80072fe:	b90d      	cbnz	r5, 8007304 <_printf_i+0x110>
 8007300:	2e00      	cmp	r6, #0
 8007302:	d04b      	beq.n	800739c <_printf_i+0x1a8>
 8007304:	4616      	mov	r6, r2
 8007306:	fbb5 f1f3 	udiv	r1, r5, r3
 800730a:	fb03 5711 	mls	r7, r3, r1, r5
 800730e:	5dc7      	ldrb	r7, [r0, r7]
 8007310:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007314:	462f      	mov	r7, r5
 8007316:	42bb      	cmp	r3, r7
 8007318:	460d      	mov	r5, r1
 800731a:	d9f4      	bls.n	8007306 <_printf_i+0x112>
 800731c:	2b08      	cmp	r3, #8
 800731e:	d10b      	bne.n	8007338 <_printf_i+0x144>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	07df      	lsls	r7, r3, #31
 8007324:	d508      	bpl.n	8007338 <_printf_i+0x144>
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	6861      	ldr	r1, [r4, #4]
 800732a:	4299      	cmp	r1, r3
 800732c:	bfde      	ittt	le
 800732e:	2330      	movle	r3, #48	@ 0x30
 8007330:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007334:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007338:	1b92      	subs	r2, r2, r6
 800733a:	6122      	str	r2, [r4, #16]
 800733c:	f8cd a000 	str.w	sl, [sp]
 8007340:	464b      	mov	r3, r9
 8007342:	aa03      	add	r2, sp, #12
 8007344:	4621      	mov	r1, r4
 8007346:	4640      	mov	r0, r8
 8007348:	f7ff fee6 	bl	8007118 <_printf_common>
 800734c:	3001      	adds	r0, #1
 800734e:	d14a      	bne.n	80073e6 <_printf_i+0x1f2>
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	b004      	add	sp, #16
 8007356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f043 0320 	orr.w	r3, r3, #32
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	4833      	ldr	r0, [pc, #204]	@ (8007430 <_printf_i+0x23c>)
 8007364:	2778      	movs	r7, #120	@ 0x78
 8007366:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	6831      	ldr	r1, [r6, #0]
 800736e:	061f      	lsls	r7, r3, #24
 8007370:	f851 5b04 	ldr.w	r5, [r1], #4
 8007374:	d402      	bmi.n	800737c <_printf_i+0x188>
 8007376:	065f      	lsls	r7, r3, #25
 8007378:	bf48      	it	mi
 800737a:	b2ad      	uxthmi	r5, r5
 800737c:	6031      	str	r1, [r6, #0]
 800737e:	07d9      	lsls	r1, r3, #31
 8007380:	bf44      	itt	mi
 8007382:	f043 0320 	orrmi.w	r3, r3, #32
 8007386:	6023      	strmi	r3, [r4, #0]
 8007388:	b11d      	cbz	r5, 8007392 <_printf_i+0x19e>
 800738a:	2310      	movs	r3, #16
 800738c:	e7ac      	b.n	80072e8 <_printf_i+0xf4>
 800738e:	4827      	ldr	r0, [pc, #156]	@ (800742c <_printf_i+0x238>)
 8007390:	e7e9      	b.n	8007366 <_printf_i+0x172>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	f023 0320 	bic.w	r3, r3, #32
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	e7f6      	b.n	800738a <_printf_i+0x196>
 800739c:	4616      	mov	r6, r2
 800739e:	e7bd      	b.n	800731c <_printf_i+0x128>
 80073a0:	6833      	ldr	r3, [r6, #0]
 80073a2:	6825      	ldr	r5, [r4, #0]
 80073a4:	6961      	ldr	r1, [r4, #20]
 80073a6:	1d18      	adds	r0, r3, #4
 80073a8:	6030      	str	r0, [r6, #0]
 80073aa:	062e      	lsls	r6, r5, #24
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	d501      	bpl.n	80073b4 <_printf_i+0x1c0>
 80073b0:	6019      	str	r1, [r3, #0]
 80073b2:	e002      	b.n	80073ba <_printf_i+0x1c6>
 80073b4:	0668      	lsls	r0, r5, #25
 80073b6:	d5fb      	bpl.n	80073b0 <_printf_i+0x1bc>
 80073b8:	8019      	strh	r1, [r3, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	4616      	mov	r6, r2
 80073c0:	e7bc      	b.n	800733c <_printf_i+0x148>
 80073c2:	6833      	ldr	r3, [r6, #0]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	6032      	str	r2, [r6, #0]
 80073c8:	681e      	ldr	r6, [r3, #0]
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	2100      	movs	r1, #0
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7f8 ff16 	bl	8000200 <memchr>
 80073d4:	b108      	cbz	r0, 80073da <_printf_i+0x1e6>
 80073d6:	1b80      	subs	r0, r0, r6
 80073d8:	6060      	str	r0, [r4, #4]
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	2300      	movs	r3, #0
 80073e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073e4:	e7aa      	b.n	800733c <_printf_i+0x148>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	4632      	mov	r2, r6
 80073ea:	4649      	mov	r1, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	47d0      	blx	sl
 80073f0:	3001      	adds	r0, #1
 80073f2:	d0ad      	beq.n	8007350 <_printf_i+0x15c>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	079b      	lsls	r3, r3, #30
 80073f8:	d413      	bmi.n	8007422 <_printf_i+0x22e>
 80073fa:	68e0      	ldr	r0, [r4, #12]
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	4298      	cmp	r0, r3
 8007400:	bfb8      	it	lt
 8007402:	4618      	movlt	r0, r3
 8007404:	e7a6      	b.n	8007354 <_printf_i+0x160>
 8007406:	2301      	movs	r3, #1
 8007408:	4632      	mov	r2, r6
 800740a:	4649      	mov	r1, r9
 800740c:	4640      	mov	r0, r8
 800740e:	47d0      	blx	sl
 8007410:	3001      	adds	r0, #1
 8007412:	d09d      	beq.n	8007350 <_printf_i+0x15c>
 8007414:	3501      	adds	r5, #1
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	9903      	ldr	r1, [sp, #12]
 800741a:	1a5b      	subs	r3, r3, r1
 800741c:	42ab      	cmp	r3, r5
 800741e:	dcf2      	bgt.n	8007406 <_printf_i+0x212>
 8007420:	e7eb      	b.n	80073fa <_printf_i+0x206>
 8007422:	2500      	movs	r5, #0
 8007424:	f104 0619 	add.w	r6, r4, #25
 8007428:	e7f5      	b.n	8007416 <_printf_i+0x222>
 800742a:	bf00      	nop
 800742c:	0800887b 	.word	0x0800887b
 8007430:	0800888c 	.word	0x0800888c

08007434 <__sflush_r>:
 8007434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743c:	0716      	lsls	r6, r2, #28
 800743e:	4605      	mov	r5, r0
 8007440:	460c      	mov	r4, r1
 8007442:	d454      	bmi.n	80074ee <__sflush_r+0xba>
 8007444:	684b      	ldr	r3, [r1, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dc02      	bgt.n	8007450 <__sflush_r+0x1c>
 800744a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd48      	ble.n	80074e2 <__sflush_r+0xae>
 8007450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007452:	2e00      	cmp	r6, #0
 8007454:	d045      	beq.n	80074e2 <__sflush_r+0xae>
 8007456:	2300      	movs	r3, #0
 8007458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800745c:	682f      	ldr	r7, [r5, #0]
 800745e:	6a21      	ldr	r1, [r4, #32]
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	d030      	beq.n	80074c6 <__sflush_r+0x92>
 8007464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	0759      	lsls	r1, r3, #29
 800746a:	d505      	bpl.n	8007478 <__sflush_r+0x44>
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007472:	b10b      	cbz	r3, 8007478 <__sflush_r+0x44>
 8007474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007476:	1ad2      	subs	r2, r2, r3
 8007478:	2300      	movs	r3, #0
 800747a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	4628      	mov	r0, r5
 8007480:	47b0      	blx	r6
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	d106      	bne.n	8007496 <__sflush_r+0x62>
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	291d      	cmp	r1, #29
 800748c:	d82b      	bhi.n	80074e6 <__sflush_r+0xb2>
 800748e:	4a2a      	ldr	r2, [pc, #168]	@ (8007538 <__sflush_r+0x104>)
 8007490:	410a      	asrs	r2, r1
 8007492:	07d6      	lsls	r6, r2, #31
 8007494:	d427      	bmi.n	80074e6 <__sflush_r+0xb2>
 8007496:	2200      	movs	r2, #0
 8007498:	6062      	str	r2, [r4, #4]
 800749a:	04d9      	lsls	r1, r3, #19
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	d504      	bpl.n	80074ac <__sflush_r+0x78>
 80074a2:	1c42      	adds	r2, r0, #1
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0x76>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	b903      	cbnz	r3, 80074ac <__sflush_r+0x78>
 80074aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80074ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ae:	602f      	str	r7, [r5, #0]
 80074b0:	b1b9      	cbz	r1, 80074e2 <__sflush_r+0xae>
 80074b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074b6:	4299      	cmp	r1, r3
 80074b8:	d002      	beq.n	80074c0 <__sflush_r+0x8c>
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7ff fbdc 	bl	8006c78 <_free_r>
 80074c0:	2300      	movs	r3, #0
 80074c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80074c4:	e00d      	b.n	80074e2 <__sflush_r+0xae>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	4602      	mov	r2, r0
 80074ce:	1c50      	adds	r0, r2, #1
 80074d0:	d1c9      	bne.n	8007466 <__sflush_r+0x32>
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0c6      	beq.n	8007466 <__sflush_r+0x32>
 80074d8:	2b1d      	cmp	r3, #29
 80074da:	d001      	beq.n	80074e0 <__sflush_r+0xac>
 80074dc:	2b16      	cmp	r3, #22
 80074de:	d11e      	bne.n	800751e <__sflush_r+0xea>
 80074e0:	602f      	str	r7, [r5, #0]
 80074e2:	2000      	movs	r0, #0
 80074e4:	e022      	b.n	800752c <__sflush_r+0xf8>
 80074e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ea:	b21b      	sxth	r3, r3
 80074ec:	e01b      	b.n	8007526 <__sflush_r+0xf2>
 80074ee:	690f      	ldr	r7, [r1, #16]
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	d0f6      	beq.n	80074e2 <__sflush_r+0xae>
 80074f4:	0793      	lsls	r3, r2, #30
 80074f6:	680e      	ldr	r6, [r1, #0]
 80074f8:	bf08      	it	eq
 80074fa:	694b      	ldreq	r3, [r1, #20]
 80074fc:	600f      	str	r7, [r1, #0]
 80074fe:	bf18      	it	ne
 8007500:	2300      	movne	r3, #0
 8007502:	eba6 0807 	sub.w	r8, r6, r7
 8007506:	608b      	str	r3, [r1, #8]
 8007508:	f1b8 0f00 	cmp.w	r8, #0
 800750c:	dde9      	ble.n	80074e2 <__sflush_r+0xae>
 800750e:	6a21      	ldr	r1, [r4, #32]
 8007510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007512:	4643      	mov	r3, r8
 8007514:	463a      	mov	r2, r7
 8007516:	4628      	mov	r0, r5
 8007518:	47b0      	blx	r6
 800751a:	2800      	cmp	r0, #0
 800751c:	dc08      	bgt.n	8007530 <__sflush_r+0xfc>
 800751e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007530:	4407      	add	r7, r0
 8007532:	eba8 0800 	sub.w	r8, r8, r0
 8007536:	e7e7      	b.n	8007508 <__sflush_r+0xd4>
 8007538:	dfbffffe 	.word	0xdfbffffe

0800753c <_fflush_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	4605      	mov	r5, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b913      	cbnz	r3, 800754c <_fflush_r+0x10>
 8007546:	2500      	movs	r5, #0
 8007548:	4628      	mov	r0, r5
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	b118      	cbz	r0, 8007556 <_fflush_r+0x1a>
 800754e:	6a03      	ldr	r3, [r0, #32]
 8007550:	b90b      	cbnz	r3, 8007556 <_fflush_r+0x1a>
 8007552:	f7ff fa6d 	bl	8006a30 <__sinit>
 8007556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0f3      	beq.n	8007546 <_fflush_r+0xa>
 800755e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007560:	07d0      	lsls	r0, r2, #31
 8007562:	d404      	bmi.n	800756e <_fflush_r+0x32>
 8007564:	0599      	lsls	r1, r3, #22
 8007566:	d402      	bmi.n	800756e <_fflush_r+0x32>
 8007568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800756a:	f7ff fb74 	bl	8006c56 <__retarget_lock_acquire_recursive>
 800756e:	4628      	mov	r0, r5
 8007570:	4621      	mov	r1, r4
 8007572:	f7ff ff5f 	bl	8007434 <__sflush_r>
 8007576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007578:	07da      	lsls	r2, r3, #31
 800757a:	4605      	mov	r5, r0
 800757c:	d4e4      	bmi.n	8007548 <_fflush_r+0xc>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	059b      	lsls	r3, r3, #22
 8007582:	d4e1      	bmi.n	8007548 <_fflush_r+0xc>
 8007584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007586:	f7ff fb67 	bl	8006c58 <__retarget_lock_release_recursive>
 800758a:	e7dd      	b.n	8007548 <_fflush_r+0xc>

0800758c <memmove>:
 800758c:	4288      	cmp	r0, r1
 800758e:	b510      	push	{r4, lr}
 8007590:	eb01 0402 	add.w	r4, r1, r2
 8007594:	d902      	bls.n	800759c <memmove+0x10>
 8007596:	4284      	cmp	r4, r0
 8007598:	4623      	mov	r3, r4
 800759a:	d807      	bhi.n	80075ac <memmove+0x20>
 800759c:	1e43      	subs	r3, r0, #1
 800759e:	42a1      	cmp	r1, r4
 80075a0:	d008      	beq.n	80075b4 <memmove+0x28>
 80075a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075aa:	e7f8      	b.n	800759e <memmove+0x12>
 80075ac:	4402      	add	r2, r0
 80075ae:	4601      	mov	r1, r0
 80075b0:	428a      	cmp	r2, r1
 80075b2:	d100      	bne.n	80075b6 <memmove+0x2a>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075be:	e7f7      	b.n	80075b0 <memmove+0x24>

080075c0 <_sbrk_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d06      	ldr	r5, [pc, #24]	@ (80075dc <_sbrk_r+0x1c>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	f7fb fc78 	bl	8002ec0 <_sbrk>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_sbrk_r+0x1a>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_sbrk_r+0x1a>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20026744 	.word	0x20026744

080075e0 <_realloc_r>:
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4680      	mov	r8, r0
 80075e6:	4615      	mov	r5, r2
 80075e8:	460c      	mov	r4, r1
 80075ea:	b921      	cbnz	r1, 80075f6 <_realloc_r+0x16>
 80075ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	4611      	mov	r1, r2
 80075f2:	f7ff bbad 	b.w	8006d50 <_malloc_r>
 80075f6:	b92a      	cbnz	r2, 8007604 <_realloc_r+0x24>
 80075f8:	f7ff fb3e 	bl	8006c78 <_free_r>
 80075fc:	2400      	movs	r4, #0
 80075fe:	4620      	mov	r0, r4
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	f000 f81a 	bl	800763c <_malloc_usable_size_r>
 8007608:	4285      	cmp	r5, r0
 800760a:	4606      	mov	r6, r0
 800760c:	d802      	bhi.n	8007614 <_realloc_r+0x34>
 800760e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007612:	d8f4      	bhi.n	80075fe <_realloc_r+0x1e>
 8007614:	4629      	mov	r1, r5
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fb9a 	bl	8006d50 <_malloc_r>
 800761c:	4607      	mov	r7, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	d0ec      	beq.n	80075fc <_realloc_r+0x1c>
 8007622:	42b5      	cmp	r5, r6
 8007624:	462a      	mov	r2, r5
 8007626:	4621      	mov	r1, r4
 8007628:	bf28      	it	cs
 800762a:	4632      	movcs	r2, r6
 800762c:	f7ff fb15 	bl	8006c5a <memcpy>
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fb20 	bl	8006c78 <_free_r>
 8007638:	463c      	mov	r4, r7
 800763a:	e7e0      	b.n	80075fe <_realloc_r+0x1e>

0800763c <_malloc_usable_size_r>:
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f18      	subs	r0, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfbc      	itt	lt
 8007646:	580b      	ldrlt	r3, [r1, r0]
 8007648:	18c0      	addlt	r0, r0, r3
 800764a:	4770      	bx	lr

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
